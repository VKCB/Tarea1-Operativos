     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  	sys_read: equ 0	
     7                                  	sys_write:	equ 1
     8                                  	sys_nanosleep:	equ 35
     9                                  	sys_nanosleep2:	equ 200
    10                                  	sys_time:	equ 201
    11                                  	sys_fcntl:	equ 72
    12                                  
    13                                  	char_equal: equ 61 
    14                                  	char_aster: equ 42
    15                                  	char_may: equ 62 
    16                                  	char_men: equ 60 
    17                                  	char_dosp: equ 58
    18                                  	char_comillas: equ 176
    19                                  	char_comilla: equ 39 
    20                                  	char_space: equ 32 
    21                                  	left_direction: equ -1
    22                                  	right_direction: equ 1
    23                                  	up_direction: equ 2
    24                                  	down_direction: equ 3
    25                                  	char_bot: equ 98
    26                                  
    27                                  
    28                                  
    29                                  STDIN_FILENO: equ 0			;Se utiliza en llamadas al sistema que requieren un descriptor de archivo, por ejemplo, al leer de la entrada estándar
    30                                  
    31                                  F_SETFL:	equ 0x0004		;Se pasa como segundo argumento a la llamada al sistema fcntl para indicar que queremos cambiar los flags del descriptor de archivo.
    32                                  O_NONBLOCK: equ 0x0004		;Se utiliza como tercer argumento en la llamada al sistema fcntl para indicar que el descriptor de archivo debe operar en modo no bloqueante.
    33                                  
    34                                  ;screen clean definition
    35                                  	row_cells:	equ 24	;Numero de filas que caben en la pantalla
    36                                  	column_cells: 	equ 110 ; set to any (reasonable) value you wish
    37                                  	array_length:	equ row_cells * column_cells + row_cells ;(+ 32 caracteres de nueva línea)
    38                                  
    39                                  ;This is regarding the sleep time
    40                                  timespec:
    41 00000000 0000000000000000            tv_sec  dq 0
    42 00000008 002D310100000000            tv_nsec dq 20000000		;0.02 s
    43                                  
    44                                  timespec2:
    45 00000010 0000000000000000            tv_sec2  dq 0
    46 00000018 00204AA9D1010000            tv_nsec2 dq 2000000000000		;0.02 s
    47                                  
    48                                  ;This is for cleaning up the screen
    49 00000020 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"	;2J: Esta es una secuencia de escape ANSI que indica Clear screen
    50                                  clear_length:	equ $-clear			;H: Indica reposicionamiento del cursor.
    51                                  
    52                                  ; Esta es la pantalla de inicio
    53                                  	
    54 00000027 202020202020202020-     	msg13: db "               ", 0xA, 0xD
    54 00000030 2020202020200A0D   
    55 00000038 202020202009090909-     	msg1: db "     					   TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    55 00000041 092020205445434E4F-
    55 0000004A 4C4F4749434F204445-
    55 00000053 20434F535441205249-
    55 0000005C 434120202020202020-
    55 00000065 200A0D             
    56 00000068 202020202020202020-     	msg14: db "               ", 0xA, 0xD
    56 00000071 2020202020200A0D   
    57 00000079 202020202020202020-     	msg17: db "               ", 0xA, 0xD
    57 00000082 2020202020200A0D   
    58 0000008A 202020202020202020-     	msg18: db "               ", 0xA, 0xD
    58 00000093 2020202020200A0D   
    59 0000009B 09090909090956616C-     	msg2: db "						Valerin Calderon       ", 0xA, 0xD
    59 000000A4 6572696E2043616C64-
    59 000000AD 65726F6E2020202020-
    59 000000B6 20200A0D           
    60 000000BA 09090909090959656E-     	msg5: db "						Yendry Badilla         ", 0xA, 0xD
    60 000000C3 64727920426164696C-
    60 000000CC 6C6120202020202020-
    60 000000D5 20200A0D           
    61 000000D9 090909090909416E64-     	msg15: db "						Andrés Molina          ", 0xA, 0xD
    61 000000E2 72C3A973204D6F6C69-
    61 000000EB 6E6120202020202020-
    61 000000F4 2020200A0D         
    62 000000F9 202020202020202020-     	msg6: db "               ", 0xA, 0xD
    62 00000102 2020202020200A0D   
    63 0000010A 202020202020202020-     	msg7: db "               ", 0xA, 0xD
    63 00000113 2020202020200A0D   
    64 0000011B 202020202020202020-     	msg8: db "               ", 0xA, 0xD
    64 00000124 2020202020200A0D   
    65 0000012C 202020202020202020-     	msg9: db "               ", 0xA, 0xD
    65 00000135 2020202020200A0D   
    66 0000013D 202020202020202020-     	msg16: db "               ", 0xA, 0xD 
    66 00000146 2020202020200A0D   
    67 0000014E 090909090909475241-     	msg3: db "						GRAN TRAK TEC        ", 0xA, 0xD
    67 00000157 4E205452414B205445-
    67 00000160 432020202020202020-
    67 00000169 0A0D               
    68                                  
    69 0000016B 202020202020202020-     	msg19: db "               ", 0xA, 0xD
    69 00000174 2020202020200A0D   
    70 0000017C 202020202020202020-     	msg20: db "               ", 0xA, 0xD
    70 00000185 2020202020200A0D   
    71 0000018D 202020202020202020-     	msg21: db "               ", 0xA, 0xD
    71 00000196 2020202020200A0D   
    72 0000019E 202020202020202020-     	msg22: db "               ", 0xA, 0xD
    72 000001A7 2020202020200A0D   
    73 000001AF 202020202020202020-     	msg23: db "               ", 0xA, 0xD 
    73 000001B8 2020202020200A0D   
    74 000001C0 202020202020202020-     	msg24: db "               ", 0xA, 0xD
    74 000001C9 2020202020200A0D   
    75 000001D1 202020202020202020-     	msg25: db "               ", 0xA, 0xD
    75 000001DA 2020202020200A0D   
    76 000001E2 202020202020202020-     	msg26: db "               ", 0xA, 0xD 
    76 000001EB 2020202020200A0D   
    77 000001F3 202020202020090909-     	msg4: db "      					   PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    77 000001FC 090920202050524553-
    77 00000205 494F4E4520454E5445-
    77 0000020E 52205041524120494E-
    77 00000217 494349415220202020-
    77 00000220 202020200A0D       
    78                                  	msg1_length:	equ $-msg1
    79                                  	msg2_length:	equ $-msg2
    80                                  	msg3_length:	equ $-msg3
    81                                  	msg4_length:	equ $-msg4
    82                                  	msg5_length:	equ $-msg5
    83                                  	msg13_length:	equ $-msg13
    84                                  	msg14_length:	equ $-msg14
    85                                  	msg15_length:	equ $-msg15
    86                                  	msg16_length:	equ $-msg16
    87                                  	msg17_length:	equ $-msg17 
    88                                  	msg6_length:	equ $-msg6 
    89                                  	msg7_length:	equ $-msg7 
    90                                  	msg8_length:	equ $-msg8 
    91                                  	msg9_length:	equ $-msg9 
    92                                  	msg18_length:	equ $-msg18
    93                                  	msg19_length:	equ $-msg19
    94                                  	msg20_length:	equ $-msg20
    95                                  	msg21_length:	equ $-msg21
    96                                  	msg22_length:	equ $-msg22
    97                                  	msg23_length:	equ $-msg23
    98                                  	msg24_length:	equ $-msg24
    99                                  	msg25_length:	equ $-msg25
   100                                  	msg26_length:	equ $-msg26
   101                                  
   102                                  
   103                                  	; Usefull macros (Como funciones reutilizables)
   104                                   
   105                                  	%macro setnonblocking 0		;Configura la entrada estándar para que funcione en modo no bloqueante
   106                                  		mov rax, sys_fcntl
   107                                  		mov rdi, STDIN_FILENO
   108                                  		mov rsi, F_SETFL
   109                                  		mov rdx, O_NONBLOCK
   110                                  		syscall
   111                                  	%endmacro
   112                                  
   113                                  	%macro unsetnonblocking 0	;Restablece la entrada estándar al modo bloqueante
   114                                  		mov rax, sys_fcntl
   115                                  		mov rdi, STDIN_FILENO
   116                                  		mov rsi, F_SETFL
   117                                  		mov rdx, 0
   118                                  		syscall
   119                                  	%endmacro
   120                                  
   121                                  	%macro full_line 0			;Linea completa de X
   122                                  		times column_cells db "X"
   123                                  		db 0x0a, 0xD
   124                                  	%endmacro
   125                                  
   126                                  	;Esta parte es para la creacion de la pista
   127                                  
   128                                  	%macro up_down_pista 0			;Parte de arriba de la pista
   129                                  		db "X"
   130                                  		times 9 db " "
   131                                  		times 90 db "O"
   132                                  		times 9 db " "
   133                                  		db "X"
   134                                  		db 0x0a, 0xD
   135                                  	%endmacro
   136                                  
   137                                  	%macro right_pista1 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   138                                  		db "X"
   139                                  		times 9 db " "
   140                                  		db "O"
   141                                  		times 88 db " "
   142                                  		db "O"
   143                                  		times 9 db " "
   144                                  		db "X", 0x0a, 0xD
   145                                  	%endmacro
   146                                  
   147                                  	%macro right_pista2 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   148                                  		db "X"
   149                                  		times 9 db " "
   150                                  		db "O"
   151                                  		times 70 db " "
   152                                  		times 19 db "O"
   153                                  		times 9 db " "
   154                                  		db "X", 0x0a, 0xD
   155                                  	%endmacro
   156                                  
   157                                  	%macro right_pista3 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   158                                  		db "X"
   159                                  		times 9 db " "
   160                                  		db "O"
   161                                  		times 70 db " "
   162                                  		db "O"
   163                                  		times 27 db " "
   164                                  		db "X", 0x0a, 0xD
   165                                  	%endmacro
   166                                  
   167                                  	%macro right_pista4 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   168                                  		db "X"
   169                                  		times 9 db " "
   170                                  		db "O"
   171                                  		times 70 db " "
   172                                  		db "O"
   173                                  		times 4 db " "
   174                                  		times 23 db "O"
   175                                  		db "X", 0x0a, 0xD
   176                                  	%endmacro
   177                                  
   178                                  	; Fin de la creacion de la pista
   179                                  
   180                                  	%macro marcador_j1 0			;Crea una línea completa de 'O' seguida de una nueva línea marcadores
   181                                  		db "X PLAYER 1 TURNS: "
   182                                  		times 60 db " "
   183                                  		db "Time:"
   184                                  		times 26 db " "
   185                                  		db "X"
   186                                  		db 0x0a, 0xD
   187                                  	%endmacro
   188                                  
   189                                  	%macro marcador_j2 0			;Crea una línea completa de 'O' seguida de una nueva línea
   190                                  		db "X PLAYER 2 TURNS: "
   191                                  		times 91 db " "
   192                                  		db "X"
   193                                  		db 0x0a, 0xD
   194                                  	%endmacro
   195                                  
   196                                  	%macro hollow_line 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   197                                  		db "X"
   198                                  		times column_cells-2 db char_space	;A 80 le resta las 2 X de los extremos e imprime 78 espacios
   199                                  		db "X", 0x0a, 0xD
   200                                  	%endmacro
   201                                  
   202                                  	%macro print 2				;Imprime una cadena especificada en la salida estándar
   203                                  		mov eax, sys_write
   204                                  		mov edi, 1 	; stdout
   205                                  		mov rsi, %1				;Parametro 1 que se pasa en donde se llama al macro
   206                                  		mov edx, %2				;Parametro 2
   207                                  		syscall
   208                                  	%endmacro
   209                                  
   210                                  	;Esta es la funcion que obtiene lo que uno ingrese
   211                                  	%macro getchar 0			;Lee un solo carácter de la entrada estándar y lo almacena en input_char
   212                                  		mov     rax, sys_read
   213                                  		mov     rdi, STDIN_FILENO
   214                                  		mov     rsi, input_char
   215                                  		mov     rdx, 1 ; number of bytes
   216                                  		syscall         ;read text input from keyboard
   217                                  	%endmacro
   218                                  
   219                                  	%macro sleeptime 0			;Suspende la ejecución del programa durante el tiempo especificado
   220                                  		mov eax, sys_nanosleep
   221                                  		mov rdi, timespec
   222                                  		xor esi, esi		; ignore remaining time in case of call interruption
   223                                  		syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   224                                  	%endmacro
   225                                  
   226                                  global _start
   227                                  
   228                                  section .bss
   229                                  
   230 00000000 ??????????              	buffer resb 5  ; Buffer para almacenar los dígitos convertidos
   231                                  
   232 00000005 ????????????????        	input_char: resq 1 
   233                                  
   234 0000000D ??                      	temp_char resb 1
   235 0000000E ??                      	random resb 1 ;Numero random obtenido
   236 0000000F ??                      	random2 resb 1
   237                                  
   238                                  section .data 
   239                                  
   240 00000000 2F6465762F7572616E-     	urandom db '/dev/urandom', 0
   240 00000009 646F6D00           
   241 0000000D 0A00                    	newline db 10, 0
   242                                  
   243 0000000F 0000000000000000        	score dq 0
   244 00000017 [9204000000000000]      	score_position dq board + 19 + 10* (column_cells + 2)
   245                                  
   246                                  	board:
   247                                  		full_line
   122 0000001F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 0000008D 0A0D                <1>  db 0x0a, 0xD
   248                                  		marcador_j1
   181 0000008F 5820504C4159455220- <1>  db "X PLAYER 1 TURNS: "
   181 00000098 31205455524E533A20  <1>
   182 000000A1 20<rep 3Ch>         <1>  times 60 db " "
   183 000000DD 54696D653A          <1>  db "Time:"
   184 000000E2 20<rep 1Ah>         <1>  times 26 db " "
   185 000000FC 58                  <1>  db "X"
   186 000000FD 0A0D                <1>  db 0x0a, 0xD
   249                                  		marcador_j2 
   190 000000FF 5820504C4159455220- <1>  db "X PLAYER 2 TURNS: "
   190 00000108 32205455524E533A20  <1>
   191 00000111 20<rep 5Bh>         <1>  times 91 db " "
   192 0000016C 58                  <1>  db "X"
   193 0000016D 0A0D                <1>  db 0x0a, 0xD
   250                                  		full_line
   122 0000016F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000001DD 0A0D                <1>  db 0x0a, 0xD
   251                                          %rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   252                                          hollow_line
   253                                          %endrep 
   252                              <1>  hollow_line
   197 000001DF 58                  <2>  db "X"
   198 000001E0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000024C 580A0D              <2>  db "X", 0x0a, 0xD
   252                              <1>  hollow_line
   197 0000024F 58                  <2>  db "X"
   198 00000250 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000002BC 580A0D              <2>  db "X", 0x0a, 0xD
   252                              <1>  hollow_line
   197 000002BF 58                  <2>  db "X"
   198 000002C0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000032C 580A0D              <2>  db "X", 0x0a, 0xD
   254                                  
   255                                  		up_down_pista
   129 0000032F 58                  <1>  db "X"
   130 00000330 20<rep 9h>          <1>  times 9 db " "
   131 00000339 4F<rep 5Ah>         <1>  times 90 db "O"
   132 00000393 20<rep 9h>          <1>  times 9 db " "
   133 0000039C 58                  <1>  db "X"
   134 0000039D 0A0D                <1>  db 0x0a, 0xD
   256                                  
   257                                  
   258                                          right_pista2
   148 0000039F 58                  <1>  db "X"
   149 000003A0 20<rep 9h>          <1>  times 9 db " "
   150 000003A9 4F                  <1>  db "O"
   151 000003AA 20<rep 46h>         <1>  times 70 db " "
   152 000003F0 4F<rep 13h>         <1>  times 19 db "O"
   153 00000403 20<rep 9h>          <1>  times 9 db " "
   154 0000040C 580A0D              <1>  db "X", 0x0a, 0xD
   259                                  
   260                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   261                                          right_pista3
   262                                          %endrep
   261                              <1>  right_pista3
   158 0000040F 58                  <2>  db "X"
   159 00000410 20<rep 9h>          <2>  times 9 db " "
   160 00000419 4F                  <2>  db "O"
   161 0000041A 20<rep 46h>         <2>  times 70 db " "
   162 00000460 4F                  <2>  db "O"
   163 00000461 20<rep 1Bh>         <2>  times 27 db " "
   164 0000047C 580A0D              <2>  db "X", 0x0a, 0xD
   261                              <1>  right_pista3
   158 0000047F 58                  <2>  db "X"
   159 00000480 20<rep 9h>          <2>  times 9 db " "
   160 00000489 4F                  <2>  db "O"
   161 0000048A 20<rep 46h>         <2>  times 70 db " "
   162 000004D0 4F                  <2>  db "O"
   163 000004D1 20<rep 1Bh>         <2>  times 27 db " "
   164 000004EC 580A0D              <2>  db "X", 0x0a, 0xD
   263                                  
   264                                  		right_pista4
   168 000004EF 58                  <1>  db "X"
   169 000004F0 20<rep 9h>          <1>  times 9 db " "
   170 000004F9 4F                  <1>  db "O"
   171 000004FA 20<rep 46h>         <1>  times 70 db " "
   172 00000540 4F                  <1>  db "O"
   173 00000541 20<rep 4h>          <1>  times 4 db " "
   174 00000545 4F<rep 17h>         <1>  times 23 db "O"
   175 0000055C 580A0D              <1>  db "X", 0x0a, 0xD
   265                                  		right_pista4
   168 0000055F 58                  <1>  db "X"
   169 00000560 20<rep 9h>          <1>  times 9 db " "
   170 00000569 4F                  <1>  db "O"
   171 0000056A 20<rep 46h>         <1>  times 70 db " "
   172 000005B0 4F                  <1>  db "O"
   173 000005B1 20<rep 4h>          <1>  times 4 db " "
   174 000005B5 4F<rep 17h>         <1>  times 23 db "O"
   175 000005CC 580A0D              <1>  db "X", 0x0a, 0xD
   266                                  		right_pista4
   168 000005CF 58                  <1>  db "X"
   169 000005D0 20<rep 9h>          <1>  times 9 db " "
   170 000005D9 4F                  <1>  db "O"
   171 000005DA 20<rep 46h>         <1>  times 70 db " "
   172 00000620 4F                  <1>  db "O"
   173 00000621 20<rep 4h>          <1>  times 4 db " "
   174 00000625 4F<rep 17h>         <1>  times 23 db "O"
   175 0000063C 580A0D              <1>  db "X", 0x0a, 0xD
   267                                  
   268                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   269                                          right_pista3
   270                                          %endrep 
   269                              <1>  right_pista3
   158 0000063F 58                  <2>  db "X"
   159 00000640 20<rep 9h>          <2>  times 9 db " "
   160 00000649 4F                  <2>  db "O"
   161 0000064A 20<rep 46h>         <2>  times 70 db " "
   162 00000690 4F                  <2>  db "O"
   163 00000691 20<rep 1Bh>         <2>  times 27 db " "
   164 000006AC 580A0D              <2>  db "X", 0x0a, 0xD
   269                              <1>  right_pista3
   158 000006AF 58                  <2>  db "X"
   159 000006B0 20<rep 9h>          <2>  times 9 db " "
   160 000006B9 4F                  <2>  db "O"
   161 000006BA 20<rep 46h>         <2>  times 70 db " "
   162 00000700 4F                  <2>  db "O"
   163 00000701 20<rep 1Bh>         <2>  times 27 db " "
   164 0000071C 580A0D              <2>  db "X", 0x0a, 0xD
   271                                  
   272                                  		right_pista2
   148 0000071F 58                  <1>  db "X"
   149 00000720 20<rep 9h>          <1>  times 9 db " "
   150 00000729 4F                  <1>  db "O"
   151 0000072A 20<rep 46h>         <1>  times 70 db " "
   152 00000770 4F<rep 13h>         <1>  times 19 db "O"
   153 00000783 20<rep 9h>          <1>  times 9 db " "
   154 0000078C 580A0D              <1>  db "X", 0x0a, 0xD
   273                                  
   274                                  
   275                                  		up_down_pista
   129 0000078F 58                  <1>  db "X"
   130 00000790 20<rep 9h>          <1>  times 9 db " "
   131 00000799 4F<rep 5Ah>         <1>  times 90 db "O"
   132 000007F3 20<rep 9h>          <1>  times 9 db " "
   133 000007FC 58                  <1>  db "X"
   134 000007FD 0A0D                <1>  db 0x0a, 0xD
   276                                  
   277                                  		%rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   278                                          hollow_line
   279                                          %endrep
   278                              <1>  hollow_line
   197 000007FF 58                  <2>  db "X"
   198 00000800 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000086C 580A0D              <2>  db "X", 0x0a, 0xD
   278                              <1>  hollow_line
   197 0000086F 58                  <2>  db "X"
   198 00000870 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000008DC 580A0D              <2>  db "X", 0x0a, 0xD
   278                              <1>  hollow_line
   197 000008DF 58                  <2>  db "X"
   198 000008E0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000094C 580A0D              <2>  db "X", 0x0a, 0xD
   280                                  
   281                                          full_line
   122 0000094F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000009BD 0A0D                <1>  db 0x0a, 0xD
   282                                  	board_size:   equ   $ - board
   283                                  
   284                                  	; Added for the terminal issue	
   285 000009BF 00<rep 24h>             		termios:        times 36 db 0	;Define una estructura de 36 bytes inicializados a 0. Esta estructura es utilizada para almacenar las configuraciones del terminal
   286                                  		stdin:          equ 0			;Define el descriptor de archivo para la entrada estándar (stdin), que es 0
   287                                  		ICANON:         equ 1<<1		;Canonico la entrada no se envía al programa hasta que el usuario presiona Enter
   288                                  		ECHO:           equ 1<<3		;Bandera que habilita o deshabilita este modo
   289                                  		VTIME: 			equ 5
   290                                  		VMIN:			equ 6
   291                                  		CC_C:			equ 18
   292                                  
   293                                  
   294 000009E3 [D404000000000000]      	pallet_position dq board + 85 + ((column_cells + 2) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical 
   295 000009EB 0300000000000000        	pallet_size dq 3
   296                                  
   297 000009F3 [DE04000000000000]      	bot_position dq board + 85 + ((column_cells + 3) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical
   298                                  
   299 000009FB 1E00000000000000        	pared1_x_pos: dq 30 ;0-59
   300 00000A03 0100000000000000        	pared1_y_pos: dq 1
   301 00000A0B 5000000000000000        	pared2_x_pos: dq 80 ;0-59
   302 00000A13 0100000000000000        	pared2_y_pos: dq 1
   303 00000A1B 1500000000000000        		colen: dq 21
   304 00000A23 0000000000000000        		colj: dq 0
   305 00000A2B 0000000000000000        		cole: dq 0
   306 00000A33 1500000000000000        		pared: dq 21
   307 00000A3B 0000000000000000        		colplayer: dq 0 
   308                                  
   309                                  
   310                                  
   311                                  section .text
   312                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   313                                  canonical_off:										;La entrada se procese carácter por carácter sin esperar a que se presione Enter.
   314 00000226 E86F000000                      call read_stdin_termios						;Guarda los atributos actuales del terminal en la variable termios
   315                                  
   316                                          ; clear canonical bit in local mode flags	
   317 0000022B 50                              push rax						
   318 0000022C B802000000                      mov eax, ICANON								;Carga el valor de la constante ICANON (que representa el bit del modo canónico) en eax
   319 00000231 F7D0                            not eax										;Niega todos los bits en eax
   320 00000233 2105(CB090000)                  and [termios+12], eax						;Limpia el bit canónico en las banderas de modo local
   321 00000239 C605(D6090000)00        		mov byte[termios+CC_C+VTIME], 0				;Establecen VTIME y VMIN en 0 para que el terminal no espere caracteres adicionales
   322 00000240 C605(D7090000)00        		mov byte[termios+CC_C+VMIN], 0
   323 00000247 58                              pop rax
   324                                  
   325 00000248 E86C000000                      call write_stdin_termios					;Escribe los atributos modificados de termios de vuelta al terminal
   326 0000024D C3                              ret
   327                                  
   328                                  echo_off:											;No se muestran los caracteres introducidos
   329 0000024E E847000000                      call read_stdin_termios
   330                                  
   331                                          ; clear echo bit in local mode flags
   332 00000253 50                              push rax
   333 00000254 B808000000                      mov eax, ECHO
   334 00000259 F7D0                            not eax
   335 0000025B 2105(CB090000)                  and [termios+12], eax
   336 00000261 58                              pop rax
   337                                  
   338 00000262 E852000000                      call write_stdin_termios
   339 00000267 C3                              ret
   340                                  
   341                                  canonical_on:										;La entrada se procesa en líneas completas. Espera hasta que el usuario presione Enter
   342 00000268 E82D000000                      call read_stdin_termios
   343                                  
   344                                          ; set canonical bit in local mode flags
   345 0000026D 830D(CB090000)02                or dword [termios+12], ICANON
   346 00000274 C605(D6090000)00        		mov byte[termios+CC_C+VTIME], 0			;Tiempo en decisegundos que el terminal espera para la entrada.
   347 0000027B C605(D7090000)01        		mov byte[termios+CC_C+VMIN], 1			;El número mínimo de caracteres que se deben leer
   348 00000282 E832000000                      call write_stdin_termios
   349 00000287 C3                              ret
   350                                  
   351                                  echo_on:											;Se muestran los caracteres introducidos
   352 00000288 E80D000000                      call read_stdin_termios
   353                                  
   354                                          ; set echo bit in local mode flags
   355 0000028D 830D(CB090000)08                or dword [termios+12], ECHO
   356                                  
   357 00000294 E820000000                      call write_stdin_termios
   358 00000299 C3                              ret
   359                                  
   360                                  read_stdin_termios:									;Lee los atributos del terminal y los guarda en la variable termios
   361 0000029A 50                              push rax
   362 0000029B 53                              push rbx
   363 0000029C 51                              push rcx
   364 0000029D 52                              push rdx
   365                                  
   366 0000029E B836000000                      mov eax, 36h
   367 000002A3 BB00000000                      mov ebx, stdin
   368 000002A8 B901540000                      mov ecx, 5401h
   369 000002AD BA[BF090000]                    mov edx, termios
   370 000002B2 CD80                            int 80h
   371                                  
   372 000002B4 5A                              pop rdx
   373 000002B5 59                              pop rcx
   374 000002B6 5B                              pop rbx
   375 000002B7 58                              pop rax
   376 000002B8 C3                              ret
   377                                  
   378                                  write_stdin_termios:								;Escribe los atributos del terminal utilizando la llamada al sistema 
   379 000002B9 50                              push rax
   380 000002BA 53                              push rbx
   381 000002BB 51                              push rcx
   382 000002BC 52                              push rdx
   383                                  
   384 000002BD B836000000                      mov eax, 36h
   385 000002C2 BB00000000                      mov ebx, stdin
   386 000002C7 B902540000                      mov ecx, 5402h
   387 000002CC BA[BF090000]                    mov edx, termios
   388 000002D1 CD80                            int 80h
   389                                  
   390 000002D3 5A                              pop rdx
   391 000002D4 59                              pop rcx
   392 000002D5 5B                              pop rbx
   393 000002D6 58                              pop rax
   394 000002D7 C3                              ret
   395                                  
   396                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   397                                  
   398                                  ; Function: print_pallet
   399                                  ; This function moves the pallet in the game
   400                                  ; Arguments: none
   401                                  ;
   402                                  ; Return;
   403                                  ;	void
   404                                  print_pallet:
   405                                    
   406 000002D8 4C8B05(E3090000)        	mov r8, [pallet_position] 
   407                                  	.write_pallet:
   408 000002DF 41C600B0                		mov byte [r8], char_comillas
   409                                  
   410                                  	 
   411 000002E3 C3                      	ret
   412                                  
   413                                  ; Function: move_pallet
   414                                  ; This function is in charge of moving the pallet in a given direction
   415                                  ; Arguments:
   416                                  ;	rdi: left direction or right direction
   417                                  ;
   418                                  ; Return:
   419                                  ;	void
   420                                  move_pallet:
   421                                  
   422 000002E4 50                      	push rax
   423 000002E5 51                      	push rcx
   424                                  
   425 000002E6 4C8B2D(230A0000)        	mov r13, [colj]
   426 000002ED 4983FD01                	cmp r13, 1
   427 000002F1 0F845B070000            	je .endp
   428                                  	  
   429 000002F7 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   430 000002FB 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   431                                  
   432 000002FD 4883FF03                	cmp rdi, down_direction
   433 00000301 0F8471020000            	je .move_down
   434                                  
   435 00000307 4883FF01                	cmp rdi, right_direction
   436 0000030B 0F8472060000            	je .move_right
   437                                  
   438 00000311 4883FFFF                	cmp rdi, left_direction
   439 00000315 0F84BD040000            	je .move_left
   440                                  
   441                                  	.move_up:
   442 0000031B 4C8B05(E3090000)        		mov r8, [pallet_position]
   443                                  
   444                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   445 00000322 4981F8[4C020000]        		cmp r8, board + 109 + ((column_cells + 2) * 4)
   446 00000329 0F8C23070000            		jl .endp
   447                                  
   448 0000032F 4981F8[61040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   449 00000336 0F8416070000            		je .endp 
   450 0000033C 4981F8[62040000]        		cmp r8, board + 83 + ((column_cells + 2) * 9)
   451 00000343 0F8409070000            		je .endp
   452 00000349 4981F8[63040000]        		cmp r8, board + 84 + ((column_cells + 2) * 9)
   453 00000350 0F84FC060000            		je .endp
   454 00000356 4981F8[64040000]        		cmp r8, board + 85 + ((column_cells + 2) * 9)
   455 0000035D 0F84EF060000            		je .endp
   456 00000363 4981F8[65040000]        		cmp r8, board + 86 + ((column_cells + 2) * 9)
   457 0000036A 0F84E2060000            		je .endp
   458 00000370 4981F8[66040000]        		cmp r8, board + 87 + ((column_cells + 2) * 9)
   459 00000377 0F84D5060000            		je .endp
   460 0000037D 4981F8[67040000]        		cmp r8, board + 88 + ((column_cells + 2) * 9)
   461 00000384 0F84C8060000            		je .endp
   462 0000038A 4981F8[68040000]        		cmp r8, board + 89 + ((column_cells + 2) * 9)
   463 00000391 0F84BB060000            		je .endp
   464 00000397 4981F8[69040000]        		cmp r8, board + 90 + ((column_cells + 2) * 9)
   465 0000039E 0F84AE060000            		je .endp
   466 000003A4 4981F8[6A040000]        		cmp r8, board + 91 + ((column_cells + 2) * 9)
   467 000003AB 0F84A1060000            		je .endp
   468 000003B1 4981F8[6B040000]        		cmp r8, board + 92 + ((column_cells + 2) * 9)
   469 000003B8 0F8494060000            		je .endp
   470 000003BE 4981F8[6C040000]        		cmp r8, board + 93 + ((column_cells + 2) * 9)
   471 000003C5 0F8487060000            		je .endp
   472 000003CB 4981F8[6D040000]        		cmp r8, board + 94 + ((column_cells + 2) * 9)
   473 000003D2 0F847A060000            		je .endp
   474 000003D8 4981F8[6E040000]        		cmp r8, board + 95 + ((column_cells + 2) * 9)
   475 000003DF 0F846D060000            		je .endp
   476 000003E5 4981F8[6F040000]        		cmp r8, board + 96 + ((column_cells + 2) * 9)
   477 000003EC 0F8460060000            		je .endp
   478 000003F2 4981F8[70040000]        		cmp r8, board + 97 + ((column_cells + 2) * 9)
   479 000003F9 0F8453060000            		je .endp
   480 000003FF 4981F8[71040000]        		cmp r8, board + 98 + ((column_cells + 2) * 9)
   481 00000406 0F8446060000            		je .endp
   482 0000040C 4981F8[72040000]        		cmp r8, board + 99 + ((column_cells + 2) * 9)
   483 00000413 0F8439060000            		je .endp
   484                                  
   485 00000419 4981F8[95060000]        		cmp r8, board + 86 + ((column_cells + 2) * 14)
   486 00000420 0F842C060000            		je .endp
   487 00000426 4981F8[96060000]        		cmp r8, board + 87 + ((column_cells + 2) * 14)
   488 0000042D 0F841F060000            		je .endp
   489 00000433 4981F8[97060000]        		cmp r8, board + 88 + ((column_cells + 2) * 14)
   490 0000043A 0F8412060000            		je .endp
   491 00000440 4981F8[98060000]        		cmp r8, board + 89 + ((column_cells + 2) * 14)
   492 00000447 0F8405060000            		je .endp
   493 0000044D 4981F8[99060000]        		cmp r8, board + 90 + ((column_cells + 2) * 14)
   494 00000454 0F84F8050000            		je .endp
   495 0000045A 4981F8[9A060000]        		cmp r8, board + 91 + ((column_cells + 2) * 14)
   496 00000461 0F84EB050000            		je .endp
   497 00000467 4981F8[9B060000]        		cmp r8, board + 92 + ((column_cells + 2) * 14)
   498 0000046E 0F84DE050000            		je .endp
   499 00000474 4981F8[9C060000]        		cmp r8, board + 93 + ((column_cells + 2) * 14)
   500 0000047B 0F84D1050000            		je .endp
   501 00000481 4981F8[9D060000]        		cmp r8, board + 94 + ((column_cells + 2) * 14)
   502 00000488 0F84C4050000            		je .endp
   503 0000048E 4981F8[9E060000]        		cmp r8, board + 95 + ((column_cells + 2) * 14)
   504 00000495 0F84B7050000            		je .endp
   505 0000049B 4981F8[9F060000]        		cmp r8, board + 96 + ((column_cells + 2) * 14)
   506 000004A2 0F84AA050000            		je .endp
   507 000004A8 4981F8[A0060000]        		cmp r8, board + 97 + ((column_cells + 2) * 14)
   508 000004AF 0F849D050000            		je .endp
   509 000004B5 4981F8[A1060000]        		cmp r8, board + 98 + ((column_cells + 2) * 14)
   510 000004BC 0F8490050000            		je .endp
   511 000004C2 4981F8[A2060000]        		cmp r8, board + 99 + ((column_cells + 2) * 14)
   512 000004C9 0F8483050000            		je .endp
   513 000004CF 4981F8[A3060000]        		cmp r8, board + 100 + ((column_cells + 2) * 14)
   514 000004D6 0F8476050000            		je .endp
   515 000004DC 4981F8[A4060000]        		cmp r8, board + 101 + ((column_cells + 2) * 14)
   516 000004E3 0F8469050000            		je .endp
   517 000004E9 4981F8[A5060000]        		cmp r8, board + 102 + ((column_cells + 2) * 14)
   518 000004F0 0F845C050000            		je .endp
   519 000004F6 4981F8[A6060000]        		cmp r8, board + 103 + ((column_cells + 2) * 14)
   520 000004FD 0F844F050000            		je .endp
   521 00000503 4981F8[A7060000]        		cmp r8, board + 104 + ((column_cells + 2) * 14)
   522 0000050A 0F8442050000            		je .endp
   523 00000510 4981F8[A8060000]        		cmp r8, board + 105 + ((column_cells + 2) * 14)
   524 00000517 0F8435050000            		je .endp
   525 0000051D 4981F8[A9060000]        		cmp r8, board + 106 + ((column_cells + 2) * 14)
   526 00000524 0F8428050000            		je .endp
   527 0000052A 4981F8[AA060000]        		cmp r8, board + 107 + ((column_cells + 2) * 14)
   528 00000531 0F841B050000            		je .endp
   529 00000537 4981F8[AB060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   530 0000053E 0F840E050000            		je .endp
   531                                  
   532 00000544 4981F8[08080000]        		cmp r8, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   533 0000054B 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   534                                  
   535 0000054D 4981F8[63080000]        		cmp r8, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   536 00000554 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   537                                  
   538                                  		; Aquí entra si 81 < r8 < 100
   539 00000556 EB1B                    		jmp .continuar    
   540                                  
   541                                  		.fuera_rango:
   542 00000558 4C8B0D(EB090000)        			mov r9, [pallet_size]
   543 0000055F 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   544 00000563 4983E870                			sub r8, 112						; Mover una fila arriba (restar 320)
   545 00000567 4C8905(E3090000)        			mov [pallet_position], r8			; Actualizar posición
   546                                  
   547 0000056E E9DF040000              		jmp .endp
   548                                  
   549                                  		.continuar:
   550 00000573 E9DA040000              			jmp .endp
   551                                  
   552                                  	.move_down:
   553                                  
   554 00000578 4C8B05(E3090000)        		mov r8, [pallet_position]
   555                                  
   556 0000057F 4981F8[D5040000]        		cmp r8, board + 86 + ((column_cells + 2) * 10)  
   557 00000586 0F84C6040000            		je .endp
   558 0000058C 4981F8[D6040000]        		cmp r8, board + 87 + ((column_cells + 2) * 10)  
   559 00000593 0F84B9040000            		je .endp
   560 00000599 4981F8[D7040000]        		cmp r8, board + 88 + ((column_cells + 2) * 10)  
   561 000005A0 0F84AC040000            		je .endp
   562 000005A6 4981F8[D8040000]        		cmp r8, board + 89 + ((column_cells + 2) * 10)  
   563 000005AD 0F849F040000            		je .endp
   564 000005B3 4981F8[D9040000]        		cmp r8, board + 90 + ((column_cells + 2) * 10)  
   565 000005BA 0F8492040000            		je .endp
   566 000005C0 4981F8[DA040000]        		cmp r8, board + 91 + ((column_cells + 2) * 10)  
   567 000005C7 0F8485040000            		je .endp
   568 000005CD 4981F8[DB040000]        		cmp r8, board + 92 + ((column_cells + 2) * 10)  
   569 000005D4 0F8478040000            		je .endp
   570 000005DA 4981F8[DC040000]        		cmp r8, board + 93 + ((column_cells + 2) * 10)  
   571 000005E1 0F846B040000            		je .endp
   572 000005E7 4981F8[DD040000]        		cmp r8, board + 94 + ((column_cells + 2) * 10)  
   573 000005EE 0F845E040000            		je .endp
   574 000005F4 4981F8[DE040000]        		cmp r8, board + 95 + ((column_cells + 2) * 10)  
   575 000005FB 0F8451040000            		je .endp
   576 00000601 4981F8[DF040000]        		cmp r8, board + 96 + ((column_cells + 2) * 10)  
   577 00000608 0F8444040000            		je .endp
   578 0000060E 4981F8[E0040000]        		cmp r8, board + 97 + ((column_cells + 2) * 10)  
   579 00000615 0F8437040000            		je .endp
   580 0000061B 4981F8[E1040000]        		cmp r8, board + 98 + ((column_cells + 2) * 10)  
   581 00000622 0F842A040000            		je .endp
   582 00000628 4981F8[E2040000]        		cmp r8, board + 99 + ((column_cells + 2) * 10)  
   583 0000062F 0F841D040000            		je .endp
   584 00000635 4981F8[E3040000]        		cmp r8, board + 100 + ((column_cells + 2) * 10)  
   585 0000063C 0F8410040000            		je .endp
   586 00000642 4981F8[E4040000]        		cmp r8, board + 101 + ((column_cells + 2) * 10)  
   587 00000649 0F8403040000            		je .endp
   588 0000064F 4981F8[E5040000]        		cmp r8, board + 102 + ((column_cells + 2) * 10)  
   589 00000656 0F84F6030000            		je .endp
   590 0000065C 4981F8[E6040000]        		cmp r8, board + 103 + ((column_cells + 2) * 10)  
   591 00000663 0F84E9030000            		je .endp
   592 00000669 4981F8[E7040000]        		cmp r8, board + 104 + ((column_cells + 2) * 10)  
   593 00000670 0F84DC030000            		je .endp
   594 00000676 4981F8[E8040000]        		cmp r8, board + 105 + ((column_cells + 2) * 10)  
   595 0000067D 0F84CF030000            		je .endp
   596 00000683 4981F8[E9040000]        		cmp r8, board + 106 + ((column_cells + 2) * 10)  
   597 0000068A 0F84C2030000            		je .endp
   598 00000690 4981F8[EA040000]        		cmp r8, board + 107 + ((column_cells + 2) * 10)  
   599 00000697 0F84B5030000            		je .endp
   600 0000069D 4981F8[EB040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)  
   601 000006A4 0F84A8030000            		je .endp
   602                                  
   603 000006AA 4981F8[01070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   604 000006B1 0F849B030000            		je .endp
   605 000006B7 4981F8[02070000]        		cmp r8, board + 83 + ((column_cells + 2) * 15)
   606 000006BE 0F848E030000            		je .endp
   607 000006C4 4981F8[03070000]        		cmp r8, board + 84 + ((column_cells + 2) * 15)
   608 000006CB 0F8481030000            		je .endp
   609 000006D1 4981F8[04070000]        		cmp r8, board + 85 + ((column_cells + 2) * 15)
   610 000006D8 0F8474030000            		je .endp
   611 000006DE 4981F8[05070000]        		cmp r8, board + 86 + ((column_cells + 2) * 15)
   612 000006E5 0F8467030000            		je .endp
   613 000006EB 4981F8[06070000]        		cmp r8, board + 87 + ((column_cells + 2) * 15)
   614 000006F2 0F845A030000            		je .endp
   615 000006F8 4981F8[07070000]        		cmp r8, board + 88 + ((column_cells + 2) * 15)
   616 000006FF 0F844D030000            		je .endp
   617 00000705 4981F8[08070000]        		cmp r8, board + 89 + ((column_cells + 2) * 15)
   618 0000070C 0F8440030000            		je .endp
   619 00000712 4981F8[09070000]        		cmp r8, board + 90 + ((column_cells + 2) * 15)
   620 00000719 0F8433030000            		je .endp
   621 0000071F 4981F8[0A070000]        		cmp r8, board + 91 + ((column_cells + 2) * 15)
   622 00000726 0F8426030000            		je .endp
   623 0000072C 4981F8[0B070000]        		cmp r8, board + 92 + ((column_cells + 2) * 15)
   624 00000733 0F8419030000            		je .endp
   625 00000739 4981F8[0C070000]        		cmp r8, board + 93 + ((column_cells + 2) * 15)
   626 00000740 0F840C030000            		je .endp
   627 00000746 4981F8[0D070000]        		cmp r8, board + 94 + ((column_cells + 2) * 15)
   628 0000074D 0F84FF020000            		je .endp
   629 00000753 4981F8[0E070000]        		cmp r8, board + 95 + ((column_cells + 2) * 15)
   630 0000075A 0F84F2020000            		je .endp
   631 00000760 4981F8[0F070000]        		cmp r8, board + 96 + ((column_cells + 2) * 15)
   632 00000767 0F84E5020000            		je .endp
   633 0000076D 4981F8[10070000]        		cmp r8, board + 97 + ((column_cells + 2) * 15)
   634 00000774 0F84D8020000            		je .endp
   635 0000077A 4981F8[11070000]        		cmp r8, board + 98 + ((column_cells + 2) * 15)
   636 00000781 0F84CB020000            		je .endp
   637 00000787 4981F8[12070000]        		cmp r8, board + 99 + ((column_cells + 2) * 15)
   638 0000078E 0F84BE020000            		je .endp
   639                                  		
   640 00000794 4981F8[DF080000]        		cmp r8, board + ((column_cells + 2) * 20)
   641 0000079B 0F8FB1020000            		jg .endp
   642                                  
   643                                  
   644 000007A1 4981F8[C8020000]        		cmp r8, board + 9 + ((column_cells + 2) * 6)  
   645 000007A8 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
   646                                  
   647 000007AA 4981F8[23030000]        		cmp r8, board + 100 + ((column_cells + 2) * 6) 
   648 000007B1 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
   649                                  
   650                                  		
   651                                  
   652                                  		; Aquí entra si 81 < r8 < 100
   653 000007B3 E9BBFDFFFF              		jmp .continuar    
   654                                  
   655                                  		.fuera_rango_down:
   656 000007B8 4C8B0D(EB090000)        			mov r9, [pallet_size]
   657 000007BF 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   658 000007C3 4983C070                			add r8, 112							; Mover una fila abajo (sumar 320)
   659 000007C7 4C8905(E3090000)        			mov [pallet_position], r8			; Actualizar posición
   660                                  
   661                                  
   662 000007CE E97F020000              		jmp .endp	
   663                                  
   664                                  		.continuar_down:
   665 000007D3 E97A020000              			jmp .endp
   666                                  
   667                                  
   668                                  
   669                                  		
   670                                  		
   671                                  
   672                                  	.move_left:
   673                                  
   674 000007D8 4C8B2D(230A0000)        		mov r13, [colj]
   675 000007DF 4983FD01                		cmp r13, 1
   676 000007E3 0F8469020000            		je .endp
   677                                  
   678 000007E9 4C8B05(E3090000)        		mov r8, [pallet_position]
   679                                  
   680                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   681 000007F0 4981F8[E0010000]        		cmp r8, board + 1 + ((column_cells + 2) * 4)
   682 000007F7 0F8455020000            		je .endp 
   683                                  
   684 000007FD 4981F8[50020000]        		cmp r8, board + 1 + ((column_cells + 2) * 5)
   685 00000804 0F8448020000            		je .endp 
   686                                  
   687 0000080A 4981F8[C0020000]        		cmp r8, board + 1 + ((column_cells + 2) * 6)
   688 00000811 0F843B020000            		je .endp 
   689                                  
   690 00000817 4981F8[30030000]        		cmp r8, board + 1 + ((column_cells + 2) * 7)
   691 0000081E 0F842E020000            		je .endp 
   692                                  
   693 00000824 4981F8[A0030000]        		cmp r8, board + 1 + ((column_cells + 2) * 8)
   694 0000082B 0F8421020000            		je .endp 
   695                                  
   696 00000831 4981F8[10040000]        		cmp r8, board + 1 + ((column_cells + 2) * 9)
   697 00000838 0F8414020000            		je .endp 
   698                                  	
   699 0000083E 4981F8[80040000]        		cmp r8, board + 1 + ((column_cells + 2) * 10)
   700 00000845 0F8407020000            		je .endp 
   701                                  
   702 0000084B 4981F8[F0040000]        		cmp r8, board + 1 + ((column_cells + 2) * 11)
   703 00000852 0F84FA010000            		je .endp 
   704                                  
   705 00000858 4981F8[60050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   706 0000085F 0F84ED010000            		je .endp 
   707                                  
   708 00000865 4981F8[60050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   709 0000086C 0F84E0010000            		je .endp 
   710                                  
   711 00000872 4981F8[D0050000]        		cmp r8, board + 1 + ((column_cells + 2) * 13)
   712 00000879 0F84D3010000            		je .endp 
   713                                  
   714 0000087F 4981F8[40060000]        		cmp r8, board + 1 + ((column_cells + 2) * 14)
   715 00000886 0F84C6010000            		je .endp 
   716                                  
   717 0000088C 4981F8[B0060000]        		cmp r8, board + 1 + ((column_cells + 2) * 15)
   718 00000893 0F84B9010000            		je .endp 
   719                                  
   720 00000899 4981F8[20070000]        		cmp r8, board + 1 + ((column_cells + 2) * 16)
   721 000008A0 0F84AC010000            		je .endp 
   722                                  
   723 000008A6 4981F8[90070000]        		cmp r8, board + 1 + ((column_cells + 2) * 17)
   724 000008AD 0F849F010000            		je .endp 
   725                                  
   726 000008B3 4981F8[00080000]        		cmp r8, board + 1 + ((column_cells + 2) * 18)
   727 000008BA 0F8492010000            		je .endp 
   728                                  
   729 000008C0 4981F8[70080000]        		cmp r8, board + 1 + ((column_cells + 2) * 19)
   730 000008C7 0F8485010000            		je .endp
   731                                  
   732 000008CD 4981F8[E0080000]        		cmp r8, board + 1 + ((column_cells + 2) * 20)
   733 000008D4 0F8478010000            		je .endp
   734                                  
   735 000008DA 4981F8[93030000]        		cmp r8, board + 100 + ((column_cells + 2) * 7)
   736 000008E1 0F846B010000            		je .endp
   737                                  
   738 000008E7 4981F8[03040000]        		cmp r8, board + 100 + ((column_cells + 2) * 8)
   739 000008EE 0F845E010000            		je .endp
   740                                  
   741 000008F4 4981F8[61040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   742 000008FB 0F8451010000            		je .endp
   743                                  
   744                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
   745 00000901 4981F8[D1040000]        		cmp r8, board + 82 + ((column_cells + 2) * 10)
   746 00000908 0F8444010000            		je .endp
   747                                  
   748 0000090E 4981F8[41050000]        		cmp r8, board + 82 + ((column_cells + 2) * 11)
   749 00000915 0F8437010000            		je .endp
   750                                  
   751 0000091B 4981F8[B1050000]        		cmp r8, board + 82 + ((column_cells + 2) * 12)
   752 00000922 0F842A010000            		je .endp
   753                                  
   754 00000928 4981F8[21060000]        		cmp r8, board + 82 + ((column_cells + 2) * 13)
   755 0000092F 0F841D010000            		je .endp
   756                                  
   757 00000935 4981F8[91060000]        		cmp r8, board + 82 + ((column_cells + 2) * 14)
   758 0000093C 0F8410010000            		je .endp
   759                                  
   760 00000942 4981F8[01070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   761 00000949 0F8403010000            		je .endp
   762                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
   763                                  
   764 0000094F 4981F8[83070000]        		cmp r8, board + 100 + ((column_cells + 2) * 16)
   765 00000956 0F84F6000000            		je .endp
   766                                  
   767 0000095C 4981F8[F3070000]        		cmp r8, board + 100 + ((column_cells + 2) * 17)
   768 00000963 0F84E9000000            		je .endp
   769                                  
   770 00000969 4C8B0D(EB090000)        		mov r9, [pallet_size]
   771 00000970 41C60020                		mov byte [r8], char_space	; Limpiar el último carácter del palet
   772 00000974 49FFC8                  		dec r8								; Mover la posición del palet una unidad a la izquierda
   773 00000977 4C8905(E3090000)        		mov [pallet_position], r8			; Actualizar la posición del palet en la memoria
   774                                  
   775 0000097E E9CF000000              		jmp .endp	
   776                                  							 
   777                                  	.move_right:
   778                                  
   779 00000983 4C8B2D(230A0000)        		mov r13, [colj]
   780 0000098A 4983FD02                		cmp r13, 2
   781 0000098E 0F84BE000000            		je .endp
   782                                  
   783 00000994 4C8B05(E3090000)        		mov r8, [pallet_position]
   784                                  
   785                                  		
   786 0000099B 4981F8[4B020000]        		cmp r8, board + 108 + ((column_cells + 2) * 4)
   787 000009A2 0F84AA000000            		je .endp
   788                                  
   789 000009A8 4981F8[BB020000]        		cmp r8, board + 108 + ((column_cells + 2) * 5)
   790 000009AF 0F849D000000            		je .endp
   791                                  
   792 000009B5 4981F8[2B030000]        		cmp r8, board + 108 + ((column_cells + 2) * 6)
   793 000009BC 0F8490000000            		je .endp
   794                                  
   795 000009C2 4981F8[9B030000]        		cmp r8, board + 108 + ((column_cells + 2) * 7)
   796 000009C9 0F8483000000            		je .endp
   797                                  
   798 000009CF 4981F8[0B040000]        		cmp r8, board + 108 + ((column_cells + 2) * 8)
   799 000009D6 747A                    		je .endp
   800                                  
   801 000009D8 4981F8[7B040000]        		cmp r8, board + 108 + ((column_cells + 2) * 9)
   802 000009DF 7471                    		je .endp
   803                                  
   804 000009E1 4981F8[EB040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)
   805 000009E8 7468                    		je .endp
   806                                  
   807 000009EA 4981F8[44050000]        		cmp r8, board + 85 + ((column_cells + 2) * 11)
   808 000009F1 745F                    		je .endp
   809                                  
   810 000009F3 4981F8[B4050000]        		cmp r8, board + 85 + ((column_cells + 2) * 12)
   811 000009FA 7456                    		je .endp
   812                                  
   813 000009FC 4981F8[24060000]        		cmp r8, board + 85 + ((column_cells + 2) * 13)
   814 00000A03 744D                    		je .endp
   815                                  
   816 00000A05 4981F8[AB060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   817 00000A0C 7444                    		je .endp
   818                                  
   819 00000A0E 4981F8[1B070000]        		cmp r8, board + 108 + ((column_cells + 2) * 15)
   820 00000A15 743B                    		je .endp
   821                                  
   822 00000A17 4981F8[8B070000]        		cmp r8, board + 108 + ((column_cells + 2) * 16)
   823 00000A1E 7432                    		je .endp
   824                                  
   825 00000A20 4981F8[FB070000]        		cmp r8, board + 108 + ((column_cells + 2) * 17)
   826 00000A27 7429                    		je .endp
   827                                  
   828 00000A29 4981F8[6B080000]        		cmp r8, board + 108 + ((column_cells + 2) * 18)
   829 00000A30 7420                    		je .endp
   830                                  
   831 00000A32 4981F8[DB080000]        		cmp r8, board + 108 + ((column_cells + 2) * 19)
   832 00000A39 7417                    		je .endp
   833                                  
   834 00000A3B 4981F8[4B090000]        		cmp r8, board + 108 + ((column_cells + 2) * 20)
   835 00000A42 740E                    		je .endp
   836                                  
   837 00000A44 41C60020                		mov byte [r8], char_space
   838 00000A48 49FFC0                  		inc r8
   839 00000A4B 4C8905(E3090000)        		mov [pallet_position], r8
   840                                   
   841                                  
   842                                  
   843                                  	.endp:
   844 00000A52 48C705(230A0000)00-     		mov qword [colj], 0
   844 00000A5A 000000             
   845                                  
   846 00000A5D 58                      	pop rax
   847 00000A5E 59                      	pop rcx
   848                                  	 
   849 00000A5F C3                      	ret
   850                                  
   851                                  ; Funcion print_bot
   852                                  ; Esta funcion imprime los bots en la pista
   853                                  print_bot:
   854                                  	; Obtener la posición actual del bot
   855 00000A60 4C8B0D(F3090000)            mov r9, [bot_position]      ; Cargar la dirección de la posición del bot
   856                                      .write_pallet:
   857 00000A67 41C60162                		mov byte [r9], char_bot
   858 00000A6B C3                      	ret
   859                                  
   860                                  ; Función: move_bot
   861                                  ; Mueve el bot en la dirección definida
   862                                  ; Return:
   863                                  ;   void
   864                                  move_bot:
   865                                  
   866 00000A6C 50                      	push rax
   867 00000A6D 51                      	push rcx
   868                                  
   869 00000A6E 4C8B2D(230A0000)        	mov r13, [colj]              ; Cargar el valor de la variable `colj` en r13
   870 00000A75 4983FD01                	cmp r13, 1                   ; Comparar el valor de `colj` con 1
   871 00000A79 0F845B070000            	je .endp                     ; Si `colj` es igual a 1, saltar al final de la función
   872                                  
   873                                      ; Comparar la dirección de movimiento y saltar a la rutina correspondiente
   874 00000A7F 4883FF02                    cmp rdi, up_direction        ; Comparar rdi con la dirección "arriba"
   875 00000A83 741E                        je .move_up                  ; Si es igual, saltar a la rutina para mover hacia arriba
   876                                  
   877 00000A85 4883FF03                	cmp rdi, down_direction
   878 00000A89 0F8471020000            	je .move_down
   879                                  
   880 00000A8F 4883FF01                	cmp rdi, right_direction
   881 00000A93 0F8472060000            	je .move_right
   882                                  
   883 00000A99 4883FFFF                	cmp rdi, left_direction
   884 00000A9D 0F84BD040000            	je .move_left
   885                                  
   886                                  	.move_up:
   887 00000AA3 4C8B0D(F3090000)        		mov r9, [bot_position]
   888                                  
   889                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   890 00000AAA 4981F9[4C020000]        		cmp r9, board + 109 + ((column_cells + 2) * 4)
   891 00000AB1 0F8C23070000            		jl .endp
   892                                  
   893 00000AB7 4981F9[61040000]        		cmp r9, board + 82 + ((column_cells + 2) * 9)
   894 00000ABE 0F8416070000            		je .endp 
   895 00000AC4 4981F9[62040000]        		cmp r9, board + 83 + ((column_cells + 2) * 9)
   896 00000ACB 0F8409070000            		je .endp
   897 00000AD1 4981F9[63040000]        		cmp r9, board + 84 + ((column_cells + 2) * 9)
   898 00000AD8 0F84FC060000            		je .endp
   899 00000ADE 4981F9[64040000]        		cmp r9, board + 85 + ((column_cells + 2) * 9)
   900 00000AE5 0F84EF060000            		je .endp
   901 00000AEB 4981F9[65040000]        		cmp r9, board + 86 + ((column_cells + 2) * 9)
   902 00000AF2 0F84E2060000            		je .endp
   903 00000AF8 4981F9[66040000]        		cmp r9, board + 87 + ((column_cells + 2) * 9)
   904 00000AFF 0F84D5060000            		je .endp
   905 00000B05 4981F9[67040000]        		cmp r9, board + 88 + ((column_cells + 2) * 9)
   906 00000B0C 0F84C8060000            		je .endp
   907 00000B12 4981F9[68040000]        		cmp r9, board + 89 + ((column_cells + 2) * 9)
   908 00000B19 0F84BB060000            		je .endp
   909 00000B1F 4981F9[69040000]        		cmp r9, board + 90 + ((column_cells + 2) * 9)
   910 00000B26 0F84AE060000            		je .endp
   911 00000B2C 4981F9[6A040000]        		cmp r9, board + 91 + ((column_cells + 2) * 9)
   912 00000B33 0F84A1060000            		je .endp
   913 00000B39 4981F9[6B040000]        		cmp r9, board + 92 + ((column_cells + 2) * 9)
   914 00000B40 0F8494060000            		je .endp
   915 00000B46 4981F9[6C040000]        		cmp r9, board + 93 + ((column_cells + 2) * 9)
   916 00000B4D 0F8487060000            		je .endp
   917 00000B53 4981F9[6D040000]        		cmp r9, board + 94 + ((column_cells + 2) * 9)
   918 00000B5A 0F847A060000            		je .endp
   919 00000B60 4981F9[6E040000]        		cmp r9, board + 95 + ((column_cells + 2) * 9)
   920 00000B67 0F846D060000            		je .endp
   921 00000B6D 4981F9[6F040000]        		cmp r9, board + 96 + ((column_cells + 2) * 9)
   922 00000B74 0F8460060000            		je .endp
   923 00000B7A 4981F9[70040000]        		cmp r9, board + 97 + ((column_cells + 2) * 9)
   924 00000B81 0F8453060000            		je .endp
   925 00000B87 4981F9[71040000]        		cmp r9, board + 98 + ((column_cells + 2) * 9)
   926 00000B8E 0F8446060000            		je .endp
   927 00000B94 4981F9[72040000]        		cmp r9, board + 99 + ((column_cells + 2) * 9)
   928 00000B9B 0F8439060000            		je .endp
   929                                  
   930 00000BA1 4981F9[95060000]        		cmp r9, board + 86 + ((column_cells + 2) * 14)
   931 00000BA8 0F842C060000            		je .endp
   932 00000BAE 4981F9[96060000]        		cmp r9, board + 87 + ((column_cells + 2) * 14)
   933 00000BB5 0F841F060000            		je .endp
   934 00000BBB 4981F9[97060000]        		cmp r9, board + 88 + ((column_cells + 2) * 14)
   935 00000BC2 0F8412060000            		je .endp
   936 00000BC8 4981F9[98060000]        		cmp r9, board + 89 + ((column_cells + 2) * 14)
   937 00000BCF 0F8405060000            		je .endp
   938 00000BD5 4981F9[99060000]        		cmp r9, board + 90 + ((column_cells + 2) * 14)
   939 00000BDC 0F84F8050000            		je .endp
   940 00000BE2 4981F9[9A060000]        		cmp r9, board + 91 + ((column_cells + 2) * 14)
   941 00000BE9 0F84EB050000            		je .endp
   942 00000BEF 4981F9[9B060000]        		cmp r9, board + 92 + ((column_cells + 2) * 14)
   943 00000BF6 0F84DE050000            		je .endp
   944 00000BFC 4981F9[9C060000]        		cmp r9, board + 93 + ((column_cells + 2) * 14)
   945 00000C03 0F84D1050000            		je .endp
   946 00000C09 4981F9[9D060000]        		cmp r9, board + 94 + ((column_cells + 2) * 14)
   947 00000C10 0F84C4050000            		je .endp
   948 00000C16 4981F9[9E060000]        		cmp r9, board + 95 + ((column_cells + 2) * 14)
   949 00000C1D 0F84B7050000            		je .endp
   950 00000C23 4981F9[9F060000]        		cmp r9, board + 96 + ((column_cells + 2) * 14)
   951 00000C2A 0F84AA050000            		je .endp
   952 00000C30 4981F9[A0060000]        		cmp r9, board + 97 + ((column_cells + 2) * 14)
   953 00000C37 0F849D050000            		je .endp
   954 00000C3D 4981F9[A1060000]        		cmp r9, board + 98 + ((column_cells + 2) * 14)
   955 00000C44 0F8490050000            		je .endp
   956 00000C4A 4981F9[A2060000]        		cmp r9, board + 99 + ((column_cells + 2) * 14)
   957 00000C51 0F8483050000            		je .endp
   958 00000C57 4981F9[A3060000]        		cmp r9, board + 100 + ((column_cells + 2) * 14)
   959 00000C5E 0F8476050000            		je .endp
   960 00000C64 4981F9[A4060000]        		cmp r9, board + 101 + ((column_cells + 2) * 14)
   961 00000C6B 0F8469050000            		je .endp
   962 00000C71 4981F9[A5060000]        		cmp r9, board + 102 + ((column_cells + 2) * 14)
   963 00000C78 0F845C050000            		je .endp
   964 00000C7E 4981F9[A6060000]        		cmp r9, board + 103 + ((column_cells + 2) * 14)
   965 00000C85 0F844F050000            		je .endp
   966 00000C8B 4981F9[A7060000]        		cmp r9, board + 104 + ((column_cells + 2) * 14)
   967 00000C92 0F8442050000            		je .endp
   968 00000C98 4981F9[A8060000]        		cmp r9, board + 105 + ((column_cells + 2) * 14)
   969 00000C9F 0F8435050000            		je .endp
   970 00000CA5 4981F9[A9060000]        		cmp r9, board + 106 + ((column_cells + 2) * 14)
   971 00000CAC 0F8428050000            		je .endp
   972 00000CB2 4981F9[AA060000]        		cmp r9, board + 107 + ((column_cells + 2) * 14)
   973 00000CB9 0F841B050000            		je .endp
   974 00000CBF 4981F9[AB060000]        		cmp r9, board + 108 + ((column_cells + 2) * 14)
   975 00000CC6 0F840E050000            		je .endp
   976                                  
   977 00000CCC 4981F9[08080000]        		cmp r9, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   978 00000CD3 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   979                                  
   980 00000CD5 4981F9[63080000]        		cmp r9, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   981 00000CDC 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   982                                  
   983                                  		; Aquí entra si 81 < r9 < 100
   984 00000CDE EB1B                    		jmp .continuar    
   985                                  
   986                                  		.fuera_rango:
   987 00000CE0 4C8B0D(EB090000)        			mov r9, [pallet_size]
   988 00000CE7 41C60120                			mov byte [r9], char_space	; Limpiar último carácter del palet
   989 00000CEB 4983E970                			sub r9, 112						; Mover una fila arriba (restar 320)
   990 00000CEF 4C890D(F3090000)        			mov [bot_position], r9			; Actualizar posición
   991                                  
   992 00000CF6 E9DF040000              		jmp .endp
   993                                  
   994                                  		.continuar:
   995 00000CFB E9DA040000              			jmp .endp
   996                                  
   997                                  	.move_down:
   998                                  
   999 00000D00 4C8B0D(F3090000)        		mov r9, [bot_position]
  1000                                  
  1001 00000D07 4981F9[D5040000]        		cmp r9, board + 86 + ((column_cells + 2) * 10)  
  1002 00000D0E 0F84C6040000            		je .endp
  1003 00000D14 4981F9[D6040000]        		cmp r9, board + 87 + ((column_cells + 2) * 10)  
  1004 00000D1B 0F84B9040000            		je .endp
  1005 00000D21 4981F9[D7040000]        		cmp r9, board + 88 + ((column_cells + 2) * 10)  
  1006 00000D28 0F84AC040000            		je .endp
  1007 00000D2E 4981F9[D8040000]        		cmp r9, board + 89 + ((column_cells + 2) * 10)  
  1008 00000D35 0F849F040000            		je .endp
  1009 00000D3B 4981F9[D9040000]        		cmp r9, board + 90 + ((column_cells + 2) * 10)  
  1010 00000D42 0F8492040000            		je .endp
  1011 00000D48 4981F9[DA040000]        		cmp r9, board + 91 + ((column_cells + 2) * 10)  
  1012 00000D4F 0F8485040000            		je .endp
  1013 00000D55 4981F9[DB040000]        		cmp r9, board + 92 + ((column_cells + 2) * 10)  
  1014 00000D5C 0F8478040000            		je .endp
  1015 00000D62 4981F9[DC040000]        		cmp r9, board + 93 + ((column_cells + 2) * 10)  
  1016 00000D69 0F846B040000            		je .endp
  1017 00000D6F 4981F9[DD040000]        		cmp r9, board + 94 + ((column_cells + 2) * 10)  
  1018 00000D76 0F845E040000            		je .endp
  1019 00000D7C 4981F9[DE040000]        		cmp r9, board + 95 + ((column_cells + 2) * 10)  
  1020 00000D83 0F8451040000            		je .endp
  1021 00000D89 4981F9[DF040000]        		cmp r9, board + 96 + ((column_cells + 2) * 10)  
  1022 00000D90 0F8444040000            		je .endp
  1023 00000D96 4981F9[E0040000]        		cmp r9, board + 97 + ((column_cells + 2) * 10)  
  1024 00000D9D 0F8437040000            		je .endp
  1025 00000DA3 4981F9[E1040000]        		cmp r9, board + 98 + ((column_cells + 2) * 10)  
  1026 00000DAA 0F842A040000            		je .endp
  1027 00000DB0 4981F9[E2040000]        		cmp r9, board + 99 + ((column_cells + 2) * 10)  
  1028 00000DB7 0F841D040000            		je .endp
  1029 00000DBD 4981F9[E3040000]        		cmp r9, board + 100 + ((column_cells + 2) * 10)  
  1030 00000DC4 0F8410040000            		je .endp
  1031 00000DCA 4981F9[E4040000]        		cmp r9, board + 101 + ((column_cells + 2) * 10)  
  1032 00000DD1 0F8403040000            		je .endp
  1033 00000DD7 4981F9[E5040000]        		cmp r9, board + 102 + ((column_cells + 2) * 10)  
  1034 00000DDE 0F84F6030000            		je .endp
  1035 00000DE4 4981F9[E6040000]        		cmp r9, board + 103 + ((column_cells + 2) * 10)  
  1036 00000DEB 0F84E9030000            		je .endp
  1037 00000DF1 4981F9[E7040000]        		cmp r9, board + 104 + ((column_cells + 2) * 10)  
  1038 00000DF8 0F84DC030000            		je .endp
  1039 00000DFE 4981F9[E8040000]        		cmp r9, board + 105 + ((column_cells + 2) * 10)  
  1040 00000E05 0F84CF030000            		je .endp
  1041 00000E0B 4981F9[E9040000]        		cmp r9, board + 106 + ((column_cells + 2) * 10)  
  1042 00000E12 0F84C2030000            		je .endp
  1043 00000E18 4981F9[EA040000]        		cmp r9, board + 107 + ((column_cells + 2) * 10)  
  1044 00000E1F 0F84B5030000            		je .endp
  1045 00000E25 4981F9[EB040000]        		cmp r9, board + 108 + ((column_cells + 2) * 10)  
  1046 00000E2C 0F84A8030000            		je .endp
  1047                                  
  1048 00000E32 4981F9[01070000]        		cmp r9, board + 82 + ((column_cells + 2) * 15)
  1049 00000E39 0F849B030000            		je .endp
  1050 00000E3F 4981F9[02070000]        		cmp r9, board + 83 + ((column_cells + 2) * 15)
  1051 00000E46 0F848E030000            		je .endp
  1052 00000E4C 4981F9[03070000]        		cmp r9, board + 84 + ((column_cells + 2) * 15)
  1053 00000E53 0F8481030000            		je .endp
  1054 00000E59 4981F9[04070000]        		cmp r9, board + 85 + ((column_cells + 2) * 15)
  1055 00000E60 0F8474030000            		je .endp
  1056 00000E66 4981F9[05070000]        		cmp r9, board + 86 + ((column_cells + 2) * 15)
  1057 00000E6D 0F8467030000            		je .endp
  1058 00000E73 4981F9[06070000]        		cmp r9, board + 87 + ((column_cells + 2) * 15)
  1059 00000E7A 0F845A030000            		je .endp
  1060 00000E80 4981F9[07070000]        		cmp r9, board + 88 + ((column_cells + 2) * 15)
  1061 00000E87 0F844D030000            		je .endp
  1062 00000E8D 4981F9[08070000]        		cmp r9, board + 89 + ((column_cells + 2) * 15)
  1063 00000E94 0F8440030000            		je .endp
  1064 00000E9A 4981F9[09070000]        		cmp r9, board + 90 + ((column_cells + 2) * 15)
  1065 00000EA1 0F8433030000            		je .endp
  1066 00000EA7 4981F9[0A070000]        		cmp r9, board + 91 + ((column_cells + 2) * 15)
  1067 00000EAE 0F8426030000            		je .endp
  1068 00000EB4 4981F9[0B070000]        		cmp r9, board + 92 + ((column_cells + 2) * 15)
  1069 00000EBB 0F8419030000            		je .endp
  1070 00000EC1 4981F9[0C070000]        		cmp r9, board + 93 + ((column_cells + 2) * 15)
  1071 00000EC8 0F840C030000            		je .endp
  1072 00000ECE 4981F9[0D070000]        		cmp r9, board + 94 + ((column_cells + 2) * 15)
  1073 00000ED5 0F84FF020000            		je .endp
  1074 00000EDB 4981F9[0E070000]        		cmp r9, board + 95 + ((column_cells + 2) * 15)
  1075 00000EE2 0F84F2020000            		je .endp
  1076 00000EE8 4981F9[0F070000]        		cmp r9, board + 96 + ((column_cells + 2) * 15)
  1077 00000EEF 0F84E5020000            		je .endp
  1078 00000EF5 4981F9[10070000]        		cmp r9, board + 97 + ((column_cells + 2) * 15)
  1079 00000EFC 0F84D8020000            		je .endp
  1080 00000F02 4981F9[11070000]        		cmp r9, board + 98 + ((column_cells + 2) * 15)
  1081 00000F09 0F84CB020000            		je .endp
  1082 00000F0F 4981F9[12070000]        		cmp r9, board + 99 + ((column_cells + 2) * 15)
  1083 00000F16 0F84BE020000            		je .endp
  1084                                  		
  1085 00000F1C 4981F9[DF080000]        		cmp r9, board + ((column_cells + 2) * 20)
  1086 00000F23 0F8FB1020000            		jg .endp
  1087                                  
  1088                                  
  1089 00000F29 4981F9[C8020000]        		cmp r9, board + 9 + ((column_cells + 2) * 6)  
  1090 00000F30 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
  1091                                  
  1092 00000F32 4981F9[23030000]        		cmp r9, board + 100 + ((column_cells + 2) * 6) 
  1093 00000F39 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
  1094                                  
  1095                                  		
  1096                                  
  1097                                  		; Aquí entra si 81 < r9 < 100
  1098 00000F3B E9BBFDFFFF              		jmp .continuar    
  1099                                  
  1100                                  		.fuera_rango_down:
  1101 00000F40 4C8B0D(EB090000)        			mov r9, [pallet_size]
  1102 00000F47 41C60120                			mov byte [r9], char_space	; Limpiar último carácter del palet
  1103 00000F4B 4983C170                			add r9, 112							; Mover una fila abajo (sumar 320)
  1104 00000F4F 4C890D(F3090000)        			mov [bot_position], r9			; Actualizar posición
  1105                                  
  1106                                  
  1107 00000F56 E97F020000              		jmp .endp	
  1108                                  
  1109                                  		.continuar_down:
  1110 00000F5B E97A020000              			jmp .endp
  1111                                  
  1112                                  
  1113                                  	.move_left:
  1114                                  
  1115 00000F60 4C8B2D(230A0000)        		mov r13, [colj]
  1116 00000F67 4983FD01                		cmp r13, 1
  1117 00000F6B 0F8469020000            		je .endp
  1118                                  
  1119 00000F71 4C8B0D(F3090000)        		mov r9, [bot_position]
  1120                                  
  1121                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1122 00000F78 4981F9[E0010000]        		cmp r9, board + 1 + ((column_cells + 2) * 4)
  1123 00000F7F 0F8455020000            		je .endp 
  1124 00000F85 4981F9[50020000]        		cmp r9, board + 1 + ((column_cells + 2) * 5)
  1125 00000F8C 0F8448020000            		je .endp 
  1126                                  
  1127 00000F92 4981F9[C0020000]        		cmp r9, board + 1 + ((column_cells + 2) * 6)
  1128 00000F99 0F843B020000            		je .endp 
  1129                                  
  1130 00000F9F 4981F9[30030000]        		cmp r9, board + 1 + ((column_cells + 2) * 7)
  1131 00000FA6 0F842E020000            		je .endp 
  1132                                  
  1133 00000FAC 4981F9[A0030000]        		cmp r9, board + 1 + ((column_cells + 2) * 8)
  1134 00000FB3 0F8421020000            		je .endp 
  1135                                  
  1136 00000FB9 4981F9[10040000]        		cmp r9, board + 1 + ((column_cells + 2) * 9)
  1137 00000FC0 0F8414020000            		je .endp 
  1138                                  	
  1139 00000FC6 4981F9[80040000]        		cmp r9, board + 1 + ((column_cells + 2) * 10)
  1140 00000FCD 0F8407020000            		je .endp 
  1141                                  
  1142 00000FD3 4981F9[F0040000]        		cmp r9, board + 1 + ((column_cells + 2) * 11)
  1143 00000FDA 0F84FA010000            		je .endp 
  1144                                  
  1145 00000FE0 4981F9[60050000]        		cmp r9, board + 1 + ((column_cells + 2) * 12)
  1146 00000FE7 0F84ED010000            		je .endp 
  1147                                  
  1148 00000FED 4981F9[60050000]        		cmp r9, board + 1 + ((column_cells + 2) * 12)
  1149 00000FF4 0F84E0010000            		je .endp 
  1150                                  
  1151 00000FFA 4981F9[D0050000]        		cmp r9, board + 1 + ((column_cells + 2) * 13)
  1152 00001001 0F84D3010000            		je .endp 
  1153                                  
  1154 00001007 4981F9[40060000]        		cmp r9, board + 1 + ((column_cells + 2) * 14)
  1155 0000100E 0F84C6010000            		je .endp 
  1156                                  
  1157 00001014 4981F9[B0060000]        		cmp r9, board + 1 + ((column_cells + 2) * 15)
  1158 0000101B 0F84B9010000            		je .endp 
  1159                                  
  1160 00001021 4981F9[20070000]        		cmp r9, board + 1 + ((column_cells + 2) * 16)
  1161 00001028 0F84AC010000            		je .endp 
  1162                                  
  1163 0000102E 4981F9[90070000]        		cmp r9, board + 1 + ((column_cells + 2) * 17)
  1164 00001035 0F849F010000            		je .endp 
  1165                                  
  1166 0000103B 4981F9[00080000]        		cmp r9, board + 1 + ((column_cells + 2) * 18)
  1167 00001042 0F8492010000            		je .endp 
  1168                                  
  1169 00001048 4981F9[70080000]        		cmp r9, board + 1 + ((column_cells + 2) * 19)
  1170 0000104F 0F8485010000            		je .endp
  1171                                  
  1172 00001055 4981F9[E0080000]        		cmp r9, board + 1 + ((column_cells + 2) * 20)
  1173 0000105C 0F8478010000            		je .endp
  1174                                  
  1175 00001062 4981F9[93030000]        		cmp r9, board + 100 + ((column_cells + 2) * 7)
  1176 00001069 0F846B010000            		je .endp
  1177                                  
  1178 0000106F 4981F9[03040000]        		cmp r9, board + 100 + ((column_cells + 2) * 8)
  1179 00001076 0F845E010000            		je .endp
  1180                                  
  1181 0000107C 4981F9[61040000]        		cmp r9, board + 82 + ((column_cells + 2) * 9)
  1182 00001083 0F8451010000            		je .endp
  1183                                  
  1184                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
  1185 00001089 4981F9[D1040000]        		cmp r9, board + 82 + ((column_cells + 2) * 10)
  1186 00001090 0F8444010000            		je .endp
  1187                                  
  1188 00001096 4981F9[41050000]        		cmp r9, board + 82 + ((column_cells + 2) * 11)
  1189 0000109D 0F8437010000            		je .endp
  1190                                  
  1191 000010A3 4981F9[B1050000]        		cmp r9, board + 82 + ((column_cells + 2) * 12)
  1192 000010AA 0F842A010000            		je .endp
  1193                                  
  1194 000010B0 4981F9[21060000]        		cmp r9, board + 82 + ((column_cells + 2) * 13)
  1195 000010B7 0F841D010000            		je .endp
  1196                                  
  1197 000010BD 4981F9[91060000]        		cmp r9, board + 82 + ((column_cells + 2) * 14)
  1198 000010C4 0F8410010000            		je .endp
  1199                                  
  1200 000010CA 4981F9[01070000]        		cmp r9, board + 82 + ((column_cells + 2) * 15)
  1201 000010D1 0F8403010000            		je .endp
  1202                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
  1203                                  
  1204 000010D7 4981F9[83070000]        		cmp r9, board + 100 + ((column_cells + 2) * 16)
  1205 000010DE 0F84F6000000            		je .endp
  1206                                  
  1207 000010E4 4981F9[F3070000]        		cmp r9, board + 100 + ((column_cells + 2) * 17)
  1208 000010EB 0F84E9000000            		je .endp
  1209                                  
  1210 000010F1 4C8B0D(EB090000)        		mov r9, [pallet_size]
  1211 000010F8 41C60120                		mov byte [r9], char_space	; Limpiar el último carácter del palet
  1212 000010FC 49FFC9                  		dec r9								; Mover la posición del palet una unidad a la izquierda
  1213 000010FF 4C890D(F3090000)        		mov [bot_position], r9			; Actualizar la posición del palet en la memoria
  1214                                  
  1215 00001106 E9CF000000              		jmp .endp	
  1216                                  							 
  1217                                  	.move_right:
  1218                                  
  1219 0000110B 4C8B2D(230A0000)        		mov r13, [colj]
  1220 00001112 4983FD02                		cmp r13, 2
  1221 00001116 0F84BE000000            		je .endp
  1222                                  
  1223 0000111C 4C8B0D(F3090000)        		mov r9, [bot_position]
  1224                                  
  1225                                  		
  1226 00001123 4981F9[4B020000]        		cmp r9, board + 108 + ((column_cells + 2) * 4)
  1227 0000112A 0F84AA000000            		je .endp
  1228                                  
  1229 00001130 4981F9[BB020000]        		cmp r9, board + 108 + ((column_cells + 2) * 5)
  1230 00001137 0F849D000000            		je .endp
  1231                                  
  1232 0000113D 4981F9[2B030000]        		cmp r9, board + 108 + ((column_cells + 2) * 6)
  1233 00001144 0F8490000000            		je .endp
  1234                                  
  1235 0000114A 4981F9[9B030000]        		cmp r9, board + 108 + ((column_cells + 2) * 7)
  1236 00001151 0F8483000000            		je .endp
  1237                                  
  1238 00001157 4981F9[0B040000]        		cmp r9, board + 108 + ((column_cells + 2) * 8)
  1239 0000115E 747A                    		je .endp
  1240                                  
  1241 00001160 4981F9[7B040000]        		cmp r9, board + 108 + ((column_cells + 2) * 9)
  1242 00001167 7471                    		je .endp
  1243                                  
  1244 00001169 4981F9[EB040000]        		cmp r9, board + 108 + ((column_cells + 2) * 10)
  1245 00001170 7468                    		je .endp
  1246                                  
  1247 00001172 4981F9[44050000]        		cmp r9, board + 85 + ((column_cells + 2) * 11)
  1248 00001179 745F                    		je .endp
  1249                                  
  1250 0000117B 4981F9[B4050000]        		cmp r9, board + 85 + ((column_cells + 2) * 12)
  1251 00001182 7456                    		je .endp
  1252                                  
  1253 00001184 4981F9[24060000]        		cmp r9, board + 85 + ((column_cells + 2) * 13)
  1254 0000118B 744D                    		je .endp
  1255                                  
  1256 0000118D 4981F9[AB060000]        		cmp r9, board + 108 + ((column_cells + 2) * 14)
  1257 00001194 7444                    		je .endp
  1258                                  
  1259 00001196 4981F9[1B070000]        		cmp r9, board + 108 + ((column_cells + 2) * 15)
  1260 0000119D 743B                    		je .endp
  1261                                  
  1262 0000119F 4981F9[8B070000]        		cmp r9, board + 108 + ((column_cells + 2) * 16)
  1263 000011A6 7432                    		je .endp
  1264                                  
  1265 000011A8 4981F9[FB070000]        		cmp r9, board + 108 + ((column_cells + 2) * 17)
  1266 000011AF 7429                    		je .endp
  1267                                  
  1268 000011B1 4981F9[6B080000]        		cmp r9, board + 108 + ((column_cells + 2) * 18)
  1269 000011B8 7420                    		je .endp
  1270                                  
  1271 000011BA 4981F9[DB080000]        		cmp r9, board + 108 + ((column_cells + 2) * 19)
  1272 000011C1 7417                    		je .endp
  1273                                  
  1274 000011C3 4981F9[4B090000]        		cmp r9, board + 108 + ((column_cells + 2) * 20)
  1275 000011CA 740E                    		je .endp
  1276                                  
  1277 000011CC 41C60120                		mov byte [r9], char_space
  1278 000011D0 49FFC1                  		inc r9
  1279 000011D3 4C890D(F3090000)        		mov [bot_position], r9
  1280                                   
  1281                                  
  1282                                  
  1283                                  	.endp:
  1284 000011DA 48C705(230A0000)00-     		mov qword [colj], 0
  1284 000011E2 000000             
  1285                                  
  1286 000011E5 58                      	pop rax
  1287 000011E6 59                      	pop rcx
  1288                                  	 
  1289 000011E7 C3                      	ret
  1290                                  
  1291                                  
  1292                                  
  1293                                  _start: 
  1294                                  	print clear, clear_length
   203 000011E8 B801000000          <1>  mov eax, sys_write
   204 000011ED BF01000000          <1>  mov edi, 1
   205 000011F2 48BE-               <1>  mov rsi, %1
   205 000011F4 [2000000000000000]  <1>
   206 000011FC BA07000000          <1>  mov edx, %2
   207 00001201 0F05                <1>  syscall
  1295 00001203 E8ED000000              	call start_screen
  1296                                  	level_up:
  1297 00001208 E819F0FFFF              	call canonical_off
  1298                                  
  1299                                   
  1300                                  	.main_loop:
  1301                                  
  1302                                  		;call rand_num
  1303 0000120D E8C6F0FFFF              		call print_pallet
  1304 00001212 E849F8FFFF              		call print_bot ; llamada a funcion de imprimir bots
  1305                                  		print board, board_size	 
   203 00001217 B801000000          <1>  mov eax, sys_write
   204 0000121C BF01000000          <1>  mov edi, 1
   205 00001221 48BE-               <1>  mov rsi, %1
   205 00001223 [1F00000000000000]  <1>
   206 0000122B BAA0090000          <1>  mov edx, %2
   207 00001230 0F05                <1>  syscall
  1306                                  
  1307                                  	
  1308                                  		
  1309                                  		;setnonblocking	
  1310                                  	.read_more:	
  1311                                  		getchar						;Llama a la macro getchar para leer un carácter de la entrada de teclado 
   212 00001232 B800000000          <1>  mov rax, sys_read
   213 00001237 BF00000000          <1>  mov rdi, STDIN_FILENO
   214 0000123C 48BE-               <1>  mov rsi, input_char
   214 0000123E [0500000000000000]  <1>
   215 00001246 BA01000000          <1>  mov rdx, 1
   216 0000124B 0F05                <1>  syscall
  1312                                  		
  1313 0000124D 4883F801                		cmp rax, 1
  1314 00001251 7552                        	jne .done
  1315                                  		
  1316 00001253 8A05(05000000)          		mov al,[input_char]
  1317                                  
  1318                                  		.up_in:
  1319 00001259 3C77                    			cmp al, 'w'
  1320 0000125B 750C                    			jne .down_in
  1321 0000125D BF02000000              			mov rdi, up_direction
  1322 00001262 E87DF0FFFF              			call move_pallet
  1323 00001267 EB3C                    			jmp .done
  1324                                  
  1325                                  		.down_in:
  1326 00001269 3C73                    			cmp al, 's'
  1327 0000126B 750C                    			jne .left_in
  1328 0000126D BF03000000              			mov rdi, down_direction
  1329 00001272 E86DF0FFFF              			call move_pallet
  1330 00001277 EB2C                    			jmp .done
  1331                                  
  1332                                  		.left_in:
  1333 00001279 3C61                    			cmp al, 'a'
  1334 0000127B 750E                    			jne .right_in
  1335 0000127D 48C7C7FFFFFFFF          			mov rdi, left_direction
  1336 00001284 E85BF0FFFF              			call move_pallet
  1337 00001289 EB1A                    			jmp .done
  1338                                  		
  1339                                  		.right_in:
  1340 0000128B 3C64                    		 	cmp al, 'd'
  1341 0000128D 750C                    	    	jne .go_out
  1342 0000128F BF01000000              			mov rdi, right_direction
  1343 00001294 E84BF0FFFF              			call move_pallet
  1344 00001299 EB0A                        		jmp .done	
  1345                                  
  1346                                  		.go_out:
  1347                                  
  1348 0000129B 3C71                        		cmp al, 'q'
  1349 0000129D 0F84AE000000                		je exit
  1350                                  
  1351 000012A3 EB8D                    			jmp .read_more
  1352                                  		
  1353                                  		.done:	
  1354                                  			;unsetnonblocking		
  1355                                  			sleeptime	
   220 000012A5 B823000000          <1>  mov eax, sys_nanosleep
   221 000012AA 48BF-               <1>  mov rdi, timespec
   221 000012AC [0000000000000000]  <1>
   222 000012B4 31F6                <1>  xor esi, esi
   223 000012B6 0F05                <1>  syscall
  1356                                  			print clear, clear_length
   203 000012B8 B801000000          <1>  mov eax, sys_write
   204 000012BD BF01000000          <1>  mov edi, 1
   205 000012C2 48BE-               <1>  mov rsi, %1
   205 000012C4 [2000000000000000]  <1>
   206 000012CC BA07000000          <1>  mov edx, %2
   207 000012D1 0F05                <1>  syscall
  1357 000012D3 E935FFFFFF                  		jmp .main_loop 
  1358                                  
  1359                                  		print clear, clear_length
   203 000012D8 B801000000          <1>  mov eax, sys_write
   204 000012DD BF01000000          <1>  mov edi, 1
   205 000012E2 48BE-               <1>  mov rsi, %1
   205 000012E4 [2000000000000000]  <1>
   206 000012EC BA07000000          <1>  mov edx, %2
   207 000012F1 0F05                <1>  syscall
  1360                                  		
  1361 000012F3 EB5C                    		jmp exit
  1362                                  
  1363                                  
  1364                                  start_screen: 
  1365                                  
  1366 000012F5 50                      	push rax
  1367 000012F6 51                      	push rcx
  1368 000012F7 52                      	push rdx
  1369 000012F8 57                      	push rdi
  1370 000012F9 56                      	push rsi
  1371                                  	
  1372                                  	print msg1, msg1_length	
   203 000012FA B801000000          <1>  mov eax, sys_write
   204 000012FF BF01000000          <1>  mov edi, 1
   205 00001304 48BE-               <1>  mov rsi, %1
   205 00001306 [3800000000000000]  <1>
   206 0000130E BAEE010000          <1>  mov edx, %2
   207 00001313 0F05                <1>  syscall
  1373                                  	getchar
   212 00001315 B800000000          <1>  mov rax, sys_read
   213 0000131A BF00000000          <1>  mov rdi, STDIN_FILENO
   214 0000131F 48BE-               <1>  mov rsi, input_char
   214 00001321 [0500000000000000]  <1>
   215 00001329 BA01000000          <1>  mov rdx, 1
   216 0000132E 0F05                <1>  syscall
  1374                                  	print clear, clear_length
   203 00001330 B801000000          <1>  mov eax, sys_write
   204 00001335 BF01000000          <1>  mov edi, 1
   205 0000133A 48BE-               <1>  mov rsi, %1
   205 0000133C [2000000000000000]  <1>
   206 00001344 BA07000000          <1>  mov edx, %2
   207 00001349 0F05                <1>  syscall
  1375                                  
  1376 0000134B 58                      	pop rax
  1377 0000134C 59                      	pop rcx
  1378 0000134D 5A                      	pop rdx
  1379 0000134E 5F                      	pop rdi
  1380 0000134F 5E                      	pop rsi
  1381 00001350 C3                      	ret
  1382                                  
  1383                                  
  1384                                  
  1385                                  exit: 
  1386 00001351 E812EFFFFF              	call canonical_on
  1387 00001356 B83C000000              	mov    rax, 60
  1388 0000135B BF00000000                  mov    rdi, 0
  1389 00001360 0F05                        syscall
  1390                                  
  1391                                  
