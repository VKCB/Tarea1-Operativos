     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  	sys_read: equ 0	
     7                                  	sys_write:	equ 1
     8                                  	sys_nanosleep:	equ 35
     9                                  	sys_nanosleep2:	equ 200
    10                                  	sys_time:	equ 201
    11                                  	sys_fcntl:	equ 72
    12                                  
    13                                  	char_equal: equ 61 
    14                                  	char_aster: equ 42
    15                                  	char_may: equ 62  
    16                                  	char_men: equ 60 
    17                                  	char_dosp: equ 58
    18                                  	char_comillas: equ 176
    19                                  	char_comilla: equ 39 
    20                                  	char_space: equ 32 
    21                                  	left_direction: equ -1
    22                                  	right_direction: equ 1
    23                                  	up_direction: equ 2
    24                                  	down_direction: equ 3
    25                                  	char_bot: equ 98 ; Letra que identifica al bot1 blue
    26                                  	char_player2: equ 74 ; Letra que identifica al Jugador 2
    27                                  
    28                                  
    29                                  
    30                                  STDIN_FILENO: equ 0			;Se utiliza en llamadas al sistema que requieren un descriptor de archivo, por ejemplo, al leer de la entrada estándar
    31                                  
    32                                  F_SETFL:	equ 0x0004		;Se pasa como segundo argumento a la llamada al sistema fcntl para indicar que queremos cambiar los flags del descriptor de archivo.
    33                                  O_NONBLOCK: equ 0x0004		;Se utiliza como tercer argumento en la llamada al sistema fcntl para indicar que el descriptor de archivo debe operar en modo no bloqueante.
    34                                  
    35                                  ;screen clean definition
    36                                  	row_cells:	equ 24	;Numero de filas que caben en la pantalla
    37                                  	column_cells: 	equ 110 ; set to any (reasonable) value you wish
    38                                  	array_length:	equ row_cells * column_cells + row_cells ;(+ 32 caracteres de nueva línea)
    39                                  
    40                                  ;This is regarding the sleep time
    41                                  timespec:
    42 00000000 0000000000000000            tv_sec  dq 0
    43 00000008 002D310100000000            tv_nsec dq 20000000		;0.02 s
    44                                  
    45                                  timespec2:
    46 00000010 0000000000000000            tv_sec2  dq 0
    47 00000018 00204AA9D1010000            tv_nsec2 dq 2000000000000		;0.02 s
    48                                  
    49                                  ;This is for cleaning up the screen
    50 00000020 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"	;2J: Esta es una secuencia de escape ANSI que indica Clear screen
    51                                  clear_length:	equ $-clear			;H: Indica reposicionamiento del cursor.
    52                                  
    53                                  ; Esta es la pantalla de inicio
    54                                  	
    55 00000027 202020202020202020-     	msg13: db "               ", 0xA, 0xD
    55 00000030 2020202020200A0D   
    56 00000038 202020202009090909-     	msg1: db "     					   TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    56 00000041 092020205445434E4F-
    56 0000004A 4C4F4749434F204445-
    56 00000053 20434F535441205249-
    56 0000005C 434120202020202020-
    56 00000065 200A0D             
    57 00000068 202020202020202020-     	msg14: db "               ", 0xA, 0xD
    57 00000071 2020202020200A0D   
    58 00000079 202020202020202020-     	msg17: db "               ", 0xA, 0xD
    58 00000082 2020202020200A0D   
    59 0000008A 202020202020202020-     	msg18: db "               ", 0xA, 0xD
    59 00000093 2020202020200A0D   
    60 0000009B 09090909090956616C-     	msg2: db "						Valerin Calderon       ", 0xA, 0xD
    60 000000A4 6572696E2043616C64-
    60 000000AD 65726F6E2020202020-
    60 000000B6 20200A0D           
    61 000000BA 09090909090959656E-     	msg5: db "						Yendry Badilla         ", 0xA, 0xD
    61 000000C3 64727920426164696C-
    61 000000CC 6C6120202020202020-
    61 000000D5 20200A0D           
    62 000000D9 090909090909416E64-     	msg15: db "						Andrés Molina          ", 0xA, 0xD
    62 000000E2 72C3A973204D6F6C69-
    62 000000EB 6E6120202020202020-
    62 000000F4 2020200A0D         
    63 000000F9 202020202020202020-     	msg6: db "               ", 0xA, 0xD
    63 00000102 2020202020200A0D   
    64 0000010A 202020202020202020-     	msg7: db "               ", 0xA, 0xD
    64 00000113 2020202020200A0D   
    65 0000011B 202020202020202020-     	msg8: db "               ", 0xA, 0xD
    65 00000124 2020202020200A0D   
    66 0000012C 202020202020202020-     	msg9: db "               ", 0xA, 0xD
    66 00000135 2020202020200A0D   
    67 0000013D 202020202020202020-     	msg16: db "               ", 0xA, 0xD 
    67 00000146 2020202020200A0D   
    68 0000014E 090909090909475241-     	msg3: db "						GRAN TRAK TEC        ", 0xA, 0xD
    68 00000157 4E205452414B205445-
    68 00000160 432020202020202020-
    68 00000169 0A0D               
    69                                  
    70 0000016B 202020202020202020-     	msg19: db "               ", 0xA, 0xD
    70 00000174 2020202020200A0D   
    71 0000017C 202020202020202020-     	msg20: db "               ", 0xA, 0xD
    71 00000185 2020202020200A0D   
    72 0000018D 202020202020202020-     	msg21: db "               ", 0xA, 0xD
    72 00000196 2020202020200A0D   
    73 0000019E 202020202020202020-     	msg22: db "               ", 0xA, 0xD
    73 000001A7 2020202020200A0D   
    74 000001AF 202020202020202020-     	msg23: db "               ", 0xA, 0xD 
    74 000001B8 2020202020200A0D   
    75 000001C0 202020202020202020-     	msg24: db "               ", 0xA, 0xD
    75 000001C9 2020202020200A0D   
    76 000001D1 202020202020202020-     	msg25: db "               ", 0xA, 0xD
    76 000001DA 2020202020200A0D   
    77 000001E2 202020202020202020-     	msg26: db "               ", 0xA, 0xD 
    77 000001EB 2020202020200A0D   
    78 000001F3 202020202020090909-     	msg4: db "      					   PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    78 000001FC 090920202050524553-
    78 00000205 494F4E4520454E5445-
    78 0000020E 52205041524120494E-
    78 00000217 494349415220202020-
    78 00000220 202020200A0D       
    79                                  	msg1_length:	equ $-msg1
    80                                  	msg2_length:	equ $-msg2
    81                                  	msg3_length:	equ $-msg3
    82                                  	msg4_length:	equ $-msg4
    83                                  	msg5_length:	equ $-msg5
    84                                  	msg13_length:	equ $-msg13
    85                                  	msg14_length:	equ $-msg14
    86                                  	msg15_length:	equ $-msg15
    87                                  	msg16_length:	equ $-msg16
    88                                  	msg17_length:	equ $-msg17 
    89                                  	msg6_length:	equ $-msg6 
    90                                  	msg7_length:	equ $-msg7 
    91                                  	msg8_length:	equ $-msg8 
    92                                  	msg9_length:	equ $-msg9 
    93                                  	msg18_length:	equ $-msg18
    94                                  	msg19_length:	equ $-msg19
    95                                  	msg20_length:	equ $-msg20
    96                                  	msg21_length:	equ $-msg21
    97                                  	msg22_length:	equ $-msg22
    98                                  	msg23_length:	equ $-msg23
    99                                  	msg24_length:	equ $-msg24
   100                                  	msg25_length:	equ $-msg25
   101                                  	msg26_length:	equ $-msg26
   102                                  
   103 00000226 456C206A7565676F20-     	game_over_msg db "El juego ha finalizado", 0xA, 0xD
   103 0000022F 68612066696E616C69-
   103 00000238 7A61646F0A0D       
   104                                  	game_over_msg_length equ $-game_over_msg
   105                                  
   106                                  	; Usefull macros (Como funciones reutilizables)
   107                                   
   108                                  	%macro setnonblocking 0		;Configura la entrada estándar para que funcione en modo no bloqueante
   109                                  		mov rax, sys_fcntl
   110                                  		mov rdi, STDIN_FILENO
   111                                  		mov rsi, F_SETFL
   112                                  		mov rdx, O_NONBLOCK
   113                                  		syscall
   114                                  	%endmacro
   115                                  
   116                                  	%macro unsetnonblocking 0	;Restablece la entrada estándar al modo bloqueante
   117                                  		mov rax, sys_fcntl
   118                                  		mov rdi, STDIN_FILENO
   119                                  		mov rsi, F_SETFL
   120                                  		mov rdx, 0
   121                                  		syscall
   122                                  	%endmacro
   123                                  
   124                                  	%macro full_line 0			;Linea completa de X
   125                                  		times column_cells db "X"
   126                                  		db 0x0a, 0xD
   127                                  	%endmacro
   128                                  
   129                                  	;Esta parte es para la creacion de la pista
   130                                  
   131                                  	%macro up_down_pista 0			;Parte de arriba de la pista
   132                                  		db "X"
   133                                  		times 9 db " "
   134                                  		times 90 db "O"
   135                                  		times 9 db " "
   136                                  		db "X"
   137                                  		db 0x0a, 0xD
   138                                  	%endmacro
   139                                  
   140                                  	%macro right_pista1 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   141                                  		db "X"
   142                                  		times 9 db " "
   143                                  		db "O"
   144                                  		times 88 db " "
   145                                  		db "O"
   146                                  		times 9 db " "
   147                                  		db "X", 0x0a, 0xD
   148                                  	%endmacro
   149                                  
   150                                  	%macro right_pista2 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   151                                  		db "X"
   152                                  		times 9 db " "
   153                                  		db "O"
   154                                  		times 70 db " "
   155                                  		times 19 db "O"
   156                                  		times 9 db " "
   157                                  		db "X", 0x0a, 0xD
   158                                  	%endmacro
   159                                  
   160                                  	%macro right_pista3 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   161                                  		db "X"
   162                                  		times 9 db " "
   163                                  		db "O"
   164                                  		times 70 db " "
   165                                  		db "O"
   166                                  		times 27 db " "
   167                                  		db "X", 0x0a, 0xD
   168                                  	%endmacro
   169                                  
   170                                  	%macro right_pista4 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   171                                  		db "X"
   172                                  		times 9 db " "
   173                                  		db "O"
   174                                  		times 70 db " "
   175                                  		db "O"
   176                                  		times 4 db " "
   177                                  		times 23 db "O"
   178                                  		db "X", 0x0a, 0xD
   179                                  	%endmacro
   180                                  
   181                                  	; Fin de la creacion de la pista
   182                                  
   183                                  	%macro marcador_j1 0			;Crea una línea completa de 'O' seguida de una nueva línea marcadores
   184                                  		db "X PLAYER 1 TURNS: "
   185                                  		times 60 db " "
   186                                  		db "Time:"
   187                                  		times 26 db " "
   188                                  		db "X"
   189                                  		db 0x0a, 0xD
   190                                  	%endmacro
   191                                  
   192                                  	%macro marcador_j2 0			;Crea una línea completa de 'O' seguida de una nueva línea
   193                                  		db "X PLAYER 2 TURNS: "
   194                                  		times 91 db " "
   195                                  		db "X"
   196                                  		db 0x0a, 0xD
   197                                  	%endmacro
   198                                  
   199                                  	%macro hollow_line 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   200                                  		db "X"
   201                                  		times column_cells-2 db char_space	;A 80 le resta las 2 X de los extremos e imprime 78 espacios
   202                                  		db "X", 0x0a, 0xD
   203                                  	%endmacro
   204                                  
   205                                  	%macro print 2				;Imprime una cadena especificada en la salida estándar
   206                                  		mov eax, sys_write
   207                                  		mov edi, 1 	; stdout
   208                                  		mov rsi, %1				;Parametro 1 que se pasa en donde se llama al macro
   209                                  		mov edx, %2				;Parametro 2
   210                                  		syscall
   211                                  	%endmacro
   212                                  
   213                                  	;Esta es la funcion que obtiene lo que uno ingrese
   214                                  	%macro getchar 0			;Lee un solo carácter de la entrada estándar y lo almacena en input_char
   215                                  		mov     rax, sys_read
   216                                  		mov     rdi, STDIN_FILENO
   217                                  		mov     rsi, input_char
   218                                  		mov     rdx, 1 ; number of bytes
   219                                  		syscall         ;read text input from keyboard
   220                                  	%endmacro
   221                                  
   222                                  	%macro sleeptime 0			;Suspende la ejecución del programa durante el tiempo especificado
   223                                  		mov eax, sys_nanosleep
   224                                  		mov rdi, timespec
   225                                  		xor esi, esi		; ignore remaining time in case of call interruption
   226                                  		syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   227                                  	%endmacro
   228                                  
   229                                  global _start
   230                                  
   231                                  section .bss
   232                                  
   233 00000000 ??????????              	buffer resb 5  ; Buffer para almacenar los dígitos convertidos
   234                                  
   235 00000005 ????????????????        	input_char resq 1 
   236                                  
   237 0000000D ??                      	temp_char resb 1
   238 0000000E ??                      	random_value resb 1 ; Número random obtenido (renombrado para evitar conflicto)
   239 0000000F ??                      	random2_value resb 1 ; Número random adicional (renombrado para evitar conflicto)
   240 00000010 ????????????????        	start_time resq 1  ; Variable para almacenar el tiempo inicial
   241 00000018 ????????????????        	current_time resq 1 ; Variable para almacenar el tiempo actual
   242                                  
   243                                  	; Bots
   244 00000020 ??                      	bot_random resb 1 ; Número random obtenido para el bot (renombrado)
   245 00000021 ????????????????         	random_result resq 1
   246 00000029 ????????????????          	bot_speed resq 1
   247 00000031 ????????????????          	bot_counter resq 1
   248                                  section .data 
   249                                  
   250                                  
   251 00000000 2F6465762F7572616E-     	urandom db '/dev/urandom', 0
   251 00000009 646F6D00           
   252 0000000D 0A00                    	newline db 10, 0
   253                                  
   254 0000000F 0000000000000000        	score dq 0
   255 00000017 [A704000000000000]      	score_position dq board + 19 + 10* (column_cells + 2)
   256                                  
   257 0000001F 5469656D706F207265-     		time_msg db "Tiempo restante: ", 0
   257 00000028 7374616E74653A2000 
   258                                  		time_msg_length equ $-time_msg
   259 00000031 303000                  		time_buffer db "00", 0  ; Buffer para mostrar los segundos restantes como texto
   260                                  		time_buffer_length equ $-time_buffer
   261                                  
   262                                  	board:
   263                                  		full_line
   125 00000034 58<rep 6Eh>         <1>  times column_cells db "X"
   126 000000A2 0A0D                <1>  db 0x0a, 0xD
   264                                  		marcador_j1
   184 000000A4 5820504C4159455220- <1>  db "X PLAYER 1 TURNS: "
   184 000000AD 31205455524E533A20  <1>
   185 000000B6 20<rep 3Ch>         <1>  times 60 db " "
   186 000000F2 54696D653A          <1>  db "Time:"
   187 000000F7 20<rep 1Ah>         <1>  times 26 db " "
   188 00000111 58                  <1>  db "X"
   189 00000112 0A0D                <1>  db 0x0a, 0xD
   265                                  		marcador_j2 
   193 00000114 5820504C4159455220- <1>  db "X PLAYER 2 TURNS: "
   193 0000011D 32205455524E533A20  <1>
   194 00000126 20<rep 5Bh>         <1>  times 91 db " "
   195 00000181 58                  <1>  db "X"
   196 00000182 0A0D                <1>  db 0x0a, 0xD
   266                                  		full_line
   125 00000184 58<rep 6Eh>         <1>  times column_cells db "X"
   126 000001F2 0A0D                <1>  db 0x0a, 0xD
   267                                          %rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   268                                          hollow_line
   269                                          %endrep 
   268                              <1>  hollow_line
   200 000001F4 58                  <2>  db "X"
   201 000001F5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 00000261 580A0D              <2>  db "X", 0x0a, 0xD
   268                              <1>  hollow_line
   200 00000264 58                  <2>  db "X"
   201 00000265 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 000002D1 580A0D              <2>  db "X", 0x0a, 0xD
   268                              <1>  hollow_line
   200 000002D4 58                  <2>  db "X"
   201 000002D5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 00000341 580A0D              <2>  db "X", 0x0a, 0xD
   270                                  
   271                                  		up_down_pista
   132 00000344 58                  <1>  db "X"
   133 00000345 20<rep 9h>          <1>  times 9 db " "
   134 0000034E 4F<rep 5Ah>         <1>  times 90 db "O"
   135 000003A8 20<rep 9h>          <1>  times 9 db " "
   136 000003B1 58                  <1>  db "X"
   137 000003B2 0A0D                <1>  db 0x0a, 0xD
   272                                  
   273                                  
   274                                          right_pista2
   151 000003B4 58                  <1>  db "X"
   152 000003B5 20<rep 9h>          <1>  times 9 db " "
   153 000003BE 4F                  <1>  db "O"
   154 000003BF 20<rep 46h>         <1>  times 70 db " "
   155 00000405 4F<rep 13h>         <1>  times 19 db "O"
   156 00000418 20<rep 9h>          <1>  times 9 db " "
   157 00000421 580A0D              <1>  db "X", 0x0a, 0xD
   275                                  
   276                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   277                                          right_pista3
   278                                          %endrep
   277                              <1>  right_pista3
   161 00000424 58                  <2>  db "X"
   162 00000425 20<rep 9h>          <2>  times 9 db " "
   163 0000042E 4F                  <2>  db "O"
   164 0000042F 20<rep 46h>         <2>  times 70 db " "
   165 00000475 4F                  <2>  db "O"
   166 00000476 20<rep 1Bh>         <2>  times 27 db " "
   167 00000491 580A0D              <2>  db "X", 0x0a, 0xD
   277                              <1>  right_pista3
   161 00000494 58                  <2>  db "X"
   162 00000495 20<rep 9h>          <2>  times 9 db " "
   163 0000049E 4F                  <2>  db "O"
   164 0000049F 20<rep 46h>         <2>  times 70 db " "
   165 000004E5 4F                  <2>  db "O"
   166 000004E6 20<rep 1Bh>         <2>  times 27 db " "
   167 00000501 580A0D              <2>  db "X", 0x0a, 0xD
   279                                  
   280                                  		right_pista4
   171 00000504 58                  <1>  db "X"
   172 00000505 20<rep 9h>          <1>  times 9 db " "
   173 0000050E 4F                  <1>  db "O"
   174 0000050F 20<rep 46h>         <1>  times 70 db " "
   175 00000555 4F                  <1>  db "O"
   176 00000556 20<rep 4h>          <1>  times 4 db " "
   177 0000055A 4F<rep 17h>         <1>  times 23 db "O"
   178 00000571 580A0D              <1>  db "X", 0x0a, 0xD
   281                                  		right_pista4
   171 00000574 58                  <1>  db "X"
   172 00000575 20<rep 9h>          <1>  times 9 db " "
   173 0000057E 4F                  <1>  db "O"
   174 0000057F 20<rep 46h>         <1>  times 70 db " "
   175 000005C5 4F                  <1>  db "O"
   176 000005C6 20<rep 4h>          <1>  times 4 db " "
   177 000005CA 4F<rep 17h>         <1>  times 23 db "O"
   178 000005E1 580A0D              <1>  db "X", 0x0a, 0xD
   282                                  		right_pista4
   171 000005E4 58                  <1>  db "X"
   172 000005E5 20<rep 9h>          <1>  times 9 db " "
   173 000005EE 4F                  <1>  db "O"
   174 000005EF 20<rep 46h>         <1>  times 70 db " "
   175 00000635 4F                  <1>  db "O"
   176 00000636 20<rep 4h>          <1>  times 4 db " "
   177 0000063A 4F<rep 17h>         <1>  times 23 db "O"
   178 00000651 580A0D              <1>  db "X", 0x0a, 0xD
   283                                  
   284                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   285                                          right_pista3
   286                                          %endrep 
   285                              <1>  right_pista3
   161 00000654 58                  <2>  db "X"
   162 00000655 20<rep 9h>          <2>  times 9 db " "
   163 0000065E 4F                  <2>  db "O"
   164 0000065F 20<rep 46h>         <2>  times 70 db " "
   165 000006A5 4F                  <2>  db "O"
   166 000006A6 20<rep 1Bh>         <2>  times 27 db " "
   167 000006C1 580A0D              <2>  db "X", 0x0a, 0xD
   285                              <1>  right_pista3
   161 000006C4 58                  <2>  db "X"
   162 000006C5 20<rep 9h>          <2>  times 9 db " "
   163 000006CE 4F                  <2>  db "O"
   164 000006CF 20<rep 46h>         <2>  times 70 db " "
   165 00000715 4F                  <2>  db "O"
   166 00000716 20<rep 1Bh>         <2>  times 27 db " "
   167 00000731 580A0D              <2>  db "X", 0x0a, 0xD
   287                                  
   288                                  		right_pista2
   151 00000734 58                  <1>  db "X"
   152 00000735 20<rep 9h>          <1>  times 9 db " "
   153 0000073E 4F                  <1>  db "O"
   154 0000073F 20<rep 46h>         <1>  times 70 db " "
   155 00000785 4F<rep 13h>         <1>  times 19 db "O"
   156 00000798 20<rep 9h>          <1>  times 9 db " "
   157 000007A1 580A0D              <1>  db "X", 0x0a, 0xD
   289                                  
   290                                  
   291                                  		up_down_pista
   132 000007A4 58                  <1>  db "X"
   133 000007A5 20<rep 9h>          <1>  times 9 db " "
   134 000007AE 4F<rep 5Ah>         <1>  times 90 db "O"
   135 00000808 20<rep 9h>          <1>  times 9 db " "
   136 00000811 58                  <1>  db "X"
   137 00000812 0A0D                <1>  db 0x0a, 0xD
   292                                  
   293                                  		%rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   294                                          hollow_line
   295                                          %endrep
   294                              <1>  hollow_line
   200 00000814 58                  <2>  db "X"
   201 00000815 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 00000881 580A0D              <2>  db "X", 0x0a, 0xD
   294                              <1>  hollow_line
   200 00000884 58                  <2>  db "X"
   201 00000885 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 000008F1 580A0D              <2>  db "X", 0x0a, 0xD
   294                              <1>  hollow_line
   200 000008F4 58                  <2>  db "X"
   201 000008F5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   202 00000961 580A0D              <2>  db "X", 0x0a, 0xD
   296                                  
   297                                          full_line
   125 00000964 58<rep 6Eh>         <1>  times column_cells db "X"
   126 000009D2 0A0D                <1>  db 0x0a, 0xD
   298                                  	board_size:   equ   $ - board
   299                                  
   300                                  	; Added for the terminal issue	
   301 000009D4 00<rep 24h>             		termios:        times 36 db 0	;Define una estructura de 36 bytes inicializados a 0. Esta estructura es utilizada para almacenar las configuraciones del terminal
   302                                  		stdin:          equ 0			;Define el descriptor de archivo para la entrada estándar (stdin), que es 0
   303                                  		ICANON:         equ 1<<1		;Canonico la entrada no se envía al programa hasta que el usuario presiona Enter
   304                                  		ECHO:           equ 1<<3		;Bandera que habilita o deshabilita este modo
   305                                  		VTIME: 			equ 5
   306                                  		VMIN:			equ 6
   307                                  		CC_C:			equ 18
   308                                  
   309                                  
   310 000009F8 [E904000000000000]      	pallet_position dq board + 85 + ((column_cells + 2) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical 
   311 00000A00 0300000000000000        	pallet_size dq 3
   312                                  
   313 00000A08 [F304000000000000]      	bot_position dq board + 85 + ((column_cells + 3) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical
   314 00000A10 [E604000000000000]      	player2_position dq board + 82 + ((column_cells + 2) * 10) ; Posición inicial del Jugador 2
   315 00000A18 1E00000000000000        	pared1_x_pos: dq 30 ;0-59
   316 00000A20 0100000000000000        	pared1_y_pos: dq 1
   317 00000A28 5000000000000000        	pared2_x_pos: dq 80 ;0-59
   318 00000A30 0100000000000000        	pared2_y_pos: dq 1
   319 00000A38 1500000000000000        		colen: dq 21
   320 00000A40 0000000000000000        		colj: dq 0
   321 00000A48 0000000000000000        		cole: dq 0
   322 00000A50 1500000000000000        		pared: dq 21
   323 00000A58 0000000000000000        		colplayer: dq 0 
   324                                  
   325                                  
   326                                  section .text
   327                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   328                                  canonical_off:										;La entrada se procese carácter por carácter sin esperar a que se presione Enter.
   329 0000023E E86F000000                      call read_stdin_termios						;Guarda los atributos actuales del terminal en la variable termios
   330                                  
   331                                          ; clear canonical bit in local mode flags	
   332 00000243 50                              push rax						
   333 00000244 B802000000                      mov eax, ICANON								;Carga el valor de la constante ICANON (que representa el bit del modo canónico) en eax
   334 00000249 F7D0                            not eax										;Niega todos los bits en eax
   335 0000024B 2105(E0090000)                  and [termios+12], eax						;Limpia el bit canónico en las banderas de modo local
   336 00000251 C605(EB090000)00        		mov byte[termios+CC_C+VTIME], 0				;Establecen VTIME y VMIN en 0 para que el terminal no espere caracteres adicionales
   337 00000258 C605(EC090000)00        		mov byte[termios+CC_C+VMIN], 0
   338 0000025F 58                              pop rax
   339                                  
   340 00000260 E86C000000                      call write_stdin_termios					;Escribe los atributos modificados de termios de vuelta al terminal
   341 00000265 C3                              ret
   342                                  
   343                                  echo_off:											;No se muestran los caracteres introducidos
   344 00000266 E847000000                      call read_stdin_termios
   345                                  
   346                                          ; clear echo bit in local mode flags
   347 0000026B 50                              push rax
   348 0000026C B808000000                      mov eax, ECHO
   349 00000271 F7D0                            not eax
   350 00000273 2105(E0090000)                  and [termios+12], eax
   351 00000279 58                              pop rax
   352                                  
   353 0000027A E852000000                      call write_stdin_termios
   354 0000027F C3                              ret
   355                                  
   356                                  canonical_on:										;La entrada se procesa en líneas completas. Espera hasta que el usuario presione Enter
   357 00000280 E82D000000                      call read_stdin_termios
   358                                  
   359                                          ; set canonical bit in local mode flags
   360 00000285 830D(E0090000)02                or dword [termios+12], ICANON
   361 0000028C C605(EB090000)00        		mov byte[termios+CC_C+VTIME], 0			;Tiempo en decisegundos que el terminal espera para la entrada.
   362 00000293 C605(EC090000)01        		mov byte[termios+CC_C+VMIN], 1			;El número mínimo de caracteres que se deben leer
   363 0000029A E832000000                      call write_stdin_termios
   364 0000029F C3                              ret
   365                                  
   366                                  echo_on:											;Se muestran los caracteres introducidos
   367 000002A0 E80D000000                      call read_stdin_termios
   368                                  
   369                                          ; set echo bit in local mode flags
   370 000002A5 830D(E0090000)08                or dword [termios+12], ECHO
   371                                  
   372 000002AC E820000000                      call write_stdin_termios
   373 000002B1 C3                              ret
   374                                  
   375                                  read_stdin_termios:									;Lee los atributos del terminal y los guarda en la variable termios
   376 000002B2 50                              push rax
   377 000002B3 53                              push rbx
   378 000002B4 51                              push rcx
   379 000002B5 52                              push rdx
   380                                  
   381 000002B6 B836000000                      mov eax, 36h
   382 000002BB BB00000000                      mov ebx, stdin
   383 000002C0 B901540000                      mov ecx, 5401h
   384 000002C5 BA[D4090000]                    mov edx, termios
   385 000002CA CD80                            int 80h
   386                                  
   387 000002CC 5A                              pop rdx
   388 000002CD 59                              pop rcx
   389 000002CE 5B                              pop rbx
   390 000002CF 58                              pop rax
   391 000002D0 C3                              ret
   392                                  
   393                                  write_stdin_termios:								;Escribe los atributos del terminal utilizando la llamada al sistema 
   394 000002D1 50                              push rax
   395 000002D2 53                              push rbx
   396 000002D3 51                              push rcx
   397 000002D4 52                              push rdx
   398                                  
   399 000002D5 B836000000                      mov eax, 36h
   400 000002DA BB00000000                      mov ebx, stdin
   401 000002DF B902540000                      mov ecx, 5402h
   402 000002E4 BA[D4090000]                    mov edx, termios
   403 000002E9 CD80                            int 80h
   404                                  
   405 000002EB 5A                              pop rdx
   406 000002EC 59                              pop rcx
   407 000002ED 5B                              pop rbx
   408 000002EE 58                              pop rax
   409 000002EF C3                              ret
   410                                  
   411                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   412                                  
   413                                  ; Function: print_pallet
   414                                  ; This function moves the pallet in the game
   415                                  ; Arguments: none
   416                                  ;
   417                                  ; Return;
   418                                  ;	void
   419                                  print_pallet:
   420                                    
   421 000002F0 4C8B05(F8090000)        	mov r8, [pallet_position] 
   422                                  	.write_pallet:
   423 000002F7 41C600B0                		mov byte [r8], char_comillas
   424 000002FB C3                      	ret
   425                                  
   426                                  ; Function: move_pallet
   427                                  ; Mueve al Jugador 1 en la direccion especificada
   428                                  ; Argumentos:
   429                                  ;   rdi: direccion (up_direction, down_direction, left_direction, right_direction)
   430                                  ; Return:
   431                                  ;	void
   432                                  move_pallet:
   433                                  
   434 000002FC 50                      	push rax
   435 000002FD 51                      	push rcx
   436                                  
   437 000002FE 4C8B2D(400A0000)        	mov r13, [colj]
   438 00000305 4983FD01                	cmp r13, 1
   439 00000309 0F845B070000            	je .endp
   440                                  	  
   441 0000030F 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   442 00000313 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   443                                  
   444 00000315 4883FF03                	cmp rdi, down_direction
   445 00000319 0F8471020000            	je .move_down
   446                                  
   447 0000031F 4883FF01                	cmp rdi, right_direction
   448 00000323 0F8472060000            	je .move_right
   449                                  
   450 00000329 4883FFFF                	cmp rdi, left_direction
   451 0000032D 0F84BD040000            	je .move_left
   452                                  
   453                                  	.move_up:
   454 00000333 4C8B05(F8090000)        		mov r8, [pallet_position]
   455                                  
   456                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   457 0000033A 4981F8[61020000]        		cmp r8, board + 109 + ((column_cells + 2) * 4)
   458 00000341 0F8C23070000            		jl .endp
   459                                  
   460 00000347 4981F8[76040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   461 0000034E 0F8416070000            		je .endp 
   462 00000354 4981F8[77040000]        		cmp r8, board + 83 + ((column_cells + 2) * 9)
   463 0000035B 0F8409070000            		je .endp
   464 00000361 4981F8[78040000]        		cmp r8, board + 84 + ((column_cells + 2) * 9)
   465 00000368 0F84FC060000            		je .endp
   466 0000036E 4981F8[79040000]        		cmp r8, board + 85 + ((column_cells + 2) * 9)
   467 00000375 0F84EF060000            		je .endp
   468 0000037B 4981F8[7A040000]        		cmp r8, board + 86 + ((column_cells + 2) * 9)
   469 00000382 0F84E2060000            		je .endp
   470 00000388 4981F8[7B040000]        		cmp r8, board + 87 + ((column_cells + 2) * 9)
   471 0000038F 0F84D5060000            		je .endp
   472 00000395 4981F8[7C040000]        		cmp r8, board + 88 + ((column_cells + 2) * 9)
   473 0000039C 0F84C8060000            		je .endp
   474 000003A2 4981F8[7D040000]        		cmp r8, board + 89 + ((column_cells + 2) * 9)
   475 000003A9 0F84BB060000            		je .endp
   476 000003AF 4981F8[7E040000]        		cmp r8, board + 90 + ((column_cells + 2) * 9)
   477 000003B6 0F84AE060000            		je .endp
   478 000003BC 4981F8[7F040000]        		cmp r8, board + 91 + ((column_cells + 2) * 9)
   479 000003C3 0F84A1060000            		je .endp
   480 000003C9 4981F8[80040000]        		cmp r8, board + 92 + ((column_cells + 2) * 9)
   481 000003D0 0F8494060000            		je .endp
   482 000003D6 4981F8[81040000]        		cmp r8, board + 93 + ((column_cells + 2) * 9)
   483 000003DD 0F8487060000            		je .endp
   484 000003E3 4981F8[82040000]        		cmp r8, board + 94 + ((column_cells + 2) * 9)
   485 000003EA 0F847A060000            		je .endp
   486 000003F0 4981F8[83040000]        		cmp r8, board + 95 + ((column_cells + 2) * 9)
   487 000003F7 0F846D060000            		je .endp
   488 000003FD 4981F8[84040000]        		cmp r8, board + 96 + ((column_cells + 2) * 9)
   489 00000404 0F8460060000            		je .endp
   490 0000040A 4981F8[85040000]        		cmp r8, board + 97 + ((column_cells + 2) * 9)
   491 00000411 0F8453060000            		je .endp
   492 00000417 4981F8[86040000]        		cmp r8, board + 98 + ((column_cells + 2) * 9)
   493 0000041E 0F8446060000            		je .endp
   494 00000424 4981F8[87040000]        		cmp r8, board + 99 + ((column_cells + 2) * 9)
   495 0000042B 0F8439060000            		je .endp
   496                                  
   497 00000431 4981F8[AA060000]        		cmp r8, board + 86 + ((column_cells + 2) * 14)
   498 00000438 0F842C060000            		je .endp
   499 0000043E 4981F8[AB060000]        		cmp r8, board + 87 + ((column_cells + 2) * 14)
   500 00000445 0F841F060000            		je .endp
   501 0000044B 4981F8[AC060000]        		cmp r8, board + 88 + ((column_cells + 2) * 14)
   502 00000452 0F8412060000            		je .endp
   503 00000458 4981F8[AD060000]        		cmp r8, board + 89 + ((column_cells + 2) * 14)
   504 0000045F 0F8405060000            		je .endp
   505 00000465 4981F8[AE060000]        		cmp r8, board + 90 + ((column_cells + 2) * 14)
   506 0000046C 0F84F8050000            		je .endp
   507 00000472 4981F8[AF060000]        		cmp r8, board + 91 + ((column_cells + 2) * 14)
   508 00000479 0F84EB050000            		je .endp
   509 0000047F 4981F8[B0060000]        		cmp r8, board + 92 + ((column_cells + 2) * 14)
   510 00000486 0F84DE050000            		je .endp
   511 0000048C 4981F8[B1060000]        		cmp r8, board + 93 + ((column_cells + 2) * 14)
   512 00000493 0F84D1050000            		je .endp
   513 00000499 4981F8[B2060000]        		cmp r8, board + 94 + ((column_cells + 2) * 14)
   514 000004A0 0F84C4050000            		je .endp
   515 000004A6 4981F8[B3060000]        		cmp r8, board + 95 + ((column_cells + 2) * 14)
   516 000004AD 0F84B7050000            		je .endp
   517 000004B3 4981F8[B4060000]        		cmp r8, board + 96 + ((column_cells + 2) * 14)
   518 000004BA 0F84AA050000            		je .endp
   519 000004C0 4981F8[B5060000]        		cmp r8, board + 97 + ((column_cells + 2) * 14)
   520 000004C7 0F849D050000            		je .endp
   521 000004CD 4981F8[B6060000]        		cmp r8, board + 98 + ((column_cells + 2) * 14)
   522 000004D4 0F8490050000            		je .endp
   523 000004DA 4981F8[B7060000]        		cmp r8, board + 99 + ((column_cells + 2) * 14)
   524 000004E1 0F8483050000            		je .endp
   525 000004E7 4981F8[B8060000]        		cmp r8, board + 100 + ((column_cells + 2) * 14)
   526 000004EE 0F8476050000            		je .endp
   527 000004F4 4981F8[B9060000]        		cmp r8, board + 101 + ((column_cells + 2) * 14)
   528 000004FB 0F8469050000            		je .endp
   529 00000501 4981F8[BA060000]        		cmp r8, board + 102 + ((column_cells + 2) * 14)
   530 00000508 0F845C050000            		je .endp
   531 0000050E 4981F8[BB060000]        		cmp r8, board + 103 + ((column_cells + 2) * 14)
   532 00000515 0F844F050000            		je .endp
   533 0000051B 4981F8[BC060000]        		cmp r8, board + 104 + ((column_cells + 2) * 14)
   534 00000522 0F8442050000            		je .endp
   535 00000528 4981F8[BD060000]        		cmp r8, board + 105 + ((column_cells + 2) * 14)
   536 0000052F 0F8435050000            		je .endp
   537 00000535 4981F8[BE060000]        		cmp r8, board + 106 + ((column_cells + 2) * 14)
   538 0000053C 0F8428050000            		je .endp
   539 00000542 4981F8[BF060000]        		cmp r8, board + 107 + ((column_cells + 2) * 14)
   540 00000549 0F841B050000            		je .endp
   541 0000054F 4981F8[C0060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   542 00000556 0F840E050000            		je .endp
   543                                  
   544 0000055C 4981F8[1D080000]        		cmp r8, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   545 00000563 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   546                                  
   547 00000565 4981F8[78080000]        		cmp r8, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   548 0000056C 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   549                                  
   550                                  		; Aquí entra si 81 < r8 < 100
   551 0000056E EB1B                    		jmp .continuar    
   552                                  
   553                                  		.fuera_rango:
   554 00000570 4C8B0D(000A0000)        			mov r9, [pallet_size]
   555 00000577 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   556 0000057B 4983E870                			sub r8, 112						; Mover una fila arriba (restar 320)
   557 0000057F 4C8905(F8090000)        			mov [pallet_position], r8			; Actualizar posición
   558                                  
   559 00000586 E9DF040000              		jmp .endp
   560                                  
   561                                  		.continuar:
   562 0000058B E9DA040000              			jmp .endp
   563                                  
   564                                  	.move_down:
   565                                  
   566 00000590 4C8B05(F8090000)        		mov r8, [pallet_position]
   567                                  
   568 00000597 4981F8[EA040000]        		cmp r8, board + 86 + ((column_cells + 2) * 10)  
   569 0000059E 0F84C6040000            		je .endp
   570 000005A4 4981F8[EB040000]        		cmp r8, board + 87 + ((column_cells + 2) * 10)  
   571 000005AB 0F84B9040000            		je .endp
   572 000005B1 4981F8[EC040000]        		cmp r8, board + 88 + ((column_cells + 2) * 10)  
   573 000005B8 0F84AC040000            		je .endp
   574 000005BE 4981F8[ED040000]        		cmp r8, board + 89 + ((column_cells + 2) * 10)  
   575 000005C5 0F849F040000            		je .endp
   576 000005CB 4981F8[EE040000]        		cmp r8, board + 90 + ((column_cells + 2) * 10)  
   577 000005D2 0F8492040000            		je .endp
   578 000005D8 4981F8[EF040000]        		cmp r8, board + 91 + ((column_cells + 2) * 10)  
   579 000005DF 0F8485040000            		je .endp
   580 000005E5 4981F8[F0040000]        		cmp r8, board + 92 + ((column_cells + 2) * 10)  
   581 000005EC 0F8478040000            		je .endp
   582 000005F2 4981F8[F1040000]        		cmp r8, board + 93 + ((column_cells + 2) * 10)  
   583 000005F9 0F846B040000            		je .endp
   584 000005FF 4981F8[F2040000]        		cmp r8, board + 94 + ((column_cells + 2) * 10)  
   585 00000606 0F845E040000            		je .endp
   586 0000060C 4981F8[F3040000]        		cmp r8, board + 95 + ((column_cells + 2) * 10)  
   587 00000613 0F8451040000            		je .endp
   588 00000619 4981F8[F4040000]        		cmp r8, board + 96 + ((column_cells + 2) * 10)  
   589 00000620 0F8444040000            		je .endp
   590 00000626 4981F8[F5040000]        		cmp r8, board + 97 + ((column_cells + 2) * 10)  
   591 0000062D 0F8437040000            		je .endp
   592 00000633 4981F8[F6040000]        		cmp r8, board + 98 + ((column_cells + 2) * 10)  
   593 0000063A 0F842A040000            		je .endp
   594 00000640 4981F8[F7040000]        		cmp r8, board + 99 + ((column_cells + 2) * 10)  
   595 00000647 0F841D040000            		je .endp
   596 0000064D 4981F8[F8040000]        		cmp r8, board + 100 + ((column_cells + 2) * 10)  
   597 00000654 0F8410040000            		je .endp
   598 0000065A 4981F8[F9040000]        		cmp r8, board + 101 + ((column_cells + 2) * 10)  
   599 00000661 0F8403040000            		je .endp
   600 00000667 4981F8[FA040000]        		cmp r8, board + 102 + ((column_cells + 2) * 10)  
   601 0000066E 0F84F6030000            		je .endp
   602 00000674 4981F8[FB040000]        		cmp r8, board + 103 + ((column_cells + 2) * 10)  
   603 0000067B 0F84E9030000            		je .endp
   604 00000681 4981F8[FC040000]        		cmp r8, board + 104 + ((column_cells + 2) * 10)  
   605 00000688 0F84DC030000            		je .endp
   606 0000068E 4981F8[FD040000]        		cmp r8, board + 105 + ((column_cells + 2) * 10)  
   607 00000695 0F84CF030000            		je .endp
   608 0000069B 4981F8[FE040000]        		cmp r8, board + 106 + ((column_cells + 2) * 10)  
   609 000006A2 0F84C2030000            		je .endp
   610 000006A8 4981F8[FF040000]        		cmp r8, board + 107 + ((column_cells + 2) * 10)  
   611 000006AF 0F84B5030000            		je .endp
   612 000006B5 4981F8[00050000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)  
   613 000006BC 0F84A8030000            		je .endp
   614                                  
   615 000006C2 4981F8[16070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   616 000006C9 0F849B030000            		je .endp
   617 000006CF 4981F8[17070000]        		cmp r8, board + 83 + ((column_cells + 2) * 15)
   618 000006D6 0F848E030000            		je .endp
   619 000006DC 4981F8[18070000]        		cmp r8, board + 84 + ((column_cells + 2) * 15)
   620 000006E3 0F8481030000            		je .endp
   621 000006E9 4981F8[19070000]        		cmp r8, board + 85 + ((column_cells + 2) * 15)
   622 000006F0 0F8474030000            		je .endp
   623 000006F6 4981F8[1A070000]        		cmp r8, board + 86 + ((column_cells + 2) * 15)
   624 000006FD 0F8467030000            		je .endp
   625 00000703 4981F8[1B070000]        		cmp r8, board + 87 + ((column_cells + 2) * 15)
   626 0000070A 0F845A030000            		je .endp
   627 00000710 4981F8[1C070000]        		cmp r8, board + 88 + ((column_cells + 2) * 15)
   628 00000717 0F844D030000            		je .endp
   629 0000071D 4981F8[1D070000]        		cmp r8, board + 89 + ((column_cells + 2) * 15)
   630 00000724 0F8440030000            		je .endp
   631 0000072A 4981F8[1E070000]        		cmp r8, board + 90 + ((column_cells + 2) * 15)
   632 00000731 0F8433030000            		je .endp
   633 00000737 4981F8[1F070000]        		cmp r8, board + 91 + ((column_cells + 2) * 15)
   634 0000073E 0F8426030000            		je .endp
   635 00000744 4981F8[20070000]        		cmp r8, board + 92 + ((column_cells + 2) * 15)
   636 0000074B 0F8419030000            		je .endp
   637 00000751 4981F8[21070000]        		cmp r8, board + 93 + ((column_cells + 2) * 15)
   638 00000758 0F840C030000            		je .endp
   639 0000075E 4981F8[22070000]        		cmp r8, board + 94 + ((column_cells + 2) * 15)
   640 00000765 0F84FF020000            		je .endp
   641 0000076B 4981F8[23070000]        		cmp r8, board + 95 + ((column_cells + 2) * 15)
   642 00000772 0F84F2020000            		je .endp
   643 00000778 4981F8[24070000]        		cmp r8, board + 96 + ((column_cells + 2) * 15)
   644 0000077F 0F84E5020000            		je .endp
   645 00000785 4981F8[25070000]        		cmp r8, board + 97 + ((column_cells + 2) * 15)
   646 0000078C 0F84D8020000            		je .endp
   647 00000792 4981F8[26070000]        		cmp r8, board + 98 + ((column_cells + 2) * 15)
   648 00000799 0F84CB020000            		je .endp
   649 0000079F 4981F8[27070000]        		cmp r8, board + 99 + ((column_cells + 2) * 15)
   650 000007A6 0F84BE020000            		je .endp
   651                                  		
   652 000007AC 4981F8[F4080000]        		cmp r8, board + ((column_cells + 2) * 20)
   653 000007B3 0F8FB1020000            		jg .endp
   654                                  
   655                                  
   656 000007B9 4981F8[DD020000]        		cmp r8, board + 9 + ((column_cells + 2) * 6)  
   657 000007C0 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
   658                                  
   659 000007C2 4981F8[38030000]        		cmp r8, board + 100 + ((column_cells + 2) * 6) 
   660 000007C9 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
   661                                  
   662                                  		
   663                                  
   664                                  		; Aquí entra si 81 < r8 < 100
   665 000007CB E9BBFDFFFF              		jmp .continuar    
   666                                  
   667                                  		.fuera_rango_down:
   668 000007D0 4C8B0D(000A0000)        			mov r9, [pallet_size]
   669 000007D7 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   670 000007DB 4983C070                			add r8, 112							; Mover una fila abajo (sumar 320)
   671 000007DF 4C8905(F8090000)        			mov [pallet_position], r8			; Actualizar posición
   672                                  
   673                                  
   674 000007E6 E97F020000              		jmp .endp	
   675                                  
   676                                  		.continuar_down:
   677 000007EB E97A020000              			jmp .endp
   678                                  
   679                                  
   680                                  
   681                                  		
   682                                  		
   683                                  
   684                                  	.move_left:
   685                                  
   686 000007F0 4C8B2D(400A0000)        		mov r13, [colj]
   687 000007F7 4983FD01                		cmp r13, 1
   688 000007FB 0F8469020000            		je .endp
   689                                  
   690 00000801 4C8B05(F8090000)        		mov r8, [pallet_position]
   691                                  
   692                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   693 00000808 4981F8[F5010000]        		cmp r8, board + 1 + ((column_cells + 2) * 4)
   694 0000080F 0F8455020000            		je .endp 
   695                                  
   696 00000815 4981F8[65020000]        		cmp r8, board + 1 + ((column_cells + 2) * 5)
   697 0000081C 0F8448020000            		je .endp 
   698                                  
   699 00000822 4981F8[D5020000]        		cmp r8, board + 1 + ((column_cells + 2) * 6)
   700 00000829 0F843B020000            		je .endp 
   701                                  
   702 0000082F 4981F8[45030000]        		cmp r8, board + 1 + ((column_cells + 2) * 7)
   703 00000836 0F842E020000            		je .endp 
   704                                  
   705 0000083C 4981F8[B5030000]        		cmp r8, board + 1 + ((column_cells + 2) * 8)
   706 00000843 0F8421020000            		je .endp 
   707                                  
   708 00000849 4981F8[25040000]        		cmp r8, board + 1 + ((column_cells + 2) * 9)
   709 00000850 0F8414020000            		je .endp 
   710                                  	
   711 00000856 4981F8[95040000]        		cmp r8, board + 1 + ((column_cells + 2) * 10)
   712 0000085D 0F8407020000            		je .endp 
   713                                  
   714 00000863 4981F8[05050000]        		cmp r8, board + 1 + ((column_cells + 2) * 11)
   715 0000086A 0F84FA010000            		je .endp 
   716                                  
   717 00000870 4981F8[75050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   718 00000877 0F84ED010000            		je .endp 
   719                                  
   720 0000087D 4981F8[75050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   721 00000884 0F84E0010000            		je .endp 
   722                                  
   723 0000088A 4981F8[E5050000]        		cmp r8, board + 1 + ((column_cells + 2) * 13)
   724 00000891 0F84D3010000            		je .endp 
   725                                  
   726 00000897 4981F8[55060000]        		cmp r8, board + 1 + ((column_cells + 2) * 14)
   727 0000089E 0F84C6010000            		je .endp 
   728                                  
   729 000008A4 4981F8[C5060000]        		cmp r8, board + 1 + ((column_cells + 2) * 15)
   730 000008AB 0F84B9010000            		je .endp 
   731                                  
   732 000008B1 4981F8[35070000]        		cmp r8, board + 1 + ((column_cells + 2) * 16)
   733 000008B8 0F84AC010000            		je .endp 
   734                                  
   735 000008BE 4981F8[A5070000]        		cmp r8, board + 1 + ((column_cells + 2) * 17)
   736 000008C5 0F849F010000            		je .endp 
   737                                  
   738 000008CB 4981F8[15080000]        		cmp r8, board + 1 + ((column_cells + 2) * 18)
   739 000008D2 0F8492010000            		je .endp 
   740                                  
   741 000008D8 4981F8[85080000]        		cmp r8, board + 1 + ((column_cells + 2) * 19)
   742 000008DF 0F8485010000            		je .endp
   743                                  
   744 000008E5 4981F8[F5080000]        		cmp r8, board + 1 + ((column_cells + 2) * 20)
   745 000008EC 0F8478010000            		je .endp
   746                                  
   747 000008F2 4981F8[A8030000]        		cmp r8, board + 100 + ((column_cells + 2) * 7)
   748 000008F9 0F846B010000            		je .endp
   749                                  
   750 000008FF 4981F8[18040000]        		cmp r8, board + 100 + ((column_cells + 2) * 8)
   751 00000906 0F845E010000            		je .endp
   752                                  
   753 0000090C 4981F8[76040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   754 00000913 0F8451010000            		je .endp
   755                                  
   756                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
   757 00000919 4981F8[E6040000]        		cmp r8, board + 82 + ((column_cells + 2) * 10)
   758 00000920 0F8444010000            		je .endp
   759                                  
   760 00000926 4981F8[56050000]        		cmp r8, board + 82 + ((column_cells + 2) * 11)
   761 0000092D 0F8437010000            		je .endp
   762                                  
   763 00000933 4981F8[C6050000]        		cmp r8, board + 82 + ((column_cells + 2) * 12)
   764 0000093A 0F842A010000            		je .endp
   765                                  
   766 00000940 4981F8[36060000]        		cmp r8, board + 82 + ((column_cells + 2) * 13)
   767 00000947 0F841D010000            		je .endp
   768                                  
   769 0000094D 4981F8[A6060000]        		cmp r8, board + 82 + ((column_cells + 2) * 14)
   770 00000954 0F8410010000            		je .endp
   771                                  
   772 0000095A 4981F8[16070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   773 00000961 0F8403010000            		je .endp
   774                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
   775                                  
   776 00000967 4981F8[98070000]        		cmp r8, board + 100 + ((column_cells + 2) * 16)
   777 0000096E 0F84F6000000            		je .endp
   778                                  
   779 00000974 4981F8[08080000]        		cmp r8, board + 100 + ((column_cells + 2) * 17)
   780 0000097B 0F84E9000000            		je .endp
   781                                  
   782 00000981 4C8B0D(000A0000)        		mov r9, [pallet_size]
   783 00000988 41C60020                		mov byte [r8], char_space	; Limpiar el último carácter del palet
   784 0000098C 49FFC8                  		dec r8								; Mover la posición del palet una unidad a la izquierda
   785 0000098F 4C8905(F8090000)        		mov [pallet_position], r8			; Actualizar la posición del palet en la memoria
   786                                  
   787 00000996 E9CF000000              		jmp .endp	
   788                                  							 
   789                                  	.move_right:
   790                                  
   791 0000099B 4C8B2D(400A0000)        		mov r13, [colj]
   792 000009A2 4983FD02                		cmp r13, 2
   793 000009A6 0F84BE000000            		je .endp
   794                                  
   795 000009AC 4C8B05(F8090000)        		mov r8, [pallet_position]
   796                                  
   797                                  		
   798 000009B3 4981F8[60020000]        		cmp r8, board + 108 + ((column_cells + 2) * 4)
   799 000009BA 0F84AA000000            		je .endp
   800                                  
   801 000009C0 4981F8[D0020000]        		cmp r8, board + 108 + ((column_cells + 2) * 5)
   802 000009C7 0F849D000000            		je .endp
   803                                  
   804 000009CD 4981F8[40030000]        		cmp r8, board + 108 + ((column_cells + 2) * 6)
   805 000009D4 0F8490000000            		je .endp
   806                                  
   807 000009DA 4981F8[B0030000]        		cmp r8, board + 108 + ((column_cells + 2) * 7)
   808 000009E1 0F8483000000            		je .endp
   809                                  
   810 000009E7 4981F8[20040000]        		cmp r8, board + 108 + ((column_cells + 2) * 8)
   811 000009EE 747A                    		je .endp
   812                                  
   813 000009F0 4981F8[90040000]        		cmp r8, board + 108 + ((column_cells + 2) * 9)
   814 000009F7 7471                    		je .endp
   815                                  
   816 000009F9 4981F8[00050000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)
   817 00000A00 7468                    		je .endp
   818                                  
   819 00000A02 4981F8[59050000]        		cmp r8, board + 85 + ((column_cells + 2) * 11)
   820 00000A09 745F                    		je .endp
   821                                  
   822 00000A0B 4981F8[C9050000]        		cmp r8, board + 85 + ((column_cells + 2) * 12)
   823 00000A12 7456                    		je .endp
   824                                  
   825 00000A14 4981F8[39060000]        		cmp r8, board + 85 + ((column_cells + 2) * 13)
   826 00000A1B 744D                    		je .endp
   827                                  
   828 00000A1D 4981F8[C0060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   829 00000A24 7444                    		je .endp
   830                                  
   831 00000A26 4981F8[30070000]        		cmp r8, board + 108 + ((column_cells + 2) * 15)
   832 00000A2D 743B                    		je .endp
   833                                  
   834 00000A2F 4981F8[A0070000]        		cmp r8, board + 108 + ((column_cells + 2) * 16)
   835 00000A36 7432                    		je .endp
   836                                  
   837 00000A38 4981F8[10080000]        		cmp r8, board + 108 + ((column_cells + 2) * 17)
   838 00000A3F 7429                    		je .endp
   839                                  
   840 00000A41 4981F8[80080000]        		cmp r8, board + 108 + ((column_cells + 2) * 18)
   841 00000A48 7420                    		je .endp
   842                                  
   843 00000A4A 4981F8[F0080000]        		cmp r8, board + 108 + ((column_cells + 2) * 19)
   844 00000A51 7417                    		je .endp
   845                                  
   846 00000A53 4981F8[60090000]        		cmp r8, board + 108 + ((column_cells + 2) * 20)
   847 00000A5A 740E                    		je .endp
   848                                  
   849 00000A5C 41C60020                		mov byte [r8], char_space
   850 00000A60 49FFC0                  		inc r8
   851 00000A63 4C8905(F8090000)        		mov [pallet_position], r8
   852                                   
   853                                  
   854                                  
   855                                  	.endp:
   856 00000A6A 48C705(400A0000)00-     		mov qword [colj], 0
   856 00000A72 000000             
   857                                  
   858 00000A75 58                      	pop rax
   859 00000A76 59                      	pop rcx
   860                                  	 
   861 00000A77 C3                      	ret
   862                                  
   863                                  ; Primera definición
   864                                  print_bot:
   865 00000A78 4C8B0D(080A0000)            mov r9, [bot_position]
   866                                      .write_pallet_bot1:
   867 00000A7F 41C60162                        mov byte [r9], char_bot
   868 00000A83 C3                          ret
   869                                  
   870                                  ; Segunda definición
   871                                  print_bot_position:
   872 00000A84 4C8B15(080A0000)            mov r10, [bot_position]
   873                                      .write_pallet_bot2:
   874 00000A8B 41C60262                        mov byte [r10], char_bot
   875 00000A8F C3                          ret
   876                                  
   877                                  ; Funcion generar un numero aleatorio entre 100 y 150 para la velocidad 
   878                                  generate_random:
   879                                      ; Abrir /dev/urandom para leer un byte aleatorio
   880 00000A90 57                      	push rdi
   881 00000A91 56                      	push rsi
   882 00000A92 52                      	push rdx
   883 00000A93 50                      	push rax
   884                                  
   885 00000A94 B800000000                  mov rax, 0                ; sys_read
   886 00000A99 48BF-                       mov rdi, urandom          ; Descriptor de archivo para /dev/urandom
   886 00000A9B [0000000000000000] 
   887 00000AA3 48BE-                       mov rsi, random_value     ; Dirección donde se guarda el byte aleatorio
   887 00000AA5 [0E00000000000000] 
   888 00000AAD BA01000000                  mov rdx, 1                ; Leer 1 byte
   889 00000AB2 0F05                        syscall                   ; Llamada al sistema para leer
   890                                  
   891                                      ; Reducir el rango del número aleatorio a 0-49
   892 00000AB4 480FB605(0E000000)          movzx rax, byte [random_value]  ; Cargar el byte aleatorio en rax
   893 00000ABC 4831D2                      xor rdx, rdx              ; Limpiar rdx para la division
   894 00000ABF B932000000                  mov rcx, 50               ; Divisor (rango deseado: 50 numeros)
   895 00000AC4 48F7F1                      div rcx                   ; rax = rax / rcx, rdx = rax % rcx
   896                                      ; Ahora rdx contiene el número aleatorio en el rango 0-49
   897                                  
   898                                      ; Ajustar el rango base a 100-150
   899 00000AC7 4883C264                    add rdx, 100 ; suma 100 para obtener el rango deseado
   900                                  
   901                                      ; Guardar el resultado en una variable o registro
   902 00000ACB 488915(21000000)            mov [random_result], rdx  ; Guardar el número aleatorio generado
   903                                  
   904 00000AD2 5F                      	pop rdi
   905 00000AD3 5E                      	pop rsi
   906 00000AD4 5A                      	pop rdx
   907 00000AD5 58                      	pop rax
   908                                  
   909 00000AD6 C3                          ret
   910                                  
   911                                  ; Función: set_bot_speed
   912                                  ; Establece la velocidad del bot de manera aleatoria
   913                                  set_bot_speed:
   914 00000AD7 52                      	push rdx
   915                                  	; Llamar a la funcion para generar numero random
   916 00000AD8 E8B3FFFFFF              	call generate_random
   917                                  	; Guardar el numero aleatorio en la variable de velocidad del bot
   918 00000ADD 488915(29000000)        	mov [bot_speed], rdx ; Guardar el número aleatorio generado en bot_speed
   919                                  
   920 00000AE4 5A                      	pop rdx
   921 00000AE5 C3                      	ret
   922                                  
   923                                  
   924                                  ; Función: move_bot
   925                                  ; Mueve el bot en la dirección definida
   926                                  ; Return:
   927                                  ;   void
   928                                  move_bot:
   929                                  
   930 00000AE6 50                      	push rax
   931 00000AE7 51                      	push rcx
   932                                  
   933 00000AE8 4C8B1D(400A0000)        	mov r11, [colj]              ; Cargar el valor de la variable `colj` en r11
   934 00000AEF 4983FB01                	cmp r11, 1                   ; Comparar el valor de `colj` con 1
   935 00000AF3 0F84D5000000            	je .endp                     ; Si `colj` es igual a 1, saltar al final de la función
   936                                      
   937 00000AF9 4883FF01                	cmp rdi, right_direction
   938 00000AFD 7400                    	je .move_right
   939                                  
   940                                  							 
   941                                  	.move_right:
   942                                  
   943 00000AFF 4C8B1D(400A0000)        		mov r11, [colj]
   944 00000B06 4983FB02                		cmp r11, 2
   945 00000B0A 0F84BE000000            		je .endp
   946                                  
   947 00000B10 4C8B15(080A0000)        		mov r10, [bot_position]
   948                                  
   949                                  		
   950 00000B17 4981FA[60020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
   951 00000B1E 0F84AA000000            		je .endp
   952                                  
   953 00000B24 4981FA[D0020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
   954 00000B2B 0F849D000000            		je .endp
   955                                  
   956 00000B31 4981FA[40030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
   957 00000B38 0F8490000000            		je .endp
   958                                  
   959 00000B3E 4981FA[B0030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
   960 00000B45 0F8483000000            		je .endp
   961                                  
   962 00000B4B 4981FA[20040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
   963 00000B52 747A                    		je .endp
   964                                  
   965 00000B54 4981FA[90040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
   966 00000B5B 7471                    		je .endp
   967                                  
   968 00000B5D 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
   969 00000B64 7468                    		je .endp
   970                                  
   971 00000B66 4981FA[59050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
   972 00000B6D 745F                    		je .endp
   973                                  
   974 00000B6F 4981FA[C9050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
   975 00000B76 7456                    		je .endp
   976                                  
   977 00000B78 4981FA[39060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
   978 00000B7F 744D                    		je .endp
   979                                  
   980 00000B81 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
   981 00000B88 7444                    		je .endp
   982                                  
   983 00000B8A 4981FA[30070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
   984 00000B91 743B                    		je .endp
   985                                  
   986 00000B93 4981FA[A0070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
   987 00000B9A 7432                    		je .endp
   988                                  
   989 00000B9C 4981FA[10080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
   990 00000BA3 7429                    		je .endp
   991                                  
   992 00000BA5 4981FA[80080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
   993 00000BAC 7420                    		je .endp
   994                                  
   995 00000BAE 4981FA[F0080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
   996 00000BB5 7417                    		je .endp
   997                                  
   998 00000BB7 4981FA[60090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
   999 00000BBE 740E                    		je .endp
  1000                                  
  1001 00000BC0 41C60220                		mov byte [r10], char_space
  1002 00000BC4 49FFC2                  		inc r10
  1003 00000BC7 4C8915(080A0000)        		mov [bot_position], r10
  1004                                   
  1005                                  	.endp:
  1006 00000BCE 48C705(400A0000)00-     		mov qword [colj], 0
  1006 00000BD6 000000             
  1007                                  
  1008 00000BD9 58                      	pop rax
  1009 00000BDA 59                      	pop rcx
  1010                                  	 
  1011 00000BDB C3                      	ret
  1012                                  
  1013                                  ; Funcion: print_player2
  1014                                  ; Imprime al Jugador 2 en su posición actual
  1015                                  print_player2:
  1016 00000BDC 4C8B1D(100A0000)        	mov r11, [player2_position] 
  1017                                  	.write_pallet:
  1018 00000BE3 41C6034A                		mov byte [r11], char_player2	 
  1019 00000BE7 C3                      	ret
  1020                                  
  1021                                  ; Funcion: move_player2
  1022                                  ; Mueve al Jugador 2 en la dirección especificada
  1023                                  ; Argumentos:
  1024                                  ;   rdi: dirección (up_direction, down_direction, left_direction, right_direction)
  1025                                  move_player2:
  1026 00000BE8 50                          push rax
  1027 00000BE9 51                          push rcx
  1028                                  
  1029 00000BEA 4C8B25(400A0000)        	mov r12, [colj]
  1030 00000BF1 4983FC01                	cmp r12, 1
  1031 00000BF5 0F845B070000            	je .endp
  1032                                  	  
  1033 00000BFB 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
  1034 00000BFF 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
  1035                                  
  1036 00000C01 4883FF03                	cmp rdi, down_direction
  1037 00000C05 0F8471020000            	je .move_down
  1038                                  
  1039 00000C0B 4883FF01                	cmp rdi, right_direction
  1040 00000C0F 0F8472060000            	je .move_right
  1041                                  
  1042 00000C15 4883FFFF                	cmp rdi, left_direction
  1043 00000C19 0F84BD040000            	je .move_left
  1044                                  
  1045                                  	.move_up:
  1046 00000C1F 4C8B15(100A0000)        		mov r10, [player2_position]
  1047                                  
  1048                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1049 00000C26 4981FA[61020000]        		cmp r10, board + 109 + ((column_cells + 2) * 4)
  1050 00000C2D 0F8C23070000            		jl .endp
  1051                                  
  1052 00000C33 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1053 00000C3A 0F8416070000            		je .endp 
  1054 00000C40 4981FA[77040000]        		cmp r10, board + 83 + ((column_cells + 2) * 9)
  1055 00000C47 0F8409070000            		je .endp
  1056 00000C4D 4981FA[78040000]        		cmp r10, board + 84 + ((column_cells + 2) * 9)
  1057 00000C54 0F84FC060000            		je .endp
  1058 00000C5A 4981FA[79040000]        		cmp r10, board + 85 + ((column_cells + 2) * 9)
  1059 00000C61 0F84EF060000            		je .endp
  1060 00000C67 4981FA[7A040000]        		cmp r10, board + 86 + ((column_cells + 2) * 9)
  1061 00000C6E 0F84E2060000            		je .endp
  1062 00000C74 4981FA[7B040000]        		cmp r10, board + 87 + ((column_cells + 2) * 9)
  1063 00000C7B 0F84D5060000            		je .endp
  1064 00000C81 4981FA[7C040000]        		cmp r10, board + 88 + ((column_cells + 2) * 9)
  1065 00000C88 0F84C8060000            		je .endp
  1066 00000C8E 4981FA[7D040000]        		cmp r10, board + 89 + ((column_cells + 2) * 9)
  1067 00000C95 0F84BB060000            		je .endp
  1068 00000C9B 4981FA[7E040000]        		cmp r10, board + 90 + ((column_cells + 2) * 9)
  1069 00000CA2 0F84AE060000            		je .endp
  1070 00000CA8 4981FA[7F040000]        		cmp r10, board + 91 + ((column_cells + 2) * 9)
  1071 00000CAF 0F84A1060000            		je .endp
  1072 00000CB5 4981FA[80040000]        		cmp r10, board + 92 + ((column_cells + 2) * 9)
  1073 00000CBC 0F8494060000            		je .endp
  1074 00000CC2 4981FA[81040000]        		cmp r10, board + 93 + ((column_cells + 2) * 9)
  1075 00000CC9 0F8487060000            		je .endp
  1076 00000CCF 4981FA[82040000]        		cmp r10, board + 94 + ((column_cells + 2) * 9)
  1077 00000CD6 0F847A060000            		je .endp
  1078 00000CDC 4981FA[83040000]        		cmp r10, board + 95 + ((column_cells + 2) * 9)
  1079 00000CE3 0F846D060000            		je .endp
  1080 00000CE9 4981FA[84040000]        		cmp r10, board + 96 + ((column_cells + 2) * 9)
  1081 00000CF0 0F8460060000            		je .endp
  1082 00000CF6 4981FA[85040000]        		cmp r10, board + 97 + ((column_cells + 2) * 9)
  1083 00000CFD 0F8453060000            		je .endp
  1084 00000D03 4981FA[86040000]        		cmp r10, board + 98 + ((column_cells + 2) * 9)
  1085 00000D0A 0F8446060000            		je .endp
  1086 00000D10 4981FA[87040000]        		cmp r10, board + 99 + ((column_cells + 2) * 9)
  1087 00000D17 0F8439060000            		je .endp
  1088                                  
  1089 00000D1D 4981FA[AA060000]        		cmp r10, board + 86 + ((column_cells + 2) * 14)
  1090 00000D24 0F842C060000            		je .endp
  1091 00000D2A 4981FA[AB060000]        		cmp r10, board + 87 + ((column_cells + 2) * 14)
  1092 00000D31 0F841F060000            		je .endp
  1093 00000D37 4981FA[AC060000]        		cmp r10, board + 88 + ((column_cells + 2) * 14)
  1094 00000D3E 0F8412060000            		je .endp
  1095 00000D44 4981FA[AD060000]        		cmp r10, board + 89 + ((column_cells + 2) * 14)
  1096 00000D4B 0F8405060000            		je .endp
  1097 00000D51 4981FA[AE060000]        		cmp r10, board + 90 + ((column_cells + 2) * 14)
  1098 00000D58 0F84F8050000            		je .endp
  1099 00000D5E 4981FA[AF060000]        		cmp r10, board + 91 + ((column_cells + 2) * 14)
  1100 00000D65 0F84EB050000            		je .endp
  1101 00000D6B 4981FA[B0060000]        		cmp r10, board + 92 + ((column_cells + 2) * 14)
  1102 00000D72 0F84DE050000            		je .endp
  1103 00000D78 4981FA[B1060000]        		cmp r10, board + 93 + ((column_cells + 2) * 14)
  1104 00000D7F 0F84D1050000            		je .endp
  1105 00000D85 4981FA[B2060000]        		cmp r10, board + 94 + ((column_cells + 2) * 14)
  1106 00000D8C 0F84C4050000            		je .endp
  1107 00000D92 4981FA[B3060000]        		cmp r10, board + 95 + ((column_cells + 2) * 14)
  1108 00000D99 0F84B7050000            		je .endp
  1109 00000D9F 4981FA[B4060000]        		cmp r10, board + 96 + ((column_cells + 2) * 14)
  1110 00000DA6 0F84AA050000            		je .endp
  1111 00000DAC 4981FA[B5060000]        		cmp r10, board + 97 + ((column_cells + 2) * 14)
  1112 00000DB3 0F849D050000            		je .endp
  1113 00000DB9 4981FA[B6060000]        		cmp r10, board + 98 + ((column_cells + 2) * 14)
  1114 00000DC0 0F8490050000            		je .endp
  1115 00000DC6 4981FA[B7060000]        		cmp r10, board + 99 + ((column_cells + 2) * 14)
  1116 00000DCD 0F8483050000            		je .endp
  1117 00000DD3 4981FA[B8060000]        		cmp r10, board + 100 + ((column_cells + 2) * 14)
  1118 00000DDA 0F8476050000            		je .endp
  1119 00000DE0 4981FA[B9060000]        		cmp r10, board + 101 + ((column_cells + 2) * 14)
  1120 00000DE7 0F8469050000            		je .endp
  1121 00000DED 4981FA[BA060000]        		cmp r10, board + 102 + ((column_cells + 2) * 14)
  1122 00000DF4 0F845C050000            		je .endp
  1123 00000DFA 4981FA[BB060000]        		cmp r10, board + 103 + ((column_cells + 2) * 14)
  1124 00000E01 0F844F050000            		je .endp
  1125 00000E07 4981FA[BC060000]        		cmp r10, board + 104 + ((column_cells + 2) * 14)
  1126 00000E0E 0F8442050000            		je .endp
  1127 00000E14 4981FA[BD060000]        		cmp r10, board + 105 + ((column_cells + 2) * 14)
  1128 00000E1B 0F8435050000            		je .endp
  1129 00000E21 4981FA[BE060000]        		cmp r10, board + 106 + ((column_cells + 2) * 14)
  1130 00000E28 0F8428050000            		je .endp
  1131 00000E2E 4981FA[BF060000]        		cmp r10, board + 107 + ((column_cells + 2) * 14)
  1132 00000E35 0F841B050000            		je .endp
  1133 00000E3B 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1134 00000E42 0F840E050000            		je .endp
  1135                                  
  1136 00000E48 4981FA[1D080000]        		cmp r10, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
  1137 00000E4F 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
  1138                                  
  1139 00000E51 4981FA[78080000]        		cmp r10, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
  1140 00000E58 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
  1141                                  
  1142                                  		; Aquí entra si 81 < r10 < 100
  1143 00000E5A EB1B                    		jmp .continuar    
  1144                                  
  1145                                  		.fuera_rango:
  1146 00000E5C 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1147 00000E63 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1148 00000E67 4983EA70                			sub r10, 112						; Mover una fila arriba (restar 320)
  1149 00000E6B 4C8915(100A0000)        			mov [player2_position], r10			; Actualizar posición
  1150                                  
  1151 00000E72 E9DF040000              		jmp .endp
  1152                                  
  1153                                  		.continuar:
  1154 00000E77 E9DA040000              			jmp .endp
  1155                                  
  1156                                  	.move_down:
  1157                                  
  1158 00000E7C 4C8B15(100A0000)        		mov r10, [player2_position]
  1159                                  
  1160 00000E83 4981FA[EA040000]        		cmp r10, board + 86 + ((column_cells + 2) * 10)  
  1161 00000E8A 0F84C6040000            		je .endp
  1162 00000E90 4981FA[EB040000]        		cmp r10, board + 87 + ((column_cells + 2) * 10)  
  1163 00000E97 0F84B9040000            		je .endp
  1164 00000E9D 4981FA[EC040000]        		cmp r10, board + 88 + ((column_cells + 2) * 10)  
  1165 00000EA4 0F84AC040000            		je .endp
  1166 00000EAA 4981FA[ED040000]        		cmp r10, board + 89 + ((column_cells + 2) * 10)  
  1167 00000EB1 0F849F040000            		je .endp
  1168 00000EB7 4981FA[EE040000]        		cmp r10, board + 90 + ((column_cells + 2) * 10)  
  1169 00000EBE 0F8492040000            		je .endp
  1170 00000EC4 4981FA[EF040000]        		cmp r10, board + 91 + ((column_cells + 2) * 10)  
  1171 00000ECB 0F8485040000            		je .endp
  1172 00000ED1 4981FA[F0040000]        		cmp r10, board + 92 + ((column_cells + 2) * 10)  
  1173 00000ED8 0F8478040000            		je .endp
  1174 00000EDE 4981FA[F1040000]        		cmp r10, board + 93 + ((column_cells + 2) * 10)  
  1175 00000EE5 0F846B040000            		je .endp
  1176 00000EEB 4981FA[F2040000]        		cmp r10, board + 94 + ((column_cells + 2) * 10)  
  1177 00000EF2 0F845E040000            		je .endp
  1178 00000EF8 4981FA[F3040000]        		cmp r10, board + 95 + ((column_cells + 2) * 10)  
  1179 00000EFF 0F8451040000            		je .endp
  1180 00000F05 4981FA[F4040000]        		cmp r10, board + 96 + ((column_cells + 2) * 10)  
  1181 00000F0C 0F8444040000            		je .endp
  1182 00000F12 4981FA[F5040000]        		cmp r10, board + 97 + ((column_cells + 2) * 10)  
  1183 00000F19 0F8437040000            		je .endp
  1184 00000F1F 4981FA[F6040000]        		cmp r10, board + 98 + ((column_cells + 2) * 10)  
  1185 00000F26 0F842A040000            		je .endp
  1186 00000F2C 4981FA[F7040000]        		cmp r10, board + 99 + ((column_cells + 2) * 10)  
  1187 00000F33 0F841D040000            		je .endp
  1188 00000F39 4981FA[F8040000]        		cmp r10, board + 100 + ((column_cells + 2) * 10)  
  1189 00000F40 0F8410040000            		je .endp
  1190 00000F46 4981FA[F9040000]        		cmp r10, board + 101 + ((column_cells + 2) * 10)  
  1191 00000F4D 0F8403040000            		je .endp
  1192 00000F53 4981FA[FA040000]        		cmp r10, board + 102 + ((column_cells + 2) * 10)  
  1193 00000F5A 0F84F6030000            		je .endp
  1194 00000F60 4981FA[FB040000]        		cmp r10, board + 103 + ((column_cells + 2) * 10)  
  1195 00000F67 0F84E9030000            		je .endp
  1196 00000F6D 4981FA[FC040000]        		cmp r10, board + 104 + ((column_cells + 2) * 10)  
  1197 00000F74 0F84DC030000            		je .endp
  1198 00000F7A 4981FA[FD040000]        		cmp r10, board + 105 + ((column_cells + 2) * 10)  
  1199 00000F81 0F84CF030000            		je .endp
  1200 00000F87 4981FA[FE040000]        		cmp r10, board + 106 + ((column_cells + 2) * 10)  
  1201 00000F8E 0F84C2030000            		je .endp
  1202 00000F94 4981FA[FF040000]        		cmp r10, board + 107 + ((column_cells + 2) * 10)  
  1203 00000F9B 0F84B5030000            		je .endp
  1204 00000FA1 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)  
  1205 00000FA8 0F84A8030000            		je .endp
  1206                                  
  1207 00000FAE 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1208 00000FB5 0F849B030000            		je .endp
  1209 00000FBB 4981FA[17070000]        		cmp r10, board + 83 + ((column_cells + 2) * 15)
  1210 00000FC2 0F848E030000            		je .endp
  1211 00000FC8 4981FA[18070000]        		cmp r10, board + 84 + ((column_cells + 2) * 15)
  1212 00000FCF 0F8481030000            		je .endp
  1213 00000FD5 4981FA[19070000]        		cmp r10, board + 85 + ((column_cells + 2) * 15)
  1214 00000FDC 0F8474030000            		je .endp
  1215 00000FE2 4981FA[1A070000]        		cmp r10, board + 86 + ((column_cells + 2) * 15)
  1216 00000FE9 0F8467030000            		je .endp
  1217 00000FEF 4981FA[1B070000]        		cmp r10, board + 87 + ((column_cells + 2) * 15)
  1218 00000FF6 0F845A030000            		je .endp
  1219 00000FFC 4981FA[1C070000]        		cmp r10, board + 88 + ((column_cells + 2) * 15)
  1220 00001003 0F844D030000            		je .endp
  1221 00001009 4981FA[1D070000]        		cmp r10, board + 89 + ((column_cells + 2) * 15)
  1222 00001010 0F8440030000            		je .endp
  1223 00001016 4981FA[1E070000]        		cmp r10, board + 90 + ((column_cells + 2) * 15)
  1224 0000101D 0F8433030000            		je .endp
  1225 00001023 4981FA[1F070000]        		cmp r10, board + 91 + ((column_cells + 2) * 15)
  1226 0000102A 0F8426030000            		je .endp
  1227 00001030 4981FA[20070000]        		cmp r10, board + 92 + ((column_cells + 2) * 15)
  1228 00001037 0F8419030000            		je .endp
  1229 0000103D 4981FA[21070000]        		cmp r10, board + 93 + ((column_cells + 2) * 15)
  1230 00001044 0F840C030000            		je .endp
  1231 0000104A 4981FA[22070000]        		cmp r10, board + 94 + ((column_cells + 2) * 15)
  1232 00001051 0F84FF020000            		je .endp
  1233 00001057 4981FA[23070000]        		cmp r10, board + 95 + ((column_cells + 2) * 15)
  1234 0000105E 0F84F2020000            		je .endp
  1235 00001064 4981FA[24070000]        		cmp r10, board + 96 + ((column_cells + 2) * 15)
  1236 0000106B 0F84E5020000            		je .endp
  1237 00001071 4981FA[25070000]        		cmp r10, board + 97 + ((column_cells + 2) * 15)
  1238 00001078 0F84D8020000            		je .endp
  1239 0000107E 4981FA[26070000]        		cmp r10, board + 98 + ((column_cells + 2) * 15)
  1240 00001085 0F84CB020000            		je .endp
  1241 0000108B 4981FA[27070000]        		cmp r10, board + 99 + ((column_cells + 2) * 15)
  1242 00001092 0F84BE020000            		je .endp
  1243                                  		
  1244 00001098 4981FA[F4080000]        		cmp r10, board + ((column_cells + 2) * 20)
  1245 0000109F 0F8FB1020000            		jg .endp
  1246                                  
  1247                                  
  1248 000010A5 4981FA[DD020000]        		cmp r10, board + 9 + ((column_cells + 2) * 6)  
  1249 000010AC 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
  1250                                  
  1251 000010AE 4981FA[38030000]        		cmp r10, board + 100 + ((column_cells + 2) * 6) 
  1252 000010B5 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
  1253                                  
  1254                                  		
  1255                                  
  1256                                  		; Aquí entra si 81 < r10 < 100
  1257 000010B7 E9BBFDFFFF              		jmp .continuar    
  1258                                  
  1259                                  		.fuera_rango_down:
  1260 000010BC 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1261 000010C3 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1262 000010C7 4983C270                			add r10, 112							; Mover una fila abajo (sumar 320)
  1263 000010CB 4C8915(100A0000)        			mov [player2_position], r10			; Actualizar posición
  1264                                  
  1265                                  
  1266 000010D2 E97F020000              		jmp .endp	
  1267                                  
  1268                                  		.continuar_down:
  1269 000010D7 E97A020000              			jmp .endp
  1270                                  
  1271                                  
  1272                                  
  1273                                  		
  1274                                  		
  1275                                  
  1276                                  	.move_left:
  1277                                  
  1278 000010DC 4C8B2D(400A0000)        		mov r13, [colj]
  1279 000010E3 4983FD01                		cmp r13, 1
  1280 000010E7 0F8469020000            		je .endp
  1281                                  
  1282 000010ED 4C8B15(100A0000)        		mov r10, [player2_position]
  1283                                  
  1284                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1285 000010F4 4981FA[F5010000]        		cmp r10, board + 1 + ((column_cells + 2) * 4)
  1286 000010FB 0F8455020000            		je .endp 
  1287                                  
  1288 00001101 4981FA[65020000]        		cmp r10, board + 1 + ((column_cells + 2) * 5)
  1289 00001108 0F8448020000            		je .endp 
  1290                                  
  1291 0000110E 4981FA[D5020000]        		cmp r10, board + 1 + ((column_cells + 2) * 6)
  1292 00001115 0F843B020000            		je .endp 
  1293                                  
  1294 0000111B 4981FA[45030000]        		cmp r10, board + 1 + ((column_cells + 2) * 7)
  1295 00001122 0F842E020000            		je .endp 
  1296                                  
  1297 00001128 4981FA[B5030000]        		cmp r10, board + 1 + ((column_cells + 2) * 8)
  1298 0000112F 0F8421020000            		je .endp 
  1299                                  
  1300 00001135 4981FA[25040000]        		cmp r10, board + 1 + ((column_cells + 2) * 9)
  1301 0000113C 0F8414020000            		je .endp 
  1302                                  	
  1303 00001142 4981FA[95040000]        		cmp r10, board + 1 + ((column_cells + 2) * 10)
  1304 00001149 0F8407020000            		je .endp 
  1305                                  
  1306 0000114F 4981FA[05050000]        		cmp r10, board + 1 + ((column_cells + 2) * 11)
  1307 00001156 0F84FA010000            		je .endp 
  1308                                  
  1309 0000115C 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1310 00001163 0F84ED010000            		je .endp 
  1311                                  
  1312 00001169 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1313 00001170 0F84E0010000            		je .endp 
  1314                                  
  1315 00001176 4981FA[E5050000]        		cmp r10, board + 1 + ((column_cells + 2) * 13)
  1316 0000117D 0F84D3010000            		je .endp 
  1317                                  
  1318 00001183 4981FA[55060000]        		cmp r10, board + 1 + ((column_cells + 2) * 14)
  1319 0000118A 0F84C6010000            		je .endp 
  1320                                  
  1321 00001190 4981FA[C5060000]        		cmp r10, board + 1 + ((column_cells + 2) * 15)
  1322 00001197 0F84B9010000            		je .endp 
  1323                                  
  1324 0000119D 4981FA[35070000]        		cmp r10, board + 1 + ((column_cells + 2) * 16)
  1325 000011A4 0F84AC010000            		je .endp 
  1326                                  
  1327 000011AA 4981FA[A5070000]        		cmp r10, board + 1 + ((column_cells + 2) * 17)
  1328 000011B1 0F849F010000            		je .endp 
  1329                                  
  1330 000011B7 4981FA[15080000]        		cmp r10, board + 1 + ((column_cells + 2) * 18)
  1331 000011BE 0F8492010000            		je .endp 
  1332                                  
  1333 000011C4 4981FA[85080000]        		cmp r10, board + 1 + ((column_cells + 2) * 19)
  1334 000011CB 0F8485010000            		je .endp
  1335                                  
  1336 000011D1 4981FA[F5080000]        		cmp r10, board + 1 + ((column_cells + 2) * 20)
  1337 000011D8 0F8478010000            		je .endp
  1338                                  
  1339 000011DE 4981FA[A8030000]        		cmp r10, board + 100 + ((column_cells + 2) * 7)
  1340 000011E5 0F846B010000            		je .endp
  1341                                  
  1342 000011EB 4981FA[18040000]        		cmp r10, board + 100 + ((column_cells + 2) * 8)
  1343 000011F2 0F845E010000            		je .endp
  1344                                  
  1345 000011F8 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1346 000011FF 0F8451010000            		je .endp
  1347                                  
  1348                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
  1349 00001205 4981FA[E6040000]        		cmp r10, board + 82 + ((column_cells + 2) * 10)
  1350 0000120C 0F8444010000            		je .endp
  1351                                  
  1352 00001212 4981FA[56050000]        		cmp r10, board + 82 + ((column_cells + 2) * 11)
  1353 00001219 0F8437010000            		je .endp
  1354                                  
  1355 0000121F 4981FA[C6050000]        		cmp r10, board + 82 + ((column_cells + 2) * 12)
  1356 00001226 0F842A010000            		je .endp
  1357                                  
  1358 0000122C 4981FA[36060000]        		cmp r10, board + 82 + ((column_cells + 2) * 13)
  1359 00001233 0F841D010000            		je .endp
  1360                                  
  1361 00001239 4981FA[A6060000]        		cmp r10, board + 82 + ((column_cells + 2) * 14)
  1362 00001240 0F8410010000            		je .endp
  1363                                  
  1364 00001246 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1365 0000124D 0F8403010000            		je .endp
  1366                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
  1367                                  
  1368 00001253 4981FA[98070000]        		cmp r10, board + 100 + ((column_cells + 2) * 16)
  1369 0000125A 0F84F6000000            		je .endp
  1370                                  
  1371 00001260 4981FA[08080000]        		cmp r10, board + 100 + ((column_cells + 2) * 17)
  1372 00001267 0F84E9000000            		je .endp
  1373                                  
  1374 0000126D 4C8B0D(000A0000)        		mov r9, [pallet_size]
  1375 00001274 41C60220                		mov byte [r10], char_space	; Limpiar el último carácter del palet
  1376 00001278 49FFCA                  		dec r10								; Mover la posición del palet una unidad a la izquierda
  1377 0000127B 4C8915(100A0000)        		mov [player2_position], r10			; Actualizar la posición del palet en la memoria
  1378                                  
  1379 00001282 E9CF000000              		jmp .endp	
  1380                                  							 
  1381                                  	.move_right:
  1382                                  
  1383 00001287 4C8B2D(400A0000)        		mov r13, [colj]
  1384 0000128E 4983FD02                		cmp r13, 2
  1385 00001292 0F84BE000000            		je .endp
  1386                                  
  1387 00001298 4C8B15(100A0000)        		mov r10, [player2_position]
  1388                                  
  1389                                  		
  1390 0000129F 4981FA[60020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
  1391 000012A6 0F84AA000000            		je .endp
  1392                                  
  1393 000012AC 4981FA[D0020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
  1394 000012B3 0F849D000000            		je .endp
  1395                                  
  1396 000012B9 4981FA[40030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
  1397 000012C0 0F8490000000            		je .endp
  1398                                  
  1399 000012C6 4981FA[B0030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
  1400 000012CD 0F8483000000            		je .endp
  1401                                  
  1402 000012D3 4981FA[20040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
  1403 000012DA 747A                    		je .endp
  1404                                  
  1405 000012DC 4981FA[90040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
  1406 000012E3 7471                    		je .endp
  1407                                  
  1408 000012E5 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
  1409 000012EC 7468                    		je .endp
  1410                                  
  1411 000012EE 4981FA[59050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
  1412 000012F5 745F                    		je .endp
  1413                                  
  1414 000012F7 4981FA[C9050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
  1415 000012FE 7456                    		je .endp
  1416                                  
  1417 00001300 4981FA[39060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
  1418 00001307 744D                    		je .endp
  1419                                  
  1420 00001309 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1421 00001310 7444                    		je .endp
  1422                                  
  1423 00001312 4981FA[30070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
  1424 00001319 743B                    		je .endp
  1425                                  
  1426 0000131B 4981FA[A0070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
  1427 00001322 7432                    		je .endp
  1428                                  
  1429 00001324 4981FA[10080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
  1430 0000132B 7429                    		je .endp
  1431                                  
  1432 0000132D 4981FA[80080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
  1433 00001334 7420                    		je .endp
  1434                                  
  1435 00001336 4981FA[F0080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
  1436 0000133D 7417                    		je .endp
  1437                                  
  1438 0000133F 4981FA[60090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
  1439 00001346 740E                    		je .endp
  1440                                  
  1441 00001348 41C60220                		mov byte [r10], char_space
  1442 0000134C 49FFC2                  		inc r10
  1443 0000134F 4C8915(100A0000)        		mov [player2_position], r10
  1444                                   
  1445                                  
  1446                                  
  1447                                  	.endp:
  1448 00001356 48C705(400A0000)00-     		mov qword [colj], 0
  1448 0000135E 000000             
  1449                                  
  1450 00001361 58                      	pop rax
  1451 00001362 59                      	pop rcx
  1452                                  	 
  1453 00001363 C3                      	ret
  1454                                  
  1455                                  _start: 
  1456                                      ; Obtener el tiempo inicial
  1457 00001364 B8C9000000                  mov rax, sys_time
  1458 00001369 4831FF                      xor rdi, rdi  ; Argumento nulo para sys_time
  1459 0000136C 0F05                        syscall
  1460 0000136E 488905(10000000)            mov [start_time], rax  ; Guardar el tiempo inicial
  1461                                  
  1462                                  	print clear, clear_length
   206 00001375 B801000000          <1>  mov eax, sys_write
   207 0000137A BF01000000          <1>  mov edi, 1
   208 0000137F 48BE-               <1>  mov rsi, %1
   208 00001381 [2000000000000000]  <1>
   209 00001389 BA07000000          <1>  mov edx, %2
   210 0000138E 0F05                <1>  syscall
  1463 00001390 E890020000              	call start_screen
  1464                                  	level_up:
  1465 00001395 E8A4EEFFFF              	call canonical_off
  1466 0000139A E8C7EEFFFF              	call echo_off
  1467 0000139F E833F7FFFF              	call set_bot_speed
  1468                                  
  1469                                   
  1470                                  	.main_loop:
  1471                                  
  1472                                      ; Verificar el tiempo transcurrido
  1473 000013A4 B8C9000000                  mov rax, sys_time
  1474 000013A9 4831FF                      xor rdi, rdi
  1475 000013AC 0F05                        syscall
  1476 000013AE 488905(18000000)            mov [current_time], rax  ; Guardar el tiempo actual
  1477                                  
  1478                                      ; Calcular el tiempo restante
  1479 000013B5 488B05(10000000)            mov rax, [start_time]
  1480 000013BC 4883C03C                    add rax, 60  ; Tiempo límite (60 segundos)
  1481 000013C0 482B05(18000000)            sub rax, [current_time]
  1482 000013C7 4883F800                    cmp rax, 0
  1483 000013CB 0F8EFF010000                jle .time_up  ; Si el tiempo restante es <= 0, salir del juego
  1484                                  
  1485                                      ; Convertir el tiempo restante a texto
  1486 000013D1 4889C3                      mov rbx, rax
  1487 000013D4 B90A000000                  mov rcx, 10
  1488 000013D9 4831D2                      xor rdx, rdx
  1489 000013DC 48F7F1                      div rcx
  1490 000013DF 80C230                      add dl, '0'  ; Convertir a carácter ASCII
  1491 000013E2 8815(32000000)              mov [time_buffer+1], dl
  1492 000013E8 0430                        add al, '0'  ; Convertir a carácter ASCII  
  1493 000013EA 8805(31000000)              mov [time_buffer], al
  1494                                  
  1495                                      ; Mostrar el tiempo restante en pantalla
  1496                                      print clear, clear_length
   206 000013F0 B801000000          <1>  mov eax, sys_write
   207 000013F5 BF01000000          <1>  mov edi, 1
   208 000013FA 48BE-               <1>  mov rsi, %1
   208 000013FC [2000000000000000]  <1>
   209 00001404 BA07000000          <1>  mov edx, %2
   210 00001409 0F05                <1>  syscall
  1497                                      print time_msg, time_msg_length
   206 0000140B B801000000          <1>  mov eax, sys_write
   207 00001410 BF01000000          <1>  mov edi, 1
   208 00001415 48BE-               <1>  mov rsi, %1
   208 00001417 [1F00000000000000]  <1>
   209 0000141F BA12000000          <1>  mov edx, %2
   210 00001424 0F05                <1>  syscall
  1498                                      print time_buffer, time_buffer_length
   206 00001426 B801000000          <1>  mov eax, sys_write
   207 0000142B BF01000000          <1>  mov edi, 1
   208 00001430 48BE-               <1>  mov rsi, %1
   208 00001432 [3100000000000000]  <1>
   209 0000143A BA03000000          <1>  mov edx, %2
   210 0000143F 0F05                <1>  syscall
  1499                                  
  1500                                      ; Incrementar el contador del bot
  1501 00001441 488B05(31000000)            mov rax, [bot_counter]       ; Cargar el valor actual del contador
  1502 00001448 48FFC0                  	inc rax                      ; Incrementar el contador
  1503 0000144B 488905(31000000)        	mov [bot_counter], rax       ; Guardar el nuevo valor del contador
  1504                                  
  1505                                      ; Comparar el contador con la velocidad del bot
  1506 00001452 488B1D(29000000)            mov rbx, [bot_speed]         ; Cargar la velocidad del bot
  1507 00001459 4839D8                      cmp rax, rbx                 ; Comparar el contador con la velocidad
  1508 0000145C 7514                        jne .skip_bot_move           ; Si no coincide, saltar el movimiento del bot
  1509                                  
  1510                                      ; Restablecer el contador y mover el bot
  1511 0000145E 4831C0                      xor rax, rax                 ; Restablecer el contador a 0
  1512 00001461 488905(31000000)            mov [bot_counter], rax       ; Guardar el valor restablecido
  1513 00001468 BF03000000                  mov rdi, down_direction      ; Dirección de movimiento del bot 
  1514 0000146D E874F6FFFF                  call move_bot                ; Llamar a la función para mover el bot
  1515                                  
  1516                                  	.skip_bot_move:
  1517                                  
  1518                                  
  1519 00001472 E879EEFFFF                  call print_pallet
  1520 00001477 E8FCF5FFFF                  call print_bot ; llamada a función de imprimir bots
  1521 0000147C E85BF7FFFF                  call print_player2 ; Imprimir Jugador 2
  1522                                      print board, board_size
   206 00001481 B801000000          <1>  mov eax, sys_write
   207 00001486 BF01000000          <1>  mov edi, 1
   208 0000148B 48BE-               <1>  mov rsi, %1
   208 0000148D [3400000000000000]  <1>
   209 00001495 BAA0090000          <1>  mov edx, %2
   210 0000149A 0F05                <1>  syscall
  1523                                  
  1524                                      ;setnonblocking
  1525                                  .read_more:
  1526                                      getchar  ; Leer un carácter de la entrada de teclado
   215 0000149C B800000000          <1>  mov rax, sys_read
   216 000014A1 BF00000000          <1>  mov rdi, STDIN_FILENO
   217 000014A6 48BE-               <1>  mov rsi, input_char
   217 000014A8 [0500000000000000]  <1>
   218 000014B0 BA01000000          <1>  mov rdx, 1
   219 000014B5 0F05                <1>  syscall
  1527                                  
  1528 000014B7 4883F801                    cmp rax, 1
  1529 000014BB 0F85F7000000                jne .done
  1530                                  
  1531 000014C1 8A05(05000000)              mov al, [input_char]
  1532                                  
  1533                                      ; Movimiento del Jugador 1
  1534 000014C7 3C77                        cmp al, 'w'
  1535 000014C9 747C                        je .move_player1_up
  1536 000014CB 3C73                        cmp al, 's'
  1537 000014CD 0F8480000000                je .move_player1_down
  1538 000014D3 3C61                        cmp al, 'a'
  1539 000014D5 0F8484000000                je .move_player1_left
  1540 000014DB 3C64                        cmp al, 'd'
  1541 000014DD 0F848A000000                je .move_player1_right
  1542                                  
  1543                                      ; Movimiento del Jugador 2 (Flechas)
  1544 000014E3 3C1B                        cmp al, 0x1B          ; Verificar si es la tecla Escape
  1545 000014E5 0F85C0000000                jne .go_out
  1546                                      getchar               ; Leer el siguiente carácter
   215 000014EB B800000000          <1>  mov rax, sys_read
   216 000014F0 BF00000000          <1>  mov rdi, STDIN_FILENO
   217 000014F5 48BE-               <1>  mov rsi, input_char
   217 000014F7 [0500000000000000]  <1>
   218 000014FF BA01000000          <1>  mov rdx, 1
   219 00001504 0F05                <1>  syscall
  1547 00001506 8A05(05000000)              mov al, [input_char]  ; Almacenar el carácter leído en al
  1548 0000150C 3C5B                        cmp al, '['           ; Verificar si es '['
  1549 0000150E 0F8597000000                jne .go_out
  1550                                      getchar               ; Leer el siguiente carácter
   215 00001514 B800000000          <1>  mov rax, sys_read
   216 00001519 BF00000000          <1>  mov rdi, STDIN_FILENO
   217 0000151E 48BE-               <1>  mov rsi, input_char
   217 00001520 [0500000000000000]  <1>
   218 00001528 BA01000000          <1>  mov rdx, 1
   219 0000152D 0F05                <1>  syscall
  1551 0000152F 8A05(05000000)              mov al, [input_char]  ; Almacenar el carácter leído en al
  1552 00001535 3C41                        cmp al, 'A'           ; Flecha hacia arriba
  1553 00001537 7440                        je .move_player2_up
  1554 00001539 3C42                        cmp al, 'B'           ; Flecha hacia abajo
  1555 0000153B 7448                        je .move_player2_down
  1556 0000153D 3C43                        cmp al, 'C'           ; Flecha hacia la derecha
  1557 0000153F 745E                        je .move_player2_right
  1558 00001541 3C44                        cmp al, 'D'           ; Flecha hacia la izquierda
  1559 00001543 744C                        je .move_player2_left
  1560                                  
  1561 00001545 EB64                        jmp .go_out
  1562                                  
  1563                                      .move_player1_up:
  1564 00001547 BF02000000                      mov rdi, up_direction
  1565 0000154C E8ABEDFFFF                      call move_pallet
  1566 00001551 EB65                            jmp .done
  1567                                  
  1568                                      .move_player1_down:
  1569 00001553 BF03000000                      mov rdi, down_direction
  1570 00001558 E89FEDFFFF                      call move_pallet
  1571 0000155D EB59                            jmp .done
  1572                                  
  1573                                      .move_player1_left:
  1574 0000155F 48C7C7FFFFFFFF                  mov rdi, left_direction
  1575 00001566 E891EDFFFF                      call move_pallet
  1576 0000156B EB4B                            jmp .done
  1577                                  
  1578                                      .move_player1_right:
  1579 0000156D BF01000000                      mov rdi, right_direction
  1580 00001572 E885EDFFFF                      call move_pallet
  1581 00001577 EB3F                            jmp .done
  1582                                  
  1583                                      .move_player2_up:
  1584 00001579 BF02000000                      mov rdi, up_direction
  1585 0000157E E865F6FFFF                      call move_player2
  1586 00001583 EB33                            jmp .done
  1587                                  
  1588                                      .move_player2_down:
  1589 00001585 BF03000000                      mov rdi, down_direction
  1590 0000158A E859F6FFFF                      call move_player2
  1591 0000158F EB27                            jmp .done
  1592                                  
  1593                                      .move_player2_left:
  1594 00001591 48C7C7FFFFFFFF                  mov rdi, left_direction
  1595 00001598 E84BF6FFFF                      call move_player2
  1596 0000159D EB19                            jmp .done
  1597                                  
  1598                                      .move_player2_right:
  1599 0000159F BF01000000                      mov rdi, right_direction
  1600 000015A4 E83FF6FFFF                      call move_player2
  1601 000015A9 EB0D                            jmp .done
  1602                                  
  1603                                      .go_out:
  1604 000015AB 3C71                            cmp al, 'q'
  1605 000015AD 0F84CE000000                    je exit
  1606                                  
  1607 000015B3 E9E4FEFFFF                      jmp .read_more
  1608                                  
  1609                                      .done:
  1610                                          sleeptime
   223 000015B8 B823000000          <1>  mov eax, sys_nanosleep
   224 000015BD 48BF-               <1>  mov rdi, timespec
   224 000015BF [0000000000000000]  <1>
   225 000015C7 31F6                <1>  xor esi, esi
   226 000015C9 0F05                <1>  syscall
  1611 000015CB E9D4FDFFFF                      jmp .main_loop
  1612                                  
  1613                                  	.time_up:
  1614                                  		; Mostrar mensaje de fin de juego
  1615                                  		print clear, clear_length
   206 000015D0 B801000000          <1>  mov eax, sys_write
   207 000015D5 BF01000000          <1>  mov edi, 1
   208 000015DA 48BE-               <1>  mov rsi, %1
   208 000015DC [2000000000000000]  <1>
   209 000015E4 BA07000000          <1>  mov edx, %2
   210 000015E9 0F05                <1>  syscall
  1616                                  		print game_over_msg, game_over_msg_length
   206 000015EB B801000000          <1>  mov eax, sys_write
   207 000015F0 BF01000000          <1>  mov edi, 1
   208 000015F5 48BE-               <1>  mov rsi, %1
   208 000015F7 [2602000000000000]  <1>
   209 000015FF BA18000000          <1>  mov edx, %2
   210 00001604 0F05                <1>  syscall
  1617 00001606 EB79                    		jmp exit
  1618                                  
  1619                                  		print clear, clear_length
   206 00001608 B801000000          <1>  mov eax, sys_write
   207 0000160D BF01000000          <1>  mov edi, 1
   208 00001612 48BE-               <1>  mov rsi, %1
   208 00001614 [2000000000000000]  <1>
   209 0000161C BA07000000          <1>  mov edx, %2
   210 00001621 0F05                <1>  syscall
  1620                                  		
  1621 00001623 EB5C                    		jmp exit
  1622                                  
  1623                                  
  1624                                  start_screen: 
  1625                                  
  1626 00001625 50                      	push rax
  1627 00001626 51                      	push rcx
  1628 00001627 52                      	push rdx
  1629 00001628 57                      	push rdi
  1630 00001629 56                      	push rsi
  1631                                  	
  1632                                  	print msg1, msg1_length	
   206 0000162A B801000000          <1>  mov eax, sys_write
   207 0000162F BF01000000          <1>  mov edi, 1
   208 00001634 48BE-               <1>  mov rsi, %1
   208 00001636 [3800000000000000]  <1>
   209 0000163E BAEE010000          <1>  mov edx, %2
   210 00001643 0F05                <1>  syscall
  1633                                  	getchar
   215 00001645 B800000000          <1>  mov rax, sys_read
   216 0000164A BF00000000          <1>  mov rdi, STDIN_FILENO
   217 0000164F 48BE-               <1>  mov rsi, input_char
   217 00001651 [0500000000000000]  <1>
   218 00001659 BA01000000          <1>  mov rdx, 1
   219 0000165E 0F05                <1>  syscall
  1634                                  	print clear, clear_length
   206 00001660 B801000000          <1>  mov eax, sys_write
   207 00001665 BF01000000          <1>  mov edi, 1
   208 0000166A 48BE-               <1>  mov rsi, %1
   208 0000166C [2000000000000000]  <1>
   209 00001674 BA07000000          <1>  mov edx, %2
   210 00001679 0F05                <1>  syscall
  1635                                  
  1636 0000167B 58                      	pop rax
  1637 0000167C 59                      	pop rcx
  1638 0000167D 5A                      	pop rdx
  1639 0000167E 5F                      	pop rdi
  1640 0000167F 5E                      	pop rsi
  1641 00001680 C3                      	ret
  1642                                  
  1643                                  
  1644                                  
  1645                                  exit: 
  1646 00001681 E8FAEBFFFF              	call canonical_on
  1647 00001686 B83C000000              	mov    rax, 60
  1648 0000168B BF00000000                  mov    rdi, 0
  1649 00001690 0F05                        syscall
