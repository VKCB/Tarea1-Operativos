     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  	sys_read: equ 0	
     7                                  	sys_write:	equ 1
     8                                  	sys_nanosleep:	equ 35
     9                                  	sys_nanosleep2:	equ 200
    10                                  	sys_time:	equ 201
    11                                  	sys_fcntl:	equ 72
    12                                  
    13                                  	char_player1: equ 176
    14                                  	char_player2: equ 74 ; Letra que identifica al Jugador 2
    15                                  	char_bot: equ 98 ; Letra que identifica al bot1 blue
    16                                  
    17                                  	char_space: equ 32 
    18                                  	left_direction: equ -1
    19                                  	right_direction: equ 1
    20                                  	up_direction: equ 2
    21                                  	down_direction: equ 3
    22                                  	
    23                                  	
    24                                  
    25                                  
    26                                  
    27                                  STDIN_FILENO: equ 0			;Se utiliza en llamadas al sistema que requieren un descriptor de archivo, por ejemplo, al leer de la entrada estándar
    28                                  
    29                                  F_SETFL:	equ 0x0004		;Se pasa como segundo argumento a la llamada al sistema fcntl para indicar que queremos cambiar los flags del descriptor de archivo.
    30                                  O_NONBLOCK: equ 0x0004		;Se utiliza como tercer argumento en la llamada al sistema fcntl para indicar que el descriptor de archivo debe operar en modo no bloqueante.
    31                                  
    32                                  ;screen clean definition
    33                                  	row_cells:	equ 24	;Numero de filas que caben en la pantalla
    34                                  	column_cells: 	equ 110 ; set to any (reasonable) value you wish
    35                                  	array_length:	equ row_cells * column_cells + row_cells ;(+ 32 caracteres de nueva línea)
    36                                  
    37                                  ;This is regarding the sleep time
    38                                  timespec:
    39 00000000 0000000000000000            tv_sec  dq 0
    40 00000008 002D310100000000            tv_nsec dq 20000000		;0.02 s
    41                                  
    42                                  timespec2:
    43 00000010 0000000000000000            tv_sec2  dq 0
    44 00000018 00204AA9D1010000            tv_nsec2 dq 2000000000000		;0.02 s
    45                                  
    46                                  ;This is for cleaning up the screen
    47 00000020 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"	;2J: Esta es una secuencia de escape ANSI que indica Clear screen
    48                                  clear_length:	equ $-clear			;H: Indica reposicionamiento del cursor.
    49                                  
    50                                  ; Esta es la pantalla de inicio
    51                                  	
    52 00000027 202020202020202020-     	msg13: db "               ", 0xA, 0xD
    52 00000030 2020202020200A0D   
    53 00000038 202020202009090909-     	msg1: db "     					   TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    53 00000041 092020205445434E4F-
    53 0000004A 4C4F4749434F204445-
    53 00000053 20434F535441205249-
    53 0000005C 434120202020202020-
    53 00000065 200A0D             
    54 00000068 202020202020202020-     	msg14: db "               ", 0xA, 0xD
    54 00000071 2020202020200A0D   
    55 00000079 202020202020202020-     	msg17: db "               ", 0xA, 0xD
    55 00000082 2020202020200A0D   
    56 0000008A 202020202020202020-     	msg18: db "               ", 0xA, 0xD
    56 00000093 2020202020200A0D   
    57 0000009B 09090909090956616C-     	msg2: db "						Valerin Calderon       ", 0xA, 0xD
    57 000000A4 6572696E2043616C64-
    57 000000AD 65726F6E2020202020-
    57 000000B6 20200A0D           
    58 000000BA 09090909090959656E-     	msg5: db "						Yendry Badilla         ", 0xA, 0xD
    58 000000C3 64727920426164696C-
    58 000000CC 6C6120202020202020-
    58 000000D5 20200A0D           
    59 000000D9 090909090909416E64-     	msg15: db "						Andrés Molina          ", 0xA, 0xD
    59 000000E2 72C3A973204D6F6C69-
    59 000000EB 6E6120202020202020-
    59 000000F4 2020200A0D         
    60 000000F9 202020202020202020-     	msg6: db "               ", 0xA, 0xD
    60 00000102 2020202020200A0D   
    61 0000010A 202020202020202020-     	msg7: db "               ", 0xA, 0xD
    61 00000113 2020202020200A0D   
    62 0000011B 202020202020202020-     	msg8: db "               ", 0xA, 0xD
    62 00000124 2020202020200A0D   
    63 0000012C 202020202020202020-     	msg9: db "               ", 0xA, 0xD
    63 00000135 2020202020200A0D   
    64 0000013D 202020202020202020-     	msg16: db "               ", 0xA, 0xD 
    64 00000146 2020202020200A0D   
    65 0000014E 090909090909475241-     	msg3: db "						GRAN TRAK TEC        ", 0xA, 0xD
    65 00000157 4E205452414B205445-
    65 00000160 432020202020202020-
    65 00000169 0A0D               
    66                                  
    67 0000016B 202020202020202020-     	msg19: db "               ", 0xA, 0xD
    67 00000174 2020202020200A0D   
    68 0000017C 202020202020202020-     	msg20: db "               ", 0xA, 0xD
    68 00000185 2020202020200A0D   
    69 0000018D 202020202020202020-     	msg21: db "               ", 0xA, 0xD
    69 00000196 2020202020200A0D   
    70 0000019E 202020202020202020-     	msg22: db "               ", 0xA, 0xD
    70 000001A7 2020202020200A0D   
    71 000001AF 202020202020202020-     	msg23: db "               ", 0xA, 0xD 
    71 000001B8 2020202020200A0D   
    72 000001C0 202020202020202020-     	msg24: db "               ", 0xA, 0xD
    72 000001C9 2020202020200A0D   
    73 000001D1 202020202020202020-     	msg25: db "               ", 0xA, 0xD
    73 000001DA 2020202020200A0D   
    74 000001E2 202020202020202020-     	msg26: db "               ", 0xA, 0xD 
    74 000001EB 2020202020200A0D   
    75 000001F3 202020202020090909-     	msg4: db "      					   PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    75 000001FC 090920202050524553-
    75 00000205 494F4E4520454E5445-
    75 0000020E 52205041524120494E-
    75 00000217 494349415220202020-
    75 00000220 202020200A0D       
    76                                  	msg1_length:	equ $-msg1
    77                                  	msg2_length:	equ $-msg2
    78                                  	msg3_length:	equ $-msg3
    79                                  	msg4_length:	equ $-msg4
    80                                  	msg5_length:	equ $-msg5
    81                                  	msg13_length:	equ $-msg13
    82                                  	msg14_length:	equ $-msg14
    83                                  	msg15_length:	equ $-msg15
    84                                  	msg16_length:	equ $-msg16
    85                                  	msg17_length:	equ $-msg17 
    86                                  	msg6_length:	equ $-msg6 
    87                                  	msg7_length:	equ $-msg7 
    88                                  	msg8_length:	equ $-msg8 
    89                                  	msg9_length:	equ $-msg9 
    90                                  	msg18_length:	equ $-msg18
    91                                  	msg19_length:	equ $-msg19
    92                                  	msg20_length:	equ $-msg20
    93                                  	msg21_length:	equ $-msg21
    94                                  	msg22_length:	equ $-msg22
    95                                  	msg23_length:	equ $-msg23
    96                                  	msg24_length:	equ $-msg24
    97                                  	msg25_length:	equ $-msg25
    98                                  	msg26_length:	equ $-msg26
    99                                  
   100 00000226 456C206A7565676F20-     	game_over_msg db "El juego ha finalizado", 0xA, 0xD
   100 0000022F 68612066696E616C69-
   100 00000238 7A61646F0A0D       
   101                                  	game_over_msg_length equ $-game_over_msg
   102                                  
   103                                  	; Usefull macros (Como funciones reutilizables)
   104                                   
   105                                  	%macro setnonblocking 0		;Configura la entrada estándar para que funcione en modo no bloqueante
   106                                  		mov rax, sys_fcntl
   107                                  		mov rdi, STDIN_FILENO
   108                                  		mov rsi, F_SETFL
   109                                  		mov rdx, O_NONBLOCK
   110                                  		syscall
   111                                  	%endmacro
   112                                  
   113                                  	%macro unsetnonblocking 0	;Restablece la entrada estándar al modo bloqueante
   114                                  		mov rax, sys_fcntl
   115                                  		mov rdi, STDIN_FILENO
   116                                  		mov rsi, F_SETFL
   117                                  		mov rdx, 0
   118                                  		syscall
   119                                  	%endmacro
   120                                  
   121                                  	%macro full_line 0			;Linea completa de X
   122                                  		times column_cells db "X"
   123                                  		db 0x0a, 0xD
   124                                  	%endmacro
   125                                  
   126                                  	;Esta parte es para la creacion de la pista
   127                                  
   128                                  	%macro up_down_pista 0			;Parte de arriba de la pista
   129                                  		db "X"
   130                                  		times 9 db " "
   131                                  		times 90 db "O"
   132                                  		times 9 db " "
   133                                  		db "X"
   134                                  		db 0x0a, 0xD
   135                                  	%endmacro
   136                                  
   137                                  	%macro right_pista1 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   138                                  		db "X"
   139                                  		times 9 db " "
   140                                  		db "O"
   141                                  		times 88 db " "
   142                                  		db "O"
   143                                  		times 9 db " "
   144                                  		db "X", 0x0a, 0xD
   145                                  	%endmacro
   146                                  
   147                                  	%macro right_pista2 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   148                                  		db "X"
   149                                  		times 9 db " "
   150                                  		db "O"
   151                                  		times 70 db " "
   152                                  		times 19 db "O"
   153                                  		times 9 db " "
   154                                  		db "X", 0x0a, 0xD
   155                                  	%endmacro
   156                                  
   157                                  	%macro right_pista3 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   158                                  		db "X"
   159                                  		times 9 db " "
   160                                  		db "O"
   161                                  		times 70 db " "
   162                                  		db "O"
   163                                  		times 27 db " "
   164                                  		db "X", 0x0a, 0xD
   165                                  	%endmacro
   166                                  
   167                                  	%macro right_pista4 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   168                                  		db "X"
   169                                  		times 9 db " "
   170                                  		db "O"
   171                                  		times 70 db " "
   172                                  		db "O"
   173                                  		times 4 db " "
   174                                  		times 23 db "O"
   175                                  		db "X", 0x0a, 0xD
   176                                  	%endmacro
   177                                  
   178                                  	; Fin de la creacion de la pista
   179                                  
   180                                  	%macro marcador_j1 0			;Crea una línea completa de 'O' seguida de una nueva línea marcadores
   181                                  		db "X PLAYER 1 TURNS: "
   182                                  		times 60 db " "
   183                                  		db "Tiempo restante:"
   184                                  		times 16 db " "
   185                                  		db "X"
   186                                  		db 0x0a, 0xD
   187                                  	%endmacro
   188                                  
   189                                  	%macro marcador_j2 0			;Crea una línea completa de 'O' seguida de una nueva línea
   190                                  		db "X PLAYER 2 TURNS: "
   191                                  		times 91 db " "
   192                                  		db "X"
   193                                  		db 0x0a, 0xD
   194                                  	%endmacro
   195                                  
   196                                  	%macro hollow_line 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   197                                  		db "X"
   198                                  		times column_cells-2 db char_space	;A 80 le resta las 2 X de los extremos e imprime 78 espacios
   199                                  		db "X", 0x0a, 0xD
   200                                  	%endmacro
   201                                  
   202                                  	%macro print 2				;Imprime una cadena especificada en la salida estándar
   203                                  		mov eax, sys_write
   204                                  		mov edi, 1 	; stdout
   205                                  		mov rsi, %1				;Parametro 1 que se pasa en donde se llama al macro
   206                                  		mov edx, %2				;Parametro 2
   207                                  		syscall
   208                                  	%endmacro
   209                                  
   210                                  	;Esta es la funcion que obtiene lo que uno ingrese
   211                                  	%macro getchar 0			;Lee un solo carácter de la entrada estándar y lo almacena en input_char
   212                                  		mov     rax, sys_read
   213                                  		mov     rdi, STDIN_FILENO
   214                                  		mov     rsi, input_char
   215                                  		mov     rdx, 1 ; number of bytes
   216                                  		syscall         ;read text input from keyboard
   217                                  	%endmacro
   218                                  
   219                                  	%macro sleeptime 0			;Suspende la ejecución del programa durante el tiempo especificado
   220                                  		mov eax, sys_nanosleep
   221                                  		mov rdi, timespec
   222                                  		xor esi, esi		; ignore remaining time in case of call interruption
   223                                  		syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   224                                  	%endmacro
   225                                  
   226                                  global _start
   227                                  
   228                                  section .bss
   229                                  
   230 00000000 ????????????????        	input_char resq 1 
   231                                  
   232 00000008 ??                      	random_value resb 1 ; Número random obtenido (renombrado para evitar conflicto)
   233 00000009 ????????????????        	start_time resq 1  ; Variable para almacenar el tiempo inicial
   234 00000011 ????????????????        	current_time resq 1 ; Variable para almacenar el tiempo actual
   235                                  
   236                                  	; Bots
   237 00000019 ??                      	bot_random resb 1 ; Número random obtenido para el bot (renombrado)
   238 0000001A ????????????????         	random_result resq 1
   239 00000022 ????????????????          	bot_speed resq 1
   240 0000002A ????????????????          	bot_counter resq 1
   241                                  section .data 
   242                                  
   243                                  
   244 00000000 2F6465762F7572616E-     	urandom db '/dev/urandom', 0
   244 00000009 646F6D00           
   245 0000000D 0A00                    	newline db 10, 0
   246                                  
   247 0000000F 0000000000000000        	score dq 0
   248 00000017 [9D04000000000000]      	score_position dq board + 19 + 10* (column_cells + 2)
   249                                  
   250 0000001F [F900000000000000]      	tiempo_posicion dq board + 95 + ((column_cells + 2) * 1)
   251                                  
   252 00000027 303000                  	time_buffer db "00", 0  ; Buffer para mostrar los segundos restantes como texto
   253                                  	time_buffer_length equ $-time_buffer
   254                                  
   255                                  	board:
   256                                  		full_line
   122 0000002A 58<rep 6Eh>         <1>  times column_cells db "X"
   123 00000098 0A0D                <1>  db 0x0a, 0xD
   257                                  		marcador_j1
   181 0000009A 5820504C4159455220- <1>  db "X PLAYER 1 TURNS: "
   181 000000A3 31205455524E533A20  <1>
   182 000000AC 20<rep 3Ch>         <1>  times 60 db " "
   183 000000E8 5469656D706F207265- <1>  db "Tiempo restante:"
   183 000000F1 7374616E74653A      <1>
   184 000000F8 20<rep 10h>         <1>  times 16 db " "
   185 00000108 58                  <1>  db "X"
   186 00000109 0A0D                <1>  db 0x0a, 0xD
   258                                  		marcador_j2 
   190 0000010B 5820504C4159455220- <1>  db "X PLAYER 2 TURNS: "
   190 00000114 32205455524E533A20  <1>
   191 0000011D 20<rep 5Bh>         <1>  times 91 db " "
   192 00000178 58                  <1>  db "X"
   193 00000179 0A0D                <1>  db 0x0a, 0xD
   259                                  		full_line
   122 0000017B 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000001E9 0A0D                <1>  db 0x0a, 0xD
   260                                          %rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   261                                          hollow_line
   262                                          %endrep 
   261                              <1>  hollow_line
   197 000001EB 58                  <2>  db "X"
   198 000001EC 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 00000258 580A0D              <2>  db "X", 0x0a, 0xD
   261                              <1>  hollow_line
   197 0000025B 58                  <2>  db "X"
   198 0000025C 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000002C8 580A0D              <2>  db "X", 0x0a, 0xD
   261                              <1>  hollow_line
   197 000002CB 58                  <2>  db "X"
   198 000002CC 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 00000338 580A0D              <2>  db "X", 0x0a, 0xD
   263                                  
   264                                  		up_down_pista
   129 0000033B 58                  <1>  db "X"
   130 0000033C 20<rep 9h>          <1>  times 9 db " "
   131 00000345 4F<rep 5Ah>         <1>  times 90 db "O"
   132 0000039F 20<rep 9h>          <1>  times 9 db " "
   133 000003A8 58                  <1>  db "X"
   134 000003A9 0A0D                <1>  db 0x0a, 0xD
   265                                  
   266                                  
   267                                          right_pista2
   148 000003AB 58                  <1>  db "X"
   149 000003AC 20<rep 9h>          <1>  times 9 db " "
   150 000003B5 4F                  <1>  db "O"
   151 000003B6 20<rep 46h>         <1>  times 70 db " "
   152 000003FC 4F<rep 13h>         <1>  times 19 db "O"
   153 0000040F 20<rep 9h>          <1>  times 9 db " "
   154 00000418 580A0D              <1>  db "X", 0x0a, 0xD
   268                                  
   269                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   270                                          right_pista3
   271                                          %endrep
   270                              <1>  right_pista3
   158 0000041B 58                  <2>  db "X"
   159 0000041C 20<rep 9h>          <2>  times 9 db " "
   160 00000425 4F                  <2>  db "O"
   161 00000426 20<rep 46h>         <2>  times 70 db " "
   162 0000046C 4F                  <2>  db "O"
   163 0000046D 20<rep 1Bh>         <2>  times 27 db " "
   164 00000488 580A0D              <2>  db "X", 0x0a, 0xD
   270                              <1>  right_pista3
   158 0000048B 58                  <2>  db "X"
   159 0000048C 20<rep 9h>          <2>  times 9 db " "
   160 00000495 4F                  <2>  db "O"
   161 00000496 20<rep 46h>         <2>  times 70 db " "
   162 000004DC 4F                  <2>  db "O"
   163 000004DD 20<rep 1Bh>         <2>  times 27 db " "
   164 000004F8 580A0D              <2>  db "X", 0x0a, 0xD
   272                                  
   273                                  		right_pista4
   168 000004FB 58                  <1>  db "X"
   169 000004FC 20<rep 9h>          <1>  times 9 db " "
   170 00000505 4F                  <1>  db "O"
   171 00000506 20<rep 46h>         <1>  times 70 db " "
   172 0000054C 4F                  <1>  db "O"
   173 0000054D 20<rep 4h>          <1>  times 4 db " "
   174 00000551 4F<rep 17h>         <1>  times 23 db "O"
   175 00000568 580A0D              <1>  db "X", 0x0a, 0xD
   274                                  		right_pista4
   168 0000056B 58                  <1>  db "X"
   169 0000056C 20<rep 9h>          <1>  times 9 db " "
   170 00000575 4F                  <1>  db "O"
   171 00000576 20<rep 46h>         <1>  times 70 db " "
   172 000005BC 4F                  <1>  db "O"
   173 000005BD 20<rep 4h>          <1>  times 4 db " "
   174 000005C1 4F<rep 17h>         <1>  times 23 db "O"
   175 000005D8 580A0D              <1>  db "X", 0x0a, 0xD
   275                                  		right_pista4
   168 000005DB 58                  <1>  db "X"
   169 000005DC 20<rep 9h>          <1>  times 9 db " "
   170 000005E5 4F                  <1>  db "O"
   171 000005E6 20<rep 46h>         <1>  times 70 db " "
   172 0000062C 4F                  <1>  db "O"
   173 0000062D 20<rep 4h>          <1>  times 4 db " "
   174 00000631 4F<rep 17h>         <1>  times 23 db "O"
   175 00000648 580A0D              <1>  db "X", 0x0a, 0xD
   276                                  
   277                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   278                                          right_pista3
   279                                          %endrep 
   278                              <1>  right_pista3
   158 0000064B 58                  <2>  db "X"
   159 0000064C 20<rep 9h>          <2>  times 9 db " "
   160 00000655 4F                  <2>  db "O"
   161 00000656 20<rep 46h>         <2>  times 70 db " "
   162 0000069C 4F                  <2>  db "O"
   163 0000069D 20<rep 1Bh>         <2>  times 27 db " "
   164 000006B8 580A0D              <2>  db "X", 0x0a, 0xD
   278                              <1>  right_pista3
   158 000006BB 58                  <2>  db "X"
   159 000006BC 20<rep 9h>          <2>  times 9 db " "
   160 000006C5 4F                  <2>  db "O"
   161 000006C6 20<rep 46h>         <2>  times 70 db " "
   162 0000070C 4F                  <2>  db "O"
   163 0000070D 20<rep 1Bh>         <2>  times 27 db " "
   164 00000728 580A0D              <2>  db "X", 0x0a, 0xD
   280                                  
   281                                  		right_pista2
   148 0000072B 58                  <1>  db "X"
   149 0000072C 20<rep 9h>          <1>  times 9 db " "
   150 00000735 4F                  <1>  db "O"
   151 00000736 20<rep 46h>         <1>  times 70 db " "
   152 0000077C 4F<rep 13h>         <1>  times 19 db "O"
   153 0000078F 20<rep 9h>          <1>  times 9 db " "
   154 00000798 580A0D              <1>  db "X", 0x0a, 0xD
   282                                  
   283                                  
   284                                  		up_down_pista
   129 0000079B 58                  <1>  db "X"
   130 0000079C 20<rep 9h>          <1>  times 9 db " "
   131 000007A5 4F<rep 5Ah>         <1>  times 90 db "O"
   132 000007FF 20<rep 9h>          <1>  times 9 db " "
   133 00000808 58                  <1>  db "X"
   134 00000809 0A0D                <1>  db 0x0a, 0xD
   285                                  
   286                                  		%rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   287                                          hollow_line
   288                                          %endrep
   287                              <1>  hollow_line
   197 0000080B 58                  <2>  db "X"
   198 0000080C 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 00000878 580A0D              <2>  db "X", 0x0a, 0xD
   287                              <1>  hollow_line
   197 0000087B 58                  <2>  db "X"
   198 0000087C 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000008E8 580A0D              <2>  db "X", 0x0a, 0xD
   287                              <1>  hollow_line
   197 000008EB 58                  <2>  db "X"
   198 000008EC 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 00000958 580A0D              <2>  db "X", 0x0a, 0xD
   289                                  
   290                                          full_line
   122 0000095B 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000009C9 0A0D                <1>  db 0x0a, 0xD
   291                                  	board_size:   equ   $ - board
   292                                  
   293                                  	; Added for the terminal issue	
   294 000009CB 00<rep 24h>             		termios:        times 36 db 0	;Define una estructura de 36 bytes inicializados a 0. Esta estructura es utilizada para almacenar las configuraciones del terminal
   295                                  		stdin:          equ 0			;Define el descriptor de archivo para la entrada estándar (stdin), que es 0
   296                                  		ICANON:         equ 1<<1		;Canonico la entrada no se envía al programa hasta que el usuario presiona Enter
   297                                  		ECHO:           equ 1<<3		;Bandera que habilita o deshabilita este modo
   298                                  		VTIME: 			equ 5
   299                                  		VMIN:			equ 6
   300                                  		CC_C:			equ 18
   301                                  
   302                                  
   303 000009EF [FD04000000000000]      	player1_position dq board + 3 + ((column_cells + 2) * 11)  ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical 
   304 000009F7 0100000000000000        	player_size dq 1
   305                                  
   306 000009FF [E904000000000000]      	bot_position dq board + 85 + ((column_cells + 3) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical
   307 00000A07 [0005000000000000]      	player2_position dq board + 6 + ((column_cells + 2) * 11) ; Posición inicial del Jugador 2
   308 00000A0F 0000000000000000        	colj: dq 0
   309                                  
   310                                  section .text
   311                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   312                                  canonical_off:										;La entrada se procese carácter por carácter sin esperar a que se presione Enter.
   313 0000023E E86F000000                      call read_stdin_termios						;Guarda los atributos actuales del terminal en la variable termios
   314                                  
   315                                          ; clear canonical bit in local mode flags	
   316 00000243 50                              push rax						
   317 00000244 B802000000                      mov eax, ICANON								;Carga el valor de la constante ICANON (que representa el bit del modo canónico) en eax
   318 00000249 F7D0                            not eax										;Niega todos los bits en eax
   319 0000024B 2105(D7090000)                  and [termios+12], eax						;Limpia el bit canónico en las banderas de modo local
   320 00000251 C605(E2090000)00        		mov byte[termios+CC_C+VTIME], 0				;Establecen VTIME y VMIN en 0 para que el terminal no espere caracteres adicionales
   321 00000258 C605(E3090000)00        		mov byte[termios+CC_C+VMIN], 0
   322 0000025F 58                              pop rax
   323                                  
   324 00000260 E86C000000                      call write_stdin_termios					;Escribe los atributos modificados de termios de vuelta al terminal
   325 00000265 C3                              ret
   326                                  
   327                                  echo_off:											;No se muestran los caracteres introducidos
   328 00000266 E847000000                      call read_stdin_termios
   329                                  
   330                                          ; clear echo bit in local mode flags
   331 0000026B 50                              push rax
   332 0000026C B808000000                      mov eax, ECHO
   333 00000271 F7D0                            not eax
   334 00000273 2105(D7090000)                  and [termios+12], eax
   335 00000279 58                              pop rax
   336                                  
   337 0000027A E852000000                      call write_stdin_termios
   338 0000027F C3                              ret
   339                                  
   340                                  canonical_on:										;La entrada se procesa en líneas completas. Espera hasta que el usuario presione Enter
   341 00000280 E82D000000                      call read_stdin_termios
   342                                  
   343                                          ; set canonical bit in local mode flags
   344 00000285 830D(D7090000)02                or dword [termios+12], ICANON
   345 0000028C C605(E2090000)00        		mov byte[termios+CC_C+VTIME], 0			;Tiempo en decisegundos que el terminal espera para la entrada.
   346 00000293 C605(E3090000)01        		mov byte[termios+CC_C+VMIN], 1			;El número mínimo de caracteres que se deben leer
   347 0000029A E832000000                      call write_stdin_termios
   348 0000029F C3                              ret
   349                                  
   350                                  echo_on:											;Se muestran los caracteres introducidos
   351 000002A0 E80D000000                      call read_stdin_termios
   352                                  
   353                                          ; set echo bit in local mode flags
   354 000002A5 830D(D7090000)08                or dword [termios+12], ECHO
   355                                  
   356 000002AC E820000000                      call write_stdin_termios
   357 000002B1 C3                              ret
   358                                  
   359                                  read_stdin_termios:									;Lee los atributos del terminal y los guarda en la variable termios
   360 000002B2 50                              push rax
   361 000002B3 53                              push rbx
   362 000002B4 51                              push rcx
   363 000002B5 52                              push rdx
   364                                  
   365 000002B6 B836000000                      mov eax, 36h
   366 000002BB BB00000000                      mov ebx, stdin
   367 000002C0 B901540000                      mov ecx, 5401h
   368 000002C5 BA[CB090000]                    mov edx, termios
   369 000002CA CD80                            int 80h
   370                                  
   371 000002CC 5A                              pop rdx
   372 000002CD 59                              pop rcx
   373 000002CE 5B                              pop rbx
   374 000002CF 58                              pop rax
   375 000002D0 C3                              ret
   376                                  
   377                                  write_stdin_termios:								;Escribe los atributos del terminal utilizando la llamada al sistema 
   378 000002D1 50                              push rax
   379 000002D2 53                              push rbx
   380 000002D3 51                              push rcx
   381 000002D4 52                              push rdx
   382                                  
   383 000002D5 B836000000                      mov eax, 36h
   384 000002DA BB00000000                      mov ebx, stdin
   385 000002DF B902540000                      mov ecx, 5402h
   386 000002E4 BA[CB090000]                    mov edx, termios
   387 000002E9 CD80                            int 80h
   388                                  
   389 000002EB 5A                              pop rdx
   390 000002EC 59                              pop rcx
   391 000002ED 5B                              pop rbx
   392 000002EE 58                              pop rax
   393 000002EF C3                              ret
   394                                  
   395                                  
   396                                  mostrar_tiempo:
   397 000002F0 50                          push rax
   398 000002F1 51                          push rcx
   399 000002F2 52                          push rdx
   400 000002F3 57                          push rdi
   401 000002F4 56                          push rsi
   402                                  
   403 000002F5 4C8B25(1F000000)            mov r12, [tiempo_posicion] 
   404 000002FC 488B05(27000000)            mov rax, [time_buffer] ; Obtener el tiempo guardado 
   405                                  
   406 00000303 49890424                    mov [r12], rax ; Guardar el dígito en pantalla
   407 00000307 49FFCC                      dec r12       ; Mover el puntero a la izquierda
   408                                  
   409 0000030A 58                          pop rax
   410 0000030B 59                          pop rcx
   411 0000030C 5A                          pop rdx
   412 0000030D 5F                          pop rdi
   413 0000030E 5E                          pop rsi
   414                                  
   415 0000030F C3                          ret
   416                                  
   417                                  
   418                                  ; Function: print_player1
   419                                  ; This function moves the player1 in the game
   420                                  ; Arguments: none
   421                                  ;
   422                                  ; Return;
   423                                  ;	void
   424                                  print_player1:
   425                                    
   426 00000310 4C8B05(EF090000)        	mov r8, [player1_position] 
   427                                  	.write_player:
   428 00000317 41C600B0                		mov byte [r8], char_player1
   429 0000031B C3                      	ret
   430                                  
   431                                  ; Function: move_player1
   432                                  ; Mueve al Jugador 1 en la direccion especificada
   433                                  ; Argumentos:
   434                                  ;   rdi: direccion (up_direction, down_direction, left_direction, right_direction)
   435                                  ; Return:
   436                                  ;	void
   437                                  move_player1:
   438                                  
   439 0000031C 50                      	push rax
   440 0000031D 51                      	push rcx
   441                                  
   442 0000031E 4C8B2D(0F0A0000)        	mov r13, [colj]
   443 00000325 4983FD01                	cmp r13, 1
   444 00000329 0F845B070000            	je .endp
   445                                  	  
   446 0000032F 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   447 00000333 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   448                                  
   449 00000335 4883FF03                	cmp rdi, down_direction
   450 00000339 0F8471020000            	je .move_down
   451                                  
   452 0000033F 4883FF01                	cmp rdi, right_direction
   453 00000343 0F8472060000            	je .move_right
   454                                  
   455 00000349 4883FFFF                	cmp rdi, left_direction
   456 0000034D 0F84BD040000            	je .move_left
   457                                  
   458                                  	.move_up:
   459 00000353 4C8B05(EF090000)        		mov r8, [player1_position]
   460                                  
   461                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   462 0000035A 4981F8[57020000]        		cmp r8, board + 109 + ((column_cells + 2) * 4)
   463 00000361 0F8C23070000            		jl .endp
   464                                  
   465 00000367 4981F8[6C040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   466 0000036E 0F8416070000            		je .endp 
   467 00000374 4981F8[6D040000]        		cmp r8, board + 83 + ((column_cells + 2) * 9)
   468 0000037B 0F8409070000            		je .endp
   469 00000381 4981F8[6E040000]        		cmp r8, board + 84 + ((column_cells + 2) * 9)
   470 00000388 0F84FC060000            		je .endp
   471 0000038E 4981F8[6F040000]        		cmp r8, board + 85 + ((column_cells + 2) * 9)
   472 00000395 0F84EF060000            		je .endp
   473 0000039B 4981F8[70040000]        		cmp r8, board + 86 + ((column_cells + 2) * 9)
   474 000003A2 0F84E2060000            		je .endp
   475 000003A8 4981F8[71040000]        		cmp r8, board + 87 + ((column_cells + 2) * 9)
   476 000003AF 0F84D5060000            		je .endp
   477 000003B5 4981F8[72040000]        		cmp r8, board + 88 + ((column_cells + 2) * 9)
   478 000003BC 0F84C8060000            		je .endp
   479 000003C2 4981F8[73040000]        		cmp r8, board + 89 + ((column_cells + 2) * 9)
   480 000003C9 0F84BB060000            		je .endp
   481 000003CF 4981F8[74040000]        		cmp r8, board + 90 + ((column_cells + 2) * 9)
   482 000003D6 0F84AE060000            		je .endp
   483 000003DC 4981F8[75040000]        		cmp r8, board + 91 + ((column_cells + 2) * 9)
   484 000003E3 0F84A1060000            		je .endp
   485 000003E9 4981F8[76040000]        		cmp r8, board + 92 + ((column_cells + 2) * 9)
   486 000003F0 0F8494060000            		je .endp
   487 000003F6 4981F8[77040000]        		cmp r8, board + 93 + ((column_cells + 2) * 9)
   488 000003FD 0F8487060000            		je .endp
   489 00000403 4981F8[78040000]        		cmp r8, board + 94 + ((column_cells + 2) * 9)
   490 0000040A 0F847A060000            		je .endp
   491 00000410 4981F8[79040000]        		cmp r8, board + 95 + ((column_cells + 2) * 9)
   492 00000417 0F846D060000            		je .endp
   493 0000041D 4981F8[7A040000]        		cmp r8, board + 96 + ((column_cells + 2) * 9)
   494 00000424 0F8460060000            		je .endp
   495 0000042A 4981F8[7B040000]        		cmp r8, board + 97 + ((column_cells + 2) * 9)
   496 00000431 0F8453060000            		je .endp
   497 00000437 4981F8[7C040000]        		cmp r8, board + 98 + ((column_cells + 2) * 9)
   498 0000043E 0F8446060000            		je .endp
   499 00000444 4981F8[7D040000]        		cmp r8, board + 99 + ((column_cells + 2) * 9)
   500 0000044B 0F8439060000            		je .endp
   501                                  
   502 00000451 4981F8[A0060000]        		cmp r8, board + 86 + ((column_cells + 2) * 14)
   503 00000458 0F842C060000            		je .endp
   504 0000045E 4981F8[A1060000]        		cmp r8, board + 87 + ((column_cells + 2) * 14)
   505 00000465 0F841F060000            		je .endp
   506 0000046B 4981F8[A2060000]        		cmp r8, board + 88 + ((column_cells + 2) * 14)
   507 00000472 0F8412060000            		je .endp
   508 00000478 4981F8[A3060000]        		cmp r8, board + 89 + ((column_cells + 2) * 14)
   509 0000047F 0F8405060000            		je .endp
   510 00000485 4981F8[A4060000]        		cmp r8, board + 90 + ((column_cells + 2) * 14)
   511 0000048C 0F84F8050000            		je .endp
   512 00000492 4981F8[A5060000]        		cmp r8, board + 91 + ((column_cells + 2) * 14)
   513 00000499 0F84EB050000            		je .endp
   514 0000049F 4981F8[A6060000]        		cmp r8, board + 92 + ((column_cells + 2) * 14)
   515 000004A6 0F84DE050000            		je .endp
   516 000004AC 4981F8[A7060000]        		cmp r8, board + 93 + ((column_cells + 2) * 14)
   517 000004B3 0F84D1050000            		je .endp
   518 000004B9 4981F8[A8060000]        		cmp r8, board + 94 + ((column_cells + 2) * 14)
   519 000004C0 0F84C4050000            		je .endp
   520 000004C6 4981F8[A9060000]        		cmp r8, board + 95 + ((column_cells + 2) * 14)
   521 000004CD 0F84B7050000            		je .endp
   522 000004D3 4981F8[AA060000]        		cmp r8, board + 96 + ((column_cells + 2) * 14)
   523 000004DA 0F84AA050000            		je .endp
   524 000004E0 4981F8[AB060000]        		cmp r8, board + 97 + ((column_cells + 2) * 14)
   525 000004E7 0F849D050000            		je .endp
   526 000004ED 4981F8[AC060000]        		cmp r8, board + 98 + ((column_cells + 2) * 14)
   527 000004F4 0F8490050000            		je .endp
   528 000004FA 4981F8[AD060000]        		cmp r8, board + 99 + ((column_cells + 2) * 14)
   529 00000501 0F8483050000            		je .endp
   530 00000507 4981F8[AE060000]        		cmp r8, board + 100 + ((column_cells + 2) * 14)
   531 0000050E 0F8476050000            		je .endp
   532 00000514 4981F8[AF060000]        		cmp r8, board + 101 + ((column_cells + 2) * 14)
   533 0000051B 0F8469050000            		je .endp
   534 00000521 4981F8[B0060000]        		cmp r8, board + 102 + ((column_cells + 2) * 14)
   535 00000528 0F845C050000            		je .endp
   536 0000052E 4981F8[B1060000]        		cmp r8, board + 103 + ((column_cells + 2) * 14)
   537 00000535 0F844F050000            		je .endp
   538 0000053B 4981F8[B2060000]        		cmp r8, board + 104 + ((column_cells + 2) * 14)
   539 00000542 0F8442050000            		je .endp
   540 00000548 4981F8[B3060000]        		cmp r8, board + 105 + ((column_cells + 2) * 14)
   541 0000054F 0F8435050000            		je .endp
   542 00000555 4981F8[B4060000]        		cmp r8, board + 106 + ((column_cells + 2) * 14)
   543 0000055C 0F8428050000            		je .endp
   544 00000562 4981F8[B5060000]        		cmp r8, board + 107 + ((column_cells + 2) * 14)
   545 00000569 0F841B050000            		je .endp
   546 0000056F 4981F8[B6060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   547 00000576 0F840E050000            		je .endp
   548                                  
   549 0000057C 4981F8[13080000]        		cmp r8, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   550 00000583 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   551                                  
   552 00000585 4981F8[6E080000]        		cmp r8, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   553 0000058C 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   554                                  
   555                                  		; Aquí entra si 81 < r8 < 100
   556 0000058E EB1B                    		jmp .continuar    
   557                                  
   558                                  		.fuera_rango:
   559 00000590 4C8B0D(F7090000)        			mov r9, [player_size]
   560 00000597 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   561 0000059B 4983E870                			sub r8, 112						; Mover una fila arriba (restar 320)
   562 0000059F 4C8905(EF090000)        			mov [player1_position], r8			; Actualizar posición
   563                                  
   564 000005A6 E9DF040000              		jmp .endp
   565                                  
   566                                  		.continuar:
   567 000005AB E9DA040000              			jmp .endp
   568                                  
   569                                  	.move_down:
   570                                  
   571 000005B0 4C8B05(EF090000)        		mov r8, [player1_position]
   572                                  
   573 000005B7 4981F8[E0040000]        		cmp r8, board + 86 + ((column_cells + 2) * 10)  
   574 000005BE 0F84C6040000            		je .endp
   575 000005C4 4981F8[E1040000]        		cmp r8, board + 87 + ((column_cells + 2) * 10)  
   576 000005CB 0F84B9040000            		je .endp
   577 000005D1 4981F8[E2040000]        		cmp r8, board + 88 + ((column_cells + 2) * 10)  
   578 000005D8 0F84AC040000            		je .endp
   579 000005DE 4981F8[E3040000]        		cmp r8, board + 89 + ((column_cells + 2) * 10)  
   580 000005E5 0F849F040000            		je .endp
   581 000005EB 4981F8[E4040000]        		cmp r8, board + 90 + ((column_cells + 2) * 10)  
   582 000005F2 0F8492040000            		je .endp
   583 000005F8 4981F8[E5040000]        		cmp r8, board + 91 + ((column_cells + 2) * 10)  
   584 000005FF 0F8485040000            		je .endp
   585 00000605 4981F8[E6040000]        		cmp r8, board + 92 + ((column_cells + 2) * 10)  
   586 0000060C 0F8478040000            		je .endp
   587 00000612 4981F8[E7040000]        		cmp r8, board + 93 + ((column_cells + 2) * 10)  
   588 00000619 0F846B040000            		je .endp
   589 0000061F 4981F8[E8040000]        		cmp r8, board + 94 + ((column_cells + 2) * 10)  
   590 00000626 0F845E040000            		je .endp
   591 0000062C 4981F8[E9040000]        		cmp r8, board + 95 + ((column_cells + 2) * 10)  
   592 00000633 0F8451040000            		je .endp
   593 00000639 4981F8[EA040000]        		cmp r8, board + 96 + ((column_cells + 2) * 10)  
   594 00000640 0F8444040000            		je .endp
   595 00000646 4981F8[EB040000]        		cmp r8, board + 97 + ((column_cells + 2) * 10)  
   596 0000064D 0F8437040000            		je .endp
   597 00000653 4981F8[EC040000]        		cmp r8, board + 98 + ((column_cells + 2) * 10)  
   598 0000065A 0F842A040000            		je .endp
   599 00000660 4981F8[ED040000]        		cmp r8, board + 99 + ((column_cells + 2) * 10)  
   600 00000667 0F841D040000            		je .endp
   601 0000066D 4981F8[EE040000]        		cmp r8, board + 100 + ((column_cells + 2) * 10)  
   602 00000674 0F8410040000            		je .endp
   603 0000067A 4981F8[EF040000]        		cmp r8, board + 101 + ((column_cells + 2) * 10)  
   604 00000681 0F8403040000            		je .endp
   605 00000687 4981F8[F0040000]        		cmp r8, board + 102 + ((column_cells + 2) * 10)  
   606 0000068E 0F84F6030000            		je .endp
   607 00000694 4981F8[F1040000]        		cmp r8, board + 103 + ((column_cells + 2) * 10)  
   608 0000069B 0F84E9030000            		je .endp
   609 000006A1 4981F8[F2040000]        		cmp r8, board + 104 + ((column_cells + 2) * 10)  
   610 000006A8 0F84DC030000            		je .endp
   611 000006AE 4981F8[F3040000]        		cmp r8, board + 105 + ((column_cells + 2) * 10)  
   612 000006B5 0F84CF030000            		je .endp
   613 000006BB 4981F8[F4040000]        		cmp r8, board + 106 + ((column_cells + 2) * 10)  
   614 000006C2 0F84C2030000            		je .endp
   615 000006C8 4981F8[F5040000]        		cmp r8, board + 107 + ((column_cells + 2) * 10)  
   616 000006CF 0F84B5030000            		je .endp
   617 000006D5 4981F8[F6040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)  
   618 000006DC 0F84A8030000            		je .endp
   619                                  
   620 000006E2 4981F8[0C070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   621 000006E9 0F849B030000            		je .endp
   622 000006EF 4981F8[0D070000]        		cmp r8, board + 83 + ((column_cells + 2) * 15)
   623 000006F6 0F848E030000            		je .endp
   624 000006FC 4981F8[0E070000]        		cmp r8, board + 84 + ((column_cells + 2) * 15)
   625 00000703 0F8481030000            		je .endp
   626 00000709 4981F8[0F070000]        		cmp r8, board + 85 + ((column_cells + 2) * 15)
   627 00000710 0F8474030000            		je .endp
   628 00000716 4981F8[10070000]        		cmp r8, board + 86 + ((column_cells + 2) * 15)
   629 0000071D 0F8467030000            		je .endp
   630 00000723 4981F8[11070000]        		cmp r8, board + 87 + ((column_cells + 2) * 15)
   631 0000072A 0F845A030000            		je .endp
   632 00000730 4981F8[12070000]        		cmp r8, board + 88 + ((column_cells + 2) * 15)
   633 00000737 0F844D030000            		je .endp
   634 0000073D 4981F8[13070000]        		cmp r8, board + 89 + ((column_cells + 2) * 15)
   635 00000744 0F8440030000            		je .endp
   636 0000074A 4981F8[14070000]        		cmp r8, board + 90 + ((column_cells + 2) * 15)
   637 00000751 0F8433030000            		je .endp
   638 00000757 4981F8[15070000]        		cmp r8, board + 91 + ((column_cells + 2) * 15)
   639 0000075E 0F8426030000            		je .endp
   640 00000764 4981F8[16070000]        		cmp r8, board + 92 + ((column_cells + 2) * 15)
   641 0000076B 0F8419030000            		je .endp
   642 00000771 4981F8[17070000]        		cmp r8, board + 93 + ((column_cells + 2) * 15)
   643 00000778 0F840C030000            		je .endp
   644 0000077E 4981F8[18070000]        		cmp r8, board + 94 + ((column_cells + 2) * 15)
   645 00000785 0F84FF020000            		je .endp
   646 0000078B 4981F8[19070000]        		cmp r8, board + 95 + ((column_cells + 2) * 15)
   647 00000792 0F84F2020000            		je .endp
   648 00000798 4981F8[1A070000]        		cmp r8, board + 96 + ((column_cells + 2) * 15)
   649 0000079F 0F84E5020000            		je .endp
   650 000007A5 4981F8[1B070000]        		cmp r8, board + 97 + ((column_cells + 2) * 15)
   651 000007AC 0F84D8020000            		je .endp
   652 000007B2 4981F8[1C070000]        		cmp r8, board + 98 + ((column_cells + 2) * 15)
   653 000007B9 0F84CB020000            		je .endp
   654 000007BF 4981F8[1D070000]        		cmp r8, board + 99 + ((column_cells + 2) * 15)
   655 000007C6 0F84BE020000            		je .endp
   656                                  		
   657 000007CC 4981F8[EA080000]        		cmp r8, board + ((column_cells + 2) * 20)
   658 000007D3 0F8FB1020000            		jg .endp
   659                                  
   660                                  
   661 000007D9 4981F8[D3020000]        		cmp r8, board + 9 + ((column_cells + 2) * 6)  
   662 000007E0 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
   663                                  
   664 000007E2 4981F8[2E030000]        		cmp r8, board + 100 + ((column_cells + 2) * 6) 
   665 000007E9 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
   666                                  
   667                                  		
   668                                  
   669                                  		; Aquí entra si 81 < r8 < 100
   670 000007EB E9BBFDFFFF              		jmp .continuar    
   671                                  
   672                                  		.fuera_rango_down:
   673 000007F0 4C8B0D(F7090000)        			mov r9, [player_size]
   674 000007F7 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   675 000007FB 4983C070                			add r8, 112							; Mover una fila abajo (sumar 320)
   676 000007FF 4C8905(EF090000)        			mov [player1_position], r8			; Actualizar posición
   677                                  
   678                                  
   679 00000806 E97F020000              		jmp .endp	
   680                                  
   681                                  		.continuar_down:
   682 0000080B E97A020000              			jmp .endp
   683                                  
   684                                  
   685                                  
   686                                  		
   687                                  		
   688                                  
   689                                  	.move_left:
   690                                  
   691 00000810 4C8B2D(0F0A0000)        		mov r13, [colj]
   692 00000817 4983FD01                		cmp r13, 1
   693 0000081B 0F8469020000            		je .endp
   694                                  
   695 00000821 4C8B05(EF090000)        		mov r8, [player1_position]
   696                                  
   697                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   698 00000828 4981F8[EB010000]        		cmp r8, board + 1 + ((column_cells + 2) * 4)
   699 0000082F 0F8455020000            		je .endp 
   700                                  
   701 00000835 4981F8[5B020000]        		cmp r8, board + 1 + ((column_cells + 2) * 5)
   702 0000083C 0F8448020000            		je .endp 
   703                                  
   704 00000842 4981F8[CB020000]        		cmp r8, board + 1 + ((column_cells + 2) * 6)
   705 00000849 0F843B020000            		je .endp 
   706                                  
   707 0000084F 4981F8[3B030000]        		cmp r8, board + 1 + ((column_cells + 2) * 7)
   708 00000856 0F842E020000            		je .endp 
   709                                  
   710 0000085C 4981F8[AB030000]        		cmp r8, board + 1 + ((column_cells + 2) * 8)
   711 00000863 0F8421020000            		je .endp 
   712                                  
   713 00000869 4981F8[1B040000]        		cmp r8, board + 1 + ((column_cells + 2) * 9)
   714 00000870 0F8414020000            		je .endp 
   715                                  	
   716 00000876 4981F8[8B040000]        		cmp r8, board + 1 + ((column_cells + 2) * 10)
   717 0000087D 0F8407020000            		je .endp 
   718                                  
   719 00000883 4981F8[FB040000]        		cmp r8, board + 1 + ((column_cells + 2) * 11)
   720 0000088A 0F84FA010000            		je .endp 
   721                                  
   722 00000890 4981F8[6B050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   723 00000897 0F84ED010000            		je .endp 
   724                                  
   725 0000089D 4981F8[6B050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   726 000008A4 0F84E0010000            		je .endp 
   727                                  
   728 000008AA 4981F8[DB050000]        		cmp r8, board + 1 + ((column_cells + 2) * 13)
   729 000008B1 0F84D3010000            		je .endp 
   730                                  
   731 000008B7 4981F8[4B060000]        		cmp r8, board + 1 + ((column_cells + 2) * 14)
   732 000008BE 0F84C6010000            		je .endp 
   733                                  
   734 000008C4 4981F8[BB060000]        		cmp r8, board + 1 + ((column_cells + 2) * 15)
   735 000008CB 0F84B9010000            		je .endp 
   736                                  
   737 000008D1 4981F8[2B070000]        		cmp r8, board + 1 + ((column_cells + 2) * 16)
   738 000008D8 0F84AC010000            		je .endp 
   739                                  
   740 000008DE 4981F8[9B070000]        		cmp r8, board + 1 + ((column_cells + 2) * 17)
   741 000008E5 0F849F010000            		je .endp 
   742                                  
   743 000008EB 4981F8[0B080000]        		cmp r8, board + 1 + ((column_cells + 2) * 18)
   744 000008F2 0F8492010000            		je .endp 
   745                                  
   746 000008F8 4981F8[7B080000]        		cmp r8, board + 1 + ((column_cells + 2) * 19)
   747 000008FF 0F8485010000            		je .endp
   748                                  
   749 00000905 4981F8[EB080000]        		cmp r8, board + 1 + ((column_cells + 2) * 20)
   750 0000090C 0F8478010000            		je .endp
   751                                  
   752 00000912 4981F8[9E030000]        		cmp r8, board + 100 + ((column_cells + 2) * 7)
   753 00000919 0F846B010000            		je .endp
   754                                  
   755 0000091F 4981F8[0E040000]        		cmp r8, board + 100 + ((column_cells + 2) * 8)
   756 00000926 0F845E010000            		je .endp
   757                                  
   758 0000092C 4981F8[6C040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   759 00000933 0F8451010000            		je .endp
   760                                  
   761                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
   762 00000939 4981F8[DC040000]        		cmp r8, board + 82 + ((column_cells + 2) * 10)
   763 00000940 0F8444010000            		je .endp
   764                                  
   765 00000946 4981F8[4C050000]        		cmp r8, board + 82 + ((column_cells + 2) * 11)
   766 0000094D 0F8437010000            		je .endp
   767                                  
   768 00000953 4981F8[BC050000]        		cmp r8, board + 82 + ((column_cells + 2) * 12)
   769 0000095A 0F842A010000            		je .endp
   770                                  
   771 00000960 4981F8[2C060000]        		cmp r8, board + 82 + ((column_cells + 2) * 13)
   772 00000967 0F841D010000            		je .endp
   773                                  
   774 0000096D 4981F8[9C060000]        		cmp r8, board + 82 + ((column_cells + 2) * 14)
   775 00000974 0F8410010000            		je .endp
   776                                  
   777 0000097A 4981F8[0C070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   778 00000981 0F8403010000            		je .endp
   779                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
   780                                  
   781 00000987 4981F8[8E070000]        		cmp r8, board + 100 + ((column_cells + 2) * 16)
   782 0000098E 0F84F6000000            		je .endp
   783                                  
   784 00000994 4981F8[FE070000]        		cmp r8, board + 100 + ((column_cells + 2) * 17)
   785 0000099B 0F84E9000000            		je .endp
   786                                  
   787 000009A1 4C8B0D(F7090000)        		mov r9, [player_size]
   788 000009A8 41C60020                		mov byte [r8], char_space	; Limpiar el último carácter del palet
   789 000009AC 49FFC8                  		dec r8								; Mover la posición del palet una unidad a la izquierda
   790 000009AF 4C8905(EF090000)        		mov [player1_position], r8			; Actualizar la posición del palet en la memoria
   791                                  
   792 000009B6 E9CF000000              		jmp .endp	
   793                                  							 
   794                                  	.move_right:
   795                                  
   796 000009BB 4C8B2D(0F0A0000)        		mov r13, [colj]
   797 000009C2 4983FD02                		cmp r13, 2
   798 000009C6 0F84BE000000            		je .endp
   799                                  
   800 000009CC 4C8B05(EF090000)        		mov r8, [player1_position]
   801                                  
   802                                  		
   803 000009D3 4981F8[56020000]        		cmp r8, board + 108 + ((column_cells + 2) * 4)
   804 000009DA 0F84AA000000            		je .endp
   805                                  
   806 000009E0 4981F8[C6020000]        		cmp r8, board + 108 + ((column_cells + 2) * 5)
   807 000009E7 0F849D000000            		je .endp
   808                                  
   809 000009ED 4981F8[36030000]        		cmp r8, board + 108 + ((column_cells + 2) * 6)
   810 000009F4 0F8490000000            		je .endp
   811                                  
   812 000009FA 4981F8[A6030000]        		cmp r8, board + 108 + ((column_cells + 2) * 7)
   813 00000A01 0F8483000000            		je .endp
   814                                  
   815 00000A07 4981F8[16040000]        		cmp r8, board + 108 + ((column_cells + 2) * 8)
   816 00000A0E 747A                    		je .endp
   817                                  
   818 00000A10 4981F8[86040000]        		cmp r8, board + 108 + ((column_cells + 2) * 9)
   819 00000A17 7471                    		je .endp
   820                                  
   821 00000A19 4981F8[F6040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)
   822 00000A20 7468                    		je .endp
   823                                  
   824 00000A22 4981F8[4F050000]        		cmp r8, board + 85 + ((column_cells + 2) * 11)
   825 00000A29 745F                    		je .endp
   826                                  
   827 00000A2B 4981F8[BF050000]        		cmp r8, board + 85 + ((column_cells + 2) * 12)
   828 00000A32 7456                    		je .endp
   829                                  
   830 00000A34 4981F8[2F060000]        		cmp r8, board + 85 + ((column_cells + 2) * 13)
   831 00000A3B 744D                    		je .endp
   832                                  
   833 00000A3D 4981F8[B6060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   834 00000A44 7444                    		je .endp
   835                                  
   836 00000A46 4981F8[26070000]        		cmp r8, board + 108 + ((column_cells + 2) * 15)
   837 00000A4D 743B                    		je .endp
   838                                  
   839 00000A4F 4981F8[96070000]        		cmp r8, board + 108 + ((column_cells + 2) * 16)
   840 00000A56 7432                    		je .endp
   841                                  
   842 00000A58 4981F8[06080000]        		cmp r8, board + 108 + ((column_cells + 2) * 17)
   843 00000A5F 7429                    		je .endp
   844                                  
   845 00000A61 4981F8[76080000]        		cmp r8, board + 108 + ((column_cells + 2) * 18)
   846 00000A68 7420                    		je .endp
   847                                  
   848 00000A6A 4981F8[E6080000]        		cmp r8, board + 108 + ((column_cells + 2) * 19)
   849 00000A71 7417                    		je .endp
   850                                  
   851 00000A73 4981F8[56090000]        		cmp r8, board + 108 + ((column_cells + 2) * 20)
   852 00000A7A 740E                    		je .endp
   853                                  
   854 00000A7C 41C60020                		mov byte [r8], char_space
   855 00000A80 49FFC0                  		inc r8
   856 00000A83 4C8905(EF090000)        		mov [player1_position], r8
   857                                   
   858                                  
   859                                  
   860                                  	.endp:
   861 00000A8A 48C705(0F0A0000)00-     		mov qword [colj], 0
   861 00000A92 000000             
   862                                  
   863 00000A95 58                      	pop rax
   864 00000A96 59                      	pop rcx
   865                                  	 
   866 00000A97 C3                      	ret
   867                                  
   868                                  ; Primera definición
   869                                  print_bot:
   870 00000A98 4C8B0D(FF090000)            mov r9, [bot_position]
   871                                      .write_pallet_bot1:
   872 00000A9F 41C60162                        mov byte [r9], char_bot
   873 00000AA3 C3                          ret
   874                                  
   875                                  ; Segunda definición
   876                                  print_bot_position:
   877 00000AA4 4C8B15(FF090000)            mov r10, [bot_position]
   878                                      .write_pallet_bot2:
   879 00000AAB 41C60262                        mov byte [r10], char_bot
   880 00000AAF C3                          ret
   881                                  
   882                                  ; Funcion generar un numero aleatorio entre 100 y 150 para la velocidad 
   883                                  generate_random:
   884                                      ; Abrir /dev/urandom para leer un byte aleatorio
   885 00000AB0 57                      	push rdi
   886 00000AB1 56                      	push rsi
   887 00000AB2 52                      	push rdx
   888 00000AB3 50                      	push rax
   889                                  
   890 00000AB4 B800000000                  mov rax, 0                ; sys_read
   891 00000AB9 48BF-                       mov rdi, urandom          ; Descriptor de archivo para /dev/urandom
   891 00000ABB [0000000000000000] 
   892 00000AC3 48BE-                       mov rsi, random_value     ; Dirección donde se guarda el byte aleatorio
   892 00000AC5 [0800000000000000] 
   893 00000ACD BA01000000                  mov rdx, 1                ; Leer 1 byte
   894 00000AD2 0F05                        syscall                   ; Llamada al sistema para leer
   895                                  
   896                                      ; Reducir el rango del número aleatorio a 0-49
   897 00000AD4 480FB605(08000000)          movzx rax, byte [random_value]  ; Cargar el byte aleatorio en rax
   898 00000ADC 4831D2                      xor rdx, rdx              ; Limpiar rdx para la division
   899 00000ADF B932000000                  mov rcx, 50               ; Divisor (rango deseado: 50 numeros)
   900 00000AE4 48F7F1                      div rcx                   ; rax = rax / rcx, rdx = rax % rcx
   901                                      ; Ahora rdx contiene el número aleatorio en el rango 0-49
   902                                  
   903                                      ; Ajustar el rango base a 100-150
   904 00000AE7 4883C264                    add rdx, 100 ; suma 100 para obtener el rango deseado
   905                                  
   906                                      ; Guardar el resultado en una variable o registro
   907 00000AEB 488915(1A000000)            mov [random_result], rdx  ; Guardar el número aleatorio generado
   908                                  
   909 00000AF2 5F                      	pop rdi
   910 00000AF3 5E                      	pop rsi
   911 00000AF4 5A                      	pop rdx
   912 00000AF5 58                      	pop rax
   913                                  
   914 00000AF6 C3                          ret
   915                                  
   916                                  ; Función: set_bot_speed
   917                                  ; Establece la velocidad del bot de manera aleatoria
   918                                  set_bot_speed:
   919 00000AF7 52                      	push rdx
   920                                  	; Llamar a la funcion para generar numero random
   921 00000AF8 E8B3FFFFFF              	call generate_random
   922                                  	; Guardar el numero aleatorio en la variable de velocidad del bot
   923 00000AFD 488915(22000000)        	mov [bot_speed], rdx ; Guardar el número aleatorio generado en bot_speed
   924                                  
   925 00000B04 5A                      	pop rdx
   926 00000B05 C3                      	ret
   927                                  
   928                                  
   929                                  ; Función: move_bot
   930                                  ; Mueve el bot en la dirección definida
   931                                  ; Return:
   932                                  ;   void
   933                                  move_bot:
   934                                  
   935 00000B06 50                      	push rax
   936 00000B07 51                      	push rcx
   937                                  
   938 00000B08 4C8B1D(0F0A0000)        	mov r11, [colj]              ; Cargar el valor de la variable `colj` en r11
   939 00000B0F 4983FB01                	cmp r11, 1                   ; Comparar el valor de `colj` con 1
   940 00000B13 0F84D5000000            	je .endp                     ; Si `colj` es igual a 1, saltar al final de la función
   941                                      
   942 00000B19 4883FF01                	cmp rdi, right_direction
   943 00000B1D 7400                    	je .move_right
   944                                  
   945                                  							 
   946                                  	.move_right:
   947                                  
   948 00000B1F 4C8B1D(0F0A0000)        		mov r11, [colj]
   949 00000B26 4983FB02                		cmp r11, 2
   950 00000B2A 0F84BE000000            		je .endp
   951                                  
   952 00000B30 4C8B15(FF090000)        		mov r10, [bot_position]
   953                                  
   954                                  		
   955 00000B37 4981FA[56020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
   956 00000B3E 0F84AA000000            		je .endp
   957                                  
   958 00000B44 4981FA[C6020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
   959 00000B4B 0F849D000000            		je .endp
   960                                  
   961 00000B51 4981FA[36030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
   962 00000B58 0F8490000000            		je .endp
   963                                  
   964 00000B5E 4981FA[A6030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
   965 00000B65 0F8483000000            		je .endp
   966                                  
   967 00000B6B 4981FA[16040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
   968 00000B72 747A                    		je .endp
   969                                  
   970 00000B74 4981FA[86040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
   971 00000B7B 7471                    		je .endp
   972                                  
   973 00000B7D 4981FA[F6040000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
   974 00000B84 7468                    		je .endp
   975                                  
   976 00000B86 4981FA[4F050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
   977 00000B8D 745F                    		je .endp
   978                                  
   979 00000B8F 4981FA[BF050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
   980 00000B96 7456                    		je .endp
   981                                  
   982 00000B98 4981FA[2F060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
   983 00000B9F 744D                    		je .endp
   984                                  
   985 00000BA1 4981FA[B6060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
   986 00000BA8 7444                    		je .endp
   987                                  
   988 00000BAA 4981FA[26070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
   989 00000BB1 743B                    		je .endp
   990                                  
   991 00000BB3 4981FA[96070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
   992 00000BBA 7432                    		je .endp
   993                                  
   994 00000BBC 4981FA[06080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
   995 00000BC3 7429                    		je .endp
   996                                  
   997 00000BC5 4981FA[76080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
   998 00000BCC 7420                    		je .endp
   999                                  
  1000 00000BCE 4981FA[E6080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
  1001 00000BD5 7417                    		je .endp
  1002                                  
  1003 00000BD7 4981FA[56090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
  1004 00000BDE 740E                    		je .endp
  1005                                  
  1006 00000BE0 41C60220                		mov byte [r10], char_space
  1007 00000BE4 49FFC2                  		inc r10
  1008 00000BE7 4C8915(FF090000)        		mov [bot_position], r10
  1009                                   
  1010                                  	.endp:
  1011 00000BEE 48C705(0F0A0000)00-     		mov qword [colj], 0
  1011 00000BF6 000000             
  1012                                  
  1013 00000BF9 58                      	pop rax
  1014 00000BFA 59                      	pop rcx
  1015                                  	 
  1016 00000BFB C3                      	ret
  1017                                  
  1018                                  ; Funcion: print_player2
  1019                                  ; Imprime al Jugador 2 en su posición actual
  1020                                  print_player2:
  1021 00000BFC 4C8B1D(070A0000)        	mov r11, [player2_position] 
  1022                                  	.write_player:
  1023 00000C03 41C6034A                		mov byte [r11], char_player2	 
  1024 00000C07 C3                      	ret
  1025                                  
  1026                                  ; Funcion: move_player2
  1027                                  ; Mueve al Jugador 2 en la dirección especificada
  1028                                  ; Argumentos:
  1029                                  ;   rdi: dirección (up_direction, down_direction, left_direction, right_direction)
  1030                                  move_player2:
  1031 00000C08 50                          push rax
  1032 00000C09 51                          push rcx
  1033                                  
  1034 00000C0A 4C8B25(0F0A0000)        	mov r12, [colj]
  1035 00000C11 4983FC01                	cmp r12, 1
  1036 00000C15 0F845B070000            	je .endp
  1037                                  	  
  1038 00000C1B 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
  1039 00000C1F 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
  1040                                  
  1041 00000C21 4883FF03                	cmp rdi, down_direction
  1042 00000C25 0F8471020000            	je .move_down
  1043                                  
  1044 00000C2B 4883FF01                	cmp rdi, right_direction
  1045 00000C2F 0F8472060000            	je .move_right
  1046                                  
  1047 00000C35 4883FFFF                	cmp rdi, left_direction
  1048 00000C39 0F84BD040000            	je .move_left
  1049                                  
  1050                                  	.move_up:
  1051 00000C3F 4C8B15(070A0000)        		mov r10, [player2_position]
  1052                                  
  1053                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1054 00000C46 4981FA[57020000]        		cmp r10, board + 109 + ((column_cells + 2) * 4)
  1055 00000C4D 0F8C23070000            		jl .endp
  1056                                  
  1057 00000C53 4981FA[6C040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1058 00000C5A 0F8416070000            		je .endp 
  1059 00000C60 4981FA[6D040000]        		cmp r10, board + 83 + ((column_cells + 2) * 9)
  1060 00000C67 0F8409070000            		je .endp
  1061 00000C6D 4981FA[6E040000]        		cmp r10, board + 84 + ((column_cells + 2) * 9)
  1062 00000C74 0F84FC060000            		je .endp
  1063 00000C7A 4981FA[6F040000]        		cmp r10, board + 85 + ((column_cells + 2) * 9)
  1064 00000C81 0F84EF060000            		je .endp
  1065 00000C87 4981FA[70040000]        		cmp r10, board + 86 + ((column_cells + 2) * 9)
  1066 00000C8E 0F84E2060000            		je .endp
  1067 00000C94 4981FA[71040000]        		cmp r10, board + 87 + ((column_cells + 2) * 9)
  1068 00000C9B 0F84D5060000            		je .endp
  1069 00000CA1 4981FA[72040000]        		cmp r10, board + 88 + ((column_cells + 2) * 9)
  1070 00000CA8 0F84C8060000            		je .endp
  1071 00000CAE 4981FA[73040000]        		cmp r10, board + 89 + ((column_cells + 2) * 9)
  1072 00000CB5 0F84BB060000            		je .endp
  1073 00000CBB 4981FA[74040000]        		cmp r10, board + 90 + ((column_cells + 2) * 9)
  1074 00000CC2 0F84AE060000            		je .endp
  1075 00000CC8 4981FA[75040000]        		cmp r10, board + 91 + ((column_cells + 2) * 9)
  1076 00000CCF 0F84A1060000            		je .endp
  1077 00000CD5 4981FA[76040000]        		cmp r10, board + 92 + ((column_cells + 2) * 9)
  1078 00000CDC 0F8494060000            		je .endp
  1079 00000CE2 4981FA[77040000]        		cmp r10, board + 93 + ((column_cells + 2) * 9)
  1080 00000CE9 0F8487060000            		je .endp
  1081 00000CEF 4981FA[78040000]        		cmp r10, board + 94 + ((column_cells + 2) * 9)
  1082 00000CF6 0F847A060000            		je .endp
  1083 00000CFC 4981FA[79040000]        		cmp r10, board + 95 + ((column_cells + 2) * 9)
  1084 00000D03 0F846D060000            		je .endp
  1085 00000D09 4981FA[7A040000]        		cmp r10, board + 96 + ((column_cells + 2) * 9)
  1086 00000D10 0F8460060000            		je .endp
  1087 00000D16 4981FA[7B040000]        		cmp r10, board + 97 + ((column_cells + 2) * 9)
  1088 00000D1D 0F8453060000            		je .endp
  1089 00000D23 4981FA[7C040000]        		cmp r10, board + 98 + ((column_cells + 2) * 9)
  1090 00000D2A 0F8446060000            		je .endp
  1091 00000D30 4981FA[7D040000]        		cmp r10, board + 99 + ((column_cells + 2) * 9)
  1092 00000D37 0F8439060000            		je .endp
  1093                                  
  1094 00000D3D 4981FA[A0060000]        		cmp r10, board + 86 + ((column_cells + 2) * 14)
  1095 00000D44 0F842C060000            		je .endp
  1096 00000D4A 4981FA[A1060000]        		cmp r10, board + 87 + ((column_cells + 2) * 14)
  1097 00000D51 0F841F060000            		je .endp
  1098 00000D57 4981FA[A2060000]        		cmp r10, board + 88 + ((column_cells + 2) * 14)
  1099 00000D5E 0F8412060000            		je .endp
  1100 00000D64 4981FA[A3060000]        		cmp r10, board + 89 + ((column_cells + 2) * 14)
  1101 00000D6B 0F8405060000            		je .endp
  1102 00000D71 4981FA[A4060000]        		cmp r10, board + 90 + ((column_cells + 2) * 14)
  1103 00000D78 0F84F8050000            		je .endp
  1104 00000D7E 4981FA[A5060000]        		cmp r10, board + 91 + ((column_cells + 2) * 14)
  1105 00000D85 0F84EB050000            		je .endp
  1106 00000D8B 4981FA[A6060000]        		cmp r10, board + 92 + ((column_cells + 2) * 14)
  1107 00000D92 0F84DE050000            		je .endp
  1108 00000D98 4981FA[A7060000]        		cmp r10, board + 93 + ((column_cells + 2) * 14)
  1109 00000D9F 0F84D1050000            		je .endp
  1110 00000DA5 4981FA[A8060000]        		cmp r10, board + 94 + ((column_cells + 2) * 14)
  1111 00000DAC 0F84C4050000            		je .endp
  1112 00000DB2 4981FA[A9060000]        		cmp r10, board + 95 + ((column_cells + 2) * 14)
  1113 00000DB9 0F84B7050000            		je .endp
  1114 00000DBF 4981FA[AA060000]        		cmp r10, board + 96 + ((column_cells + 2) * 14)
  1115 00000DC6 0F84AA050000            		je .endp
  1116 00000DCC 4981FA[AB060000]        		cmp r10, board + 97 + ((column_cells + 2) * 14)
  1117 00000DD3 0F849D050000            		je .endp
  1118 00000DD9 4981FA[AC060000]        		cmp r10, board + 98 + ((column_cells + 2) * 14)
  1119 00000DE0 0F8490050000            		je .endp
  1120 00000DE6 4981FA[AD060000]        		cmp r10, board + 99 + ((column_cells + 2) * 14)
  1121 00000DED 0F8483050000            		je .endp
  1122 00000DF3 4981FA[AE060000]        		cmp r10, board + 100 + ((column_cells + 2) * 14)
  1123 00000DFA 0F8476050000            		je .endp
  1124 00000E00 4981FA[AF060000]        		cmp r10, board + 101 + ((column_cells + 2) * 14)
  1125 00000E07 0F8469050000            		je .endp
  1126 00000E0D 4981FA[B0060000]        		cmp r10, board + 102 + ((column_cells + 2) * 14)
  1127 00000E14 0F845C050000            		je .endp
  1128 00000E1A 4981FA[B1060000]        		cmp r10, board + 103 + ((column_cells + 2) * 14)
  1129 00000E21 0F844F050000            		je .endp
  1130 00000E27 4981FA[B2060000]        		cmp r10, board + 104 + ((column_cells + 2) * 14)
  1131 00000E2E 0F8442050000            		je .endp
  1132 00000E34 4981FA[B3060000]        		cmp r10, board + 105 + ((column_cells + 2) * 14)
  1133 00000E3B 0F8435050000            		je .endp
  1134 00000E41 4981FA[B4060000]        		cmp r10, board + 106 + ((column_cells + 2) * 14)
  1135 00000E48 0F8428050000            		je .endp
  1136 00000E4E 4981FA[B5060000]        		cmp r10, board + 107 + ((column_cells + 2) * 14)
  1137 00000E55 0F841B050000            		je .endp
  1138 00000E5B 4981FA[B6060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1139 00000E62 0F840E050000            		je .endp
  1140                                  
  1141 00000E68 4981FA[13080000]        		cmp r10, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
  1142 00000E6F 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
  1143                                  
  1144 00000E71 4981FA[6E080000]        		cmp r10, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
  1145 00000E78 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
  1146                                  
  1147                                  		; Aquí entra si 81 < r10 < 100
  1148 00000E7A EB1B                    		jmp .continuar    
  1149                                  
  1150                                  		.fuera_rango:
  1151 00000E7C 4C8B0D(F7090000)        			mov r9, [player_size]
  1152 00000E83 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1153 00000E87 4983EA70                			sub r10, 112						; Mover una fila arriba (restar 320)
  1154 00000E8B 4C8915(070A0000)        			mov [player2_position], r10			; Actualizar posición
  1155                                  
  1156 00000E92 E9DF040000              		jmp .endp
  1157                                  
  1158                                  		.continuar:
  1159 00000E97 E9DA040000              			jmp .endp
  1160                                  
  1161                                  	.move_down:
  1162                                  
  1163 00000E9C 4C8B15(070A0000)        		mov r10, [player2_position]
  1164                                  
  1165 00000EA3 4981FA[E0040000]        		cmp r10, board + 86 + ((column_cells + 2) * 10)  
  1166 00000EAA 0F84C6040000            		je .endp
  1167 00000EB0 4981FA[E1040000]        		cmp r10, board + 87 + ((column_cells + 2) * 10)  
  1168 00000EB7 0F84B9040000            		je .endp
  1169 00000EBD 4981FA[E2040000]        		cmp r10, board + 88 + ((column_cells + 2) * 10)  
  1170 00000EC4 0F84AC040000            		je .endp
  1171 00000ECA 4981FA[E3040000]        		cmp r10, board + 89 + ((column_cells + 2) * 10)  
  1172 00000ED1 0F849F040000            		je .endp
  1173 00000ED7 4981FA[E4040000]        		cmp r10, board + 90 + ((column_cells + 2) * 10)  
  1174 00000EDE 0F8492040000            		je .endp
  1175 00000EE4 4981FA[E5040000]        		cmp r10, board + 91 + ((column_cells + 2) * 10)  
  1176 00000EEB 0F8485040000            		je .endp
  1177 00000EF1 4981FA[E6040000]        		cmp r10, board + 92 + ((column_cells + 2) * 10)  
  1178 00000EF8 0F8478040000            		je .endp
  1179 00000EFE 4981FA[E7040000]        		cmp r10, board + 93 + ((column_cells + 2) * 10)  
  1180 00000F05 0F846B040000            		je .endp
  1181 00000F0B 4981FA[E8040000]        		cmp r10, board + 94 + ((column_cells + 2) * 10)  
  1182 00000F12 0F845E040000            		je .endp
  1183 00000F18 4981FA[E9040000]        		cmp r10, board + 95 + ((column_cells + 2) * 10)  
  1184 00000F1F 0F8451040000            		je .endp
  1185 00000F25 4981FA[EA040000]        		cmp r10, board + 96 + ((column_cells + 2) * 10)  
  1186 00000F2C 0F8444040000            		je .endp
  1187 00000F32 4981FA[EB040000]        		cmp r10, board + 97 + ((column_cells + 2) * 10)  
  1188 00000F39 0F8437040000            		je .endp
  1189 00000F3F 4981FA[EC040000]        		cmp r10, board + 98 + ((column_cells + 2) * 10)  
  1190 00000F46 0F842A040000            		je .endp
  1191 00000F4C 4981FA[ED040000]        		cmp r10, board + 99 + ((column_cells + 2) * 10)  
  1192 00000F53 0F841D040000            		je .endp
  1193 00000F59 4981FA[EE040000]        		cmp r10, board + 100 + ((column_cells + 2) * 10)  
  1194 00000F60 0F8410040000            		je .endp
  1195 00000F66 4981FA[EF040000]        		cmp r10, board + 101 + ((column_cells + 2) * 10)  
  1196 00000F6D 0F8403040000            		je .endp
  1197 00000F73 4981FA[F0040000]        		cmp r10, board + 102 + ((column_cells + 2) * 10)  
  1198 00000F7A 0F84F6030000            		je .endp
  1199 00000F80 4981FA[F1040000]        		cmp r10, board + 103 + ((column_cells + 2) * 10)  
  1200 00000F87 0F84E9030000            		je .endp
  1201 00000F8D 4981FA[F2040000]        		cmp r10, board + 104 + ((column_cells + 2) * 10)  
  1202 00000F94 0F84DC030000            		je .endp
  1203 00000F9A 4981FA[F3040000]        		cmp r10, board + 105 + ((column_cells + 2) * 10)  
  1204 00000FA1 0F84CF030000            		je .endp
  1205 00000FA7 4981FA[F4040000]        		cmp r10, board + 106 + ((column_cells + 2) * 10)  
  1206 00000FAE 0F84C2030000            		je .endp
  1207 00000FB4 4981FA[F5040000]        		cmp r10, board + 107 + ((column_cells + 2) * 10)  
  1208 00000FBB 0F84B5030000            		je .endp
  1209 00000FC1 4981FA[F6040000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)  
  1210 00000FC8 0F84A8030000            		je .endp
  1211                                  
  1212 00000FCE 4981FA[0C070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1213 00000FD5 0F849B030000            		je .endp
  1214 00000FDB 4981FA[0D070000]        		cmp r10, board + 83 + ((column_cells + 2) * 15)
  1215 00000FE2 0F848E030000            		je .endp
  1216 00000FE8 4981FA[0E070000]        		cmp r10, board + 84 + ((column_cells + 2) * 15)
  1217 00000FEF 0F8481030000            		je .endp
  1218 00000FF5 4981FA[0F070000]        		cmp r10, board + 85 + ((column_cells + 2) * 15)
  1219 00000FFC 0F8474030000            		je .endp
  1220 00001002 4981FA[10070000]        		cmp r10, board + 86 + ((column_cells + 2) * 15)
  1221 00001009 0F8467030000            		je .endp
  1222 0000100F 4981FA[11070000]        		cmp r10, board + 87 + ((column_cells + 2) * 15)
  1223 00001016 0F845A030000            		je .endp
  1224 0000101C 4981FA[12070000]        		cmp r10, board + 88 + ((column_cells + 2) * 15)
  1225 00001023 0F844D030000            		je .endp
  1226 00001029 4981FA[13070000]        		cmp r10, board + 89 + ((column_cells + 2) * 15)
  1227 00001030 0F8440030000            		je .endp
  1228 00001036 4981FA[14070000]        		cmp r10, board + 90 + ((column_cells + 2) * 15)
  1229 0000103D 0F8433030000            		je .endp
  1230 00001043 4981FA[15070000]        		cmp r10, board + 91 + ((column_cells + 2) * 15)
  1231 0000104A 0F8426030000            		je .endp
  1232 00001050 4981FA[16070000]        		cmp r10, board + 92 + ((column_cells + 2) * 15)
  1233 00001057 0F8419030000            		je .endp
  1234 0000105D 4981FA[17070000]        		cmp r10, board + 93 + ((column_cells + 2) * 15)
  1235 00001064 0F840C030000            		je .endp
  1236 0000106A 4981FA[18070000]        		cmp r10, board + 94 + ((column_cells + 2) * 15)
  1237 00001071 0F84FF020000            		je .endp
  1238 00001077 4981FA[19070000]        		cmp r10, board + 95 + ((column_cells + 2) * 15)
  1239 0000107E 0F84F2020000            		je .endp
  1240 00001084 4981FA[1A070000]        		cmp r10, board + 96 + ((column_cells + 2) * 15)
  1241 0000108B 0F84E5020000            		je .endp
  1242 00001091 4981FA[1B070000]        		cmp r10, board + 97 + ((column_cells + 2) * 15)
  1243 00001098 0F84D8020000            		je .endp
  1244 0000109E 4981FA[1C070000]        		cmp r10, board + 98 + ((column_cells + 2) * 15)
  1245 000010A5 0F84CB020000            		je .endp
  1246 000010AB 4981FA[1D070000]        		cmp r10, board + 99 + ((column_cells + 2) * 15)
  1247 000010B2 0F84BE020000            		je .endp
  1248                                  		
  1249 000010B8 4981FA[EA080000]        		cmp r10, board + ((column_cells + 2) * 20)
  1250 000010BF 0F8FB1020000            		jg .endp
  1251                                  
  1252                                  
  1253 000010C5 4981FA[D3020000]        		cmp r10, board + 9 + ((column_cells + 2) * 6)  
  1254 000010CC 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
  1255                                  
  1256 000010CE 4981FA[2E030000]        		cmp r10, board + 100 + ((column_cells + 2) * 6) 
  1257 000010D5 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
  1258                                  
  1259                                  		
  1260                                  
  1261                                  		; Aquí entra si 81 < r10 < 100
  1262 000010D7 E9BBFDFFFF              		jmp .continuar    
  1263                                  
  1264                                  		.fuera_rango_down:
  1265 000010DC 4C8B0D(F7090000)        			mov r9, [player_size]
  1266 000010E3 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1267 000010E7 4983C270                			add r10, 112							; Mover una fila abajo (sumar 320)
  1268 000010EB 4C8915(070A0000)        			mov [player2_position], r10			; Actualizar posición
  1269                                  
  1270                                  
  1271 000010F2 E97F020000              		jmp .endp	
  1272                                  
  1273                                  		.continuar_down:
  1274 000010F7 E97A020000              			jmp .endp
  1275                                  
  1276                                  
  1277                                  	.move_left:
  1278                                  
  1279 000010FC 4C8B2D(0F0A0000)        		mov r13, [colj]
  1280 00001103 4983FD01                		cmp r13, 1
  1281 00001107 0F8469020000            		je .endp
  1282                                  
  1283 0000110D 4C8B15(070A0000)        		mov r10, [player2_position]
  1284                                  
  1285                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1286 00001114 4981FA[EB010000]        		cmp r10, board + 1 + ((column_cells + 2) * 4)
  1287 0000111B 0F8455020000            		je .endp 
  1288                                  
  1289 00001121 4981FA[5B020000]        		cmp r10, board + 1 + ((column_cells + 2) * 5)
  1290 00001128 0F8448020000            		je .endp 
  1291                                  
  1292 0000112E 4981FA[CB020000]        		cmp r10, board + 1 + ((column_cells + 2) * 6)
  1293 00001135 0F843B020000            		je .endp 
  1294                                  
  1295 0000113B 4981FA[3B030000]        		cmp r10, board + 1 + ((column_cells + 2) * 7)
  1296 00001142 0F842E020000            		je .endp 
  1297                                  
  1298 00001148 4981FA[AB030000]        		cmp r10, board + 1 + ((column_cells + 2) * 8)
  1299 0000114F 0F8421020000            		je .endp 
  1300                                  
  1301 00001155 4981FA[1B040000]        		cmp r10, board + 1 + ((column_cells + 2) * 9)
  1302 0000115C 0F8414020000            		je .endp 
  1303                                  	
  1304 00001162 4981FA[8B040000]        		cmp r10, board + 1 + ((column_cells + 2) * 10)
  1305 00001169 0F8407020000            		je .endp 
  1306                                  
  1307 0000116F 4981FA[FB040000]        		cmp r10, board + 1 + ((column_cells + 2) * 11)
  1308 00001176 0F84FA010000            		je .endp 
  1309                                  
  1310 0000117C 4981FA[6B050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1311 00001183 0F84ED010000            		je .endp 
  1312                                  
  1313 00001189 4981FA[6B050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1314 00001190 0F84E0010000            		je .endp 
  1315                                  
  1316 00001196 4981FA[DB050000]        		cmp r10, board + 1 + ((column_cells + 2) * 13)
  1317 0000119D 0F84D3010000            		je .endp 
  1318                                  
  1319 000011A3 4981FA[4B060000]        		cmp r10, board + 1 + ((column_cells + 2) * 14)
  1320 000011AA 0F84C6010000            		je .endp 
  1321                                  
  1322 000011B0 4981FA[BB060000]        		cmp r10, board + 1 + ((column_cells + 2) * 15)
  1323 000011B7 0F84B9010000            		je .endp 
  1324                                  
  1325 000011BD 4981FA[2B070000]        		cmp r10, board + 1 + ((column_cells + 2) * 16)
  1326 000011C4 0F84AC010000            		je .endp 
  1327                                  
  1328 000011CA 4981FA[9B070000]        		cmp r10, board + 1 + ((column_cells + 2) * 17)
  1329 000011D1 0F849F010000            		je .endp 
  1330                                  
  1331 000011D7 4981FA[0B080000]        		cmp r10, board + 1 + ((column_cells + 2) * 18)
  1332 000011DE 0F8492010000            		je .endp 
  1333                                  
  1334 000011E4 4981FA[7B080000]        		cmp r10, board + 1 + ((column_cells + 2) * 19)
  1335 000011EB 0F8485010000            		je .endp
  1336                                  
  1337 000011F1 4981FA[EB080000]        		cmp r10, board + 1 + ((column_cells + 2) * 20)
  1338 000011F8 0F8478010000            		je .endp
  1339                                  
  1340 000011FE 4981FA[9E030000]        		cmp r10, board + 100 + ((column_cells + 2) * 7)
  1341 00001205 0F846B010000            		je .endp
  1342                                  
  1343 0000120B 4981FA[0E040000]        		cmp r10, board + 100 + ((column_cells + 2) * 8)
  1344 00001212 0F845E010000            		je .endp
  1345                                  
  1346 00001218 4981FA[6C040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1347 0000121F 0F8451010000            		je .endp
  1348                                  
  1349                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
  1350 00001225 4981FA[DC040000]        		cmp r10, board + 82 + ((column_cells + 2) * 10)
  1351 0000122C 0F8444010000            		je .endp
  1352                                  
  1353 00001232 4981FA[4C050000]        		cmp r10, board + 82 + ((column_cells + 2) * 11)
  1354 00001239 0F8437010000            		je .endp
  1355                                  
  1356 0000123F 4981FA[BC050000]        		cmp r10, board + 82 + ((column_cells + 2) * 12)
  1357 00001246 0F842A010000            		je .endp
  1358                                  
  1359 0000124C 4981FA[2C060000]        		cmp r10, board + 82 + ((column_cells + 2) * 13)
  1360 00001253 0F841D010000            		je .endp
  1361                                  
  1362 00001259 4981FA[9C060000]        		cmp r10, board + 82 + ((column_cells + 2) * 14)
  1363 00001260 0F8410010000            		je .endp
  1364                                  
  1365 00001266 4981FA[0C070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1366 0000126D 0F8403010000            		je .endp
  1367                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
  1368                                  
  1369 00001273 4981FA[8E070000]        		cmp r10, board + 100 + ((column_cells + 2) * 16)
  1370 0000127A 0F84F6000000            		je .endp
  1371                                  
  1372 00001280 4981FA[FE070000]        		cmp r10, board + 100 + ((column_cells + 2) * 17)
  1373 00001287 0F84E9000000            		je .endp
  1374                                  
  1375 0000128D 4C8B0D(F7090000)        		mov r9, [player_size]
  1376 00001294 41C60220                		mov byte [r10], char_space	; Limpiar el último carácter del palet
  1377 00001298 49FFCA                  		dec r10								; Mover la posición del palet una unidad a la izquierda
  1378 0000129B 4C8915(070A0000)        		mov [player2_position], r10			; Actualizar la posición del palet en la memoria
  1379                                  
  1380 000012A2 E9CF000000              		jmp .endp	
  1381                                  							 
  1382                                  	.move_right:
  1383                                  
  1384 000012A7 4C8B2D(0F0A0000)        		mov r13, [colj]
  1385 000012AE 4983FD02                		cmp r13, 2
  1386 000012B2 0F84BE000000            		je .endp
  1387                                  
  1388 000012B8 4C8B15(070A0000)        		mov r10, [player2_position]
  1389                                  
  1390                                  		
  1391 000012BF 4981FA[56020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
  1392 000012C6 0F84AA000000            		je .endp
  1393                                  
  1394 000012CC 4981FA[C6020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
  1395 000012D3 0F849D000000            		je .endp
  1396                                  
  1397 000012D9 4981FA[36030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
  1398 000012E0 0F8490000000            		je .endp
  1399                                  
  1400 000012E6 4981FA[A6030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
  1401 000012ED 0F8483000000            		je .endp
  1402                                  
  1403 000012F3 4981FA[16040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
  1404 000012FA 747A                    		je .endp
  1405                                  
  1406 000012FC 4981FA[86040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
  1407 00001303 7471                    		je .endp
  1408                                  
  1409 00001305 4981FA[F6040000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
  1410 0000130C 7468                    		je .endp
  1411                                  
  1412 0000130E 4981FA[4F050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
  1413 00001315 745F                    		je .endp
  1414                                  
  1415 00001317 4981FA[BF050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
  1416 0000131E 7456                    		je .endp
  1417                                  
  1418 00001320 4981FA[2F060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
  1419 00001327 744D                    		je .endp
  1420                                  
  1421 00001329 4981FA[B6060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1422 00001330 7444                    		je .endp
  1423                                  
  1424 00001332 4981FA[26070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
  1425 00001339 743B                    		je .endp
  1426                                  
  1427 0000133B 4981FA[96070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
  1428 00001342 7432                    		je .endp
  1429                                  
  1430 00001344 4981FA[06080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
  1431 0000134B 7429                    		je .endp
  1432                                  
  1433 0000134D 4981FA[76080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
  1434 00001354 7420                    		je .endp
  1435                                  
  1436 00001356 4981FA[E6080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
  1437 0000135D 7417                    		je .endp
  1438                                  
  1439 0000135F 4981FA[56090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
  1440 00001366 740E                    		je .endp
  1441                                  
  1442 00001368 41C60220                		mov byte [r10], char_space
  1443 0000136C 49FFC2                  		inc r10
  1444 0000136F 4C8915(070A0000)        		mov [player2_position], r10
  1445                                   
  1446                                  
  1447                                  
  1448                                  	.endp:
  1449 00001376 48C705(0F0A0000)00-     		mov qword [colj], 0
  1449 0000137E 000000             
  1450                                  
  1451 00001381 58                      	pop rax
  1452 00001382 59                      	pop rcx
  1453                                  	 
  1454 00001383 C3                      	ret
  1455                                  
  1456                                  _start: 
  1457                                      ; Obtener el tiempo inicial
  1458 00001384 B8C9000000                  mov rax, sys_time
  1459 00001389 4831FF                      xor rdi, rdi  ; Argumento nulo para sys_time
  1460 0000138C 0F05                        syscall
  1461 0000138E 488905(09000000)            mov [start_time], rax  ; Guardar el tiempo inicial
  1462                                  
  1463                                  	print clear, clear_length
   203 00001395 B801000000          <1>  mov eax, sys_write
   204 0000139A BF01000000          <1>  mov edi, 1
   205 0000139F 48BE-               <1>  mov rsi, %1
   205 000013A1 [2000000000000000]  <1>
   206 000013A9 BA07000000          <1>  mov edx, %2
   207 000013AE 0F05                <1>  syscall
  1464 000013B0 E85F020000              	call start_screen
  1465 000013B5 E884EEFFFF              	call canonical_off
  1466 000013BA E8A7EEFFFF              	call echo_off
  1467 000013BF E833F7FFFF              	call set_bot_speed
  1468                                  
  1469                                   
  1470                                  	.main_loop:
  1471                                  
  1472                                      ; Verificar el tiempo transcurrido
  1473 000013C4 B8C9000000                  mov rax, sys_time
  1474 000013C9 4831FF                      xor rdi, rdi
  1475 000013CC 0F05                        syscall
  1476 000013CE 488905(11000000)            mov [current_time], rax  ; Guardar el tiempo actual
  1477                                  
  1478                                      ; Calcular el tiempo restante
  1479 000013D5 488B05(09000000)            mov rax, [start_time]
  1480 000013DC 4883C03C                    add rax, 60  ; Tiempo límite (60 segundos)
  1481 000013E0 482B05(11000000)            sub rax, [current_time]
  1482 000013E7 4883F800                    cmp rax, 0
  1483 000013EB 0F8ECE010000                jle .time_up  ; Si el tiempo restante es <= 0, salir del juego
  1484                                  
  1485                                      ; Convertir el tiempo restante a texto
  1486 000013F1 4889C3                      mov rbx, rax
  1487 000013F4 B90A000000                  mov rcx, 10
  1488 000013F9 4831D2                      xor rdx, rdx
  1489 000013FC 48F7F1                      div rcx
  1490 000013FF 80C230                      add dl, '0'  ; Convertir a carácter ASCII
  1491 00001402 8815(28000000)              mov [time_buffer+1], dl
  1492 00001408 0430                        add al, '0'  ; Convertir a carácter ASCII  
  1493 0000140A 8805(27000000)              mov [time_buffer], al
  1494                                  
  1495                                      ; Mostrar el tiempo restante en pantalla
  1496                                      print clear, clear_length
   203 00001410 B801000000          <1>  mov eax, sys_write
   204 00001415 BF01000000          <1>  mov edi, 1
   205 0000141A 48BE-               <1>  mov rsi, %1
   205 0000141C [2000000000000000]  <1>
   206 00001424 BA07000000          <1>  mov edx, %2
   207 00001429 0F05                <1>  syscall
  1497                                  
  1498 0000142B E8C0EEFFFF              	call mostrar_tiempo
  1499                                  
  1500                                      ; Incrementar el contador del bot
  1501 00001430 488B05(2A000000)            mov rax, [bot_counter]       ; Cargar el valor actual del contador
  1502 00001437 48FFC0                  	inc rax                      ; Incrementar el contador
  1503 0000143A 488905(2A000000)        	mov [bot_counter], rax       ; Guardar el nuevo valor del contador
  1504                                  
  1505                                      ; Comparar el contador con la velocidad del bot
  1506 00001441 488B1D(22000000)            mov rbx, [bot_speed]         ; Cargar la velocidad del bot
  1507 00001448 4839D8                      cmp rax, rbx                 ; Comparar el contador con la velocidad
  1508 0000144B 7514                        jne .skip_bot_move           ; Si no coincide, saltar el movimiento del bot
  1509                                  
  1510                                      ; Restablecer el contador y mover el bot
  1511 0000144D 4831C0                      xor rax, rax                 ; Restablecer el contador a 0
  1512 00001450 488905(2A000000)            mov [bot_counter], rax       ; Guardar el valor restablecido
  1513 00001457 BF03000000                  mov rdi, down_direction      ; Dirección de movimiento del bot 
  1514 0000145C E8A5F6FFFF                  call move_bot                ; Llamar a la función para mover el bot
  1515                                  
  1516                                  	.skip_bot_move:
  1517                                  
  1518                                  
  1519 00001461 E8AAEEFFFF                  call print_player1
  1520 00001466 E82DF6FFFF                  call print_bot ; llamada a función de imprimir bots
  1521 0000146B E88CF7FFFF                  call print_player2 ; Imprimir Jugador 2
  1522                                      print board, board_size
   203 00001470 B801000000          <1>  mov eax, sys_write
   204 00001475 BF01000000          <1>  mov edi, 1
   205 0000147A 48BE-               <1>  mov rsi, %1
   205 0000147C [2A00000000000000]  <1>
   206 00001484 BAA1090000          <1>  mov edx, %2
   207 00001489 0F05                <1>  syscall
  1523                                  
  1524                                      ;setnonblocking
  1525                                  .read_more:
  1526                                      getchar  ; Leer un carácter de la entrada de teclado
   212 0000148B B800000000          <1>  mov rax, sys_read
   213 00001490 BF00000000          <1>  mov rdi, STDIN_FILENO
   214 00001495 48BE-               <1>  mov rsi, input_char
   214 00001497 [0000000000000000]  <1>
   215 0000149F BA01000000          <1>  mov rdx, 1
   216 000014A4 0F05                <1>  syscall
  1527                                  
  1528 000014A6 4883F801                    cmp rax, 1
  1529 000014AA 0F85F7000000                jne .done
  1530                                  
  1531 000014B0 8A05(00000000)              mov al, [input_char]
  1532                                  
  1533                                      ; Movimiento del Jugador 1
  1534 000014B6 3C77                        cmp al, 'w'
  1535 000014B8 747C                        je .move_player1_up
  1536 000014BA 3C73                        cmp al, 's'
  1537 000014BC 0F8480000000                je .move_player1_down
  1538 000014C2 3C61                        cmp al, 'a'
  1539 000014C4 0F8484000000                je .move_player1_left
  1540 000014CA 3C64                        cmp al, 'd'
  1541 000014CC 0F848A000000                je .move_player1_right
  1542                                  
  1543                                      ; Movimiento del Jugador 2 (Flechas)
  1544 000014D2 3C1B                        cmp al, 0x1B          ; Verificar si es la tecla Escape
  1545 000014D4 0F85C0000000                jne .go_out
  1546                                      getchar               ; Leer el siguiente carácter
   212 000014DA B800000000          <1>  mov rax, sys_read
   213 000014DF BF00000000          <1>  mov rdi, STDIN_FILENO
   214 000014E4 48BE-               <1>  mov rsi, input_char
   214 000014E6 [0000000000000000]  <1>
   215 000014EE BA01000000          <1>  mov rdx, 1
   216 000014F3 0F05                <1>  syscall
  1547 000014F5 8A05(00000000)              mov al, [input_char]  ; Almacenar el carácter leído en al
  1548 000014FB 3C5B                        cmp al, '['           ; Verificar si es '['
  1549 000014FD 0F8597000000                jne .go_out
  1550                                      getchar               ; Leer el siguiente carácter
   212 00001503 B800000000          <1>  mov rax, sys_read
   213 00001508 BF00000000          <1>  mov rdi, STDIN_FILENO
   214 0000150D 48BE-               <1>  mov rsi, input_char
   214 0000150F [0000000000000000]  <1>
   215 00001517 BA01000000          <1>  mov rdx, 1
   216 0000151C 0F05                <1>  syscall
  1551 0000151E 8A05(00000000)              mov al, [input_char]  ; Almacenar el carácter leído en al
  1552 00001524 3C41                        cmp al, 'A'           ; Flecha hacia arriba
  1553 00001526 7440                        je .move_player2_up
  1554 00001528 3C42                        cmp al, 'B'           ; Flecha hacia abajo
  1555 0000152A 7448                        je .move_player2_down
  1556 0000152C 3C43                        cmp al, 'C'           ; Flecha hacia la derecha
  1557 0000152E 745E                        je .move_player2_right
  1558 00001530 3C44                        cmp al, 'D'           ; Flecha hacia la izquierda
  1559 00001532 744C                        je .move_player2_left
  1560                                  
  1561 00001534 EB64                        jmp .go_out
  1562                                  
  1563                                      .move_player1_up:
  1564 00001536 BF02000000                      mov rdi, up_direction
  1565 0000153B E8DCEDFFFF                      call move_player1
  1566 00001540 EB65                            jmp .done
  1567                                  
  1568                                      .move_player1_down:
  1569 00001542 BF03000000                      mov rdi, down_direction
  1570 00001547 E8D0EDFFFF                      call move_player1
  1571 0000154C EB59                            jmp .done
  1572                                  
  1573                                      .move_player1_left:
  1574 0000154E 48C7C7FFFFFFFF                  mov rdi, left_direction
  1575 00001555 E8C2EDFFFF                      call move_player1
  1576 0000155A EB4B                            jmp .done
  1577                                  
  1578                                      .move_player1_right:
  1579 0000155C BF01000000                      mov rdi, right_direction
  1580 00001561 E8B6EDFFFF                      call move_player1
  1581 00001566 EB3F                            jmp .done
  1582                                  
  1583                                      .move_player2_up:
  1584 00001568 BF02000000                      mov rdi, up_direction
  1585 0000156D E896F6FFFF                      call move_player2
  1586 00001572 EB33                            jmp .done
  1587                                  
  1588                                      .move_player2_down:
  1589 00001574 BF03000000                      mov rdi, down_direction
  1590 00001579 E88AF6FFFF                      call move_player2
  1591 0000157E EB27                            jmp .done
  1592                                  
  1593                                      .move_player2_left:
  1594 00001580 48C7C7FFFFFFFF                  mov rdi, left_direction
  1595 00001587 E87CF6FFFF                      call move_player2
  1596 0000158C EB19                            jmp .done
  1597                                  
  1598                                      .move_player2_right:
  1599 0000158E BF01000000                      mov rdi, right_direction
  1600 00001593 E870F6FFFF                      call move_player2
  1601 00001598 EB0D                            jmp .done
  1602                                  
  1603                                      .go_out:
  1604 0000159A 3C71                            cmp al, 'q'
  1605 0000159C 0F84CE000000                    je exit
  1606                                  
  1607 000015A2 E9E4FEFFFF                      jmp .read_more
  1608                                  
  1609                                      .done:
  1610                                          sleeptime
   220 000015A7 B823000000          <1>  mov eax, sys_nanosleep
   221 000015AC 48BF-               <1>  mov rdi, timespec
   221 000015AE [0000000000000000]  <1>
   222 000015B6 31F6                <1>  xor esi, esi
   223 000015B8 0F05                <1>  syscall
  1611 000015BA E905FEFFFF                      jmp .main_loop
  1612                                  
  1613                                  	.time_up:
  1614                                  		; Mostrar mensaje de fin de juego
  1615                                  		print clear, clear_length
   203 000015BF B801000000          <1>  mov eax, sys_write
   204 000015C4 BF01000000          <1>  mov edi, 1
   205 000015C9 48BE-               <1>  mov rsi, %1
   205 000015CB [2000000000000000]  <1>
   206 000015D3 BA07000000          <1>  mov edx, %2
   207 000015D8 0F05                <1>  syscall
  1616                                  		print game_over_msg, game_over_msg_length
   203 000015DA B801000000          <1>  mov eax, sys_write
   204 000015DF BF01000000          <1>  mov edi, 1
   205 000015E4 48BE-               <1>  mov rsi, %1
   205 000015E6 [2602000000000000]  <1>
   206 000015EE BA18000000          <1>  mov edx, %2
   207 000015F3 0F05                <1>  syscall
  1617 000015F5 EB79                    		jmp exit
  1618                                  
  1619                                  		print clear, clear_length
   203 000015F7 B801000000          <1>  mov eax, sys_write
   204 000015FC BF01000000          <1>  mov edi, 1
   205 00001601 48BE-               <1>  mov rsi, %1
   205 00001603 [2000000000000000]  <1>
   206 0000160B BA07000000          <1>  mov edx, %2
   207 00001610 0F05                <1>  syscall
  1620                                  		
  1621 00001612 EB5C                    		jmp exit
  1622                                  
  1623                                  
  1624                                  start_screen: 
  1625                                  
  1626 00001614 50                      	push rax
  1627 00001615 51                      	push rcx
  1628 00001616 52                      	push rdx
  1629 00001617 57                      	push rdi
  1630 00001618 56                      	push rsi
  1631                                  	
  1632                                  	print msg1, msg1_length	
   203 00001619 B801000000          <1>  mov eax, sys_write
   204 0000161E BF01000000          <1>  mov edi, 1
   205 00001623 48BE-               <1>  mov rsi, %1
   205 00001625 [3800000000000000]  <1>
   206 0000162D BAEE010000          <1>  mov edx, %2
   207 00001632 0F05                <1>  syscall
  1633                                  	getchar
   212 00001634 B800000000          <1>  mov rax, sys_read
   213 00001639 BF00000000          <1>  mov rdi, STDIN_FILENO
   214 0000163E 48BE-               <1>  mov rsi, input_char
   214 00001640 [0000000000000000]  <1>
   215 00001648 BA01000000          <1>  mov rdx, 1
   216 0000164D 0F05                <1>  syscall
  1634                                  	print clear, clear_length
   203 0000164F B801000000          <1>  mov eax, sys_write
   204 00001654 BF01000000          <1>  mov edi, 1
   205 00001659 48BE-               <1>  mov rsi, %1
   205 0000165B [2000000000000000]  <1>
   206 00001663 BA07000000          <1>  mov edx, %2
   207 00001668 0F05                <1>  syscall
  1635                                  
  1636 0000166A 58                      	pop rax
  1637 0000166B 59                      	pop rcx
  1638 0000166C 5A                      	pop rdx
  1639 0000166D 5F                      	pop rdi
  1640 0000166E 5E                      	pop rsi
  1641 0000166F C3                      	ret
  1642                                  
  1643                                  
  1644                                  
  1645                                  exit: 
  1646 00001670 E80BECFFFF              	call canonical_on
  1647 00001675 B83C000000              	mov    rax, 60
  1648 0000167A BF00000000                  mov    rdi, 0
  1649 0000167F 0F05                        syscall
