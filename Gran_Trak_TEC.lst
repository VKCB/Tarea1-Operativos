     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Here comes the defines
     6                                  	sys_read: equ 0	
     7                                  	sys_write:	equ 1
     8                                  	sys_nanosleep:	equ 35
     9                                  	sys_nanosleep2:	equ 200
    10                                  	sys_time:	equ 201
    11                                  	sys_fcntl:	equ 72
    12                                  
    13                                  	char_equal: equ 61 
    14                                  	char_aster: equ 42
    15                                  	char_may: equ 62 
    16                                  	char_men: equ 60 
    17                                  	char_dosp: equ 58
    18                                  	char_comillas: equ 176
    19                                  	char_comilla: equ 39 
    20                                  	char_space: equ 32 
    21                                  	left_direction: equ -1
    22                                  	right_direction: equ 1
    23                                  	up_direction: equ 2
    24                                  	down_direction: equ 3
    25                                  	char_bot: equ 98
    26                                  
    27                                  
    28                                  
    29                                  STDIN_FILENO: equ 0			;Se utiliza en llamadas al sistema que requieren un descriptor de archivo, por ejemplo, al leer de la entrada estándar
    30                                  
    31                                  F_SETFL:	equ 0x0004		;Se pasa como segundo argumento a la llamada al sistema fcntl para indicar que queremos cambiar los flags del descriptor de archivo.
    32                                  O_NONBLOCK: equ 0x0004		;Se utiliza como tercer argumento en la llamada al sistema fcntl para indicar que el descriptor de archivo debe operar en modo no bloqueante.
    33                                  
    34                                  ;screen clean definition
    35                                  	row_cells:	equ 24	;Numero de filas que caben en la pantalla
    36                                  	column_cells: 	equ 110 ; set to any (reasonable) value you wish
    37                                  	array_length:	equ row_cells * column_cells + row_cells ;(+ 32 caracteres de nueva línea)
    38                                  
    39                                  ;This is regarding the sleep time
    40                                  timespec:
    41 00000000 0000000000000000            tv_sec  dq 0
    42 00000008 002D310100000000            tv_nsec dq 20000000		;0.02 s
    43                                  
    44                                  timespec2:
    45 00000010 0000000000000000            tv_sec2  dq 0
    46 00000018 00204AA9D1010000            tv_nsec2 dq 2000000000000		;0.02 s
    47                                  
    48                                  ;This is for cleaning up the screen
    49 00000020 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"	;2J: Esta es una secuencia de escape ANSI que indica Clear screen
    50                                  clear_length:	equ $-clear			;H: Indica reposicionamiento del cursor.
    51                                  
    52                                  ; Esta es la pantalla de inicio
    53                                  	
    54 00000027 202020202020202020-     	msg13: db "               ", 0xA, 0xD
    54 00000030 2020202020200A0D   
    55 00000038 202020202009090909-     	msg1: db "     					   TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    55 00000041 092020205445434E4F-
    55 0000004A 4C4F4749434F204445-
    55 00000053 20434F535441205249-
    55 0000005C 434120202020202020-
    55 00000065 200A0D             
    56 00000068 202020202020202020-     	msg14: db "               ", 0xA, 0xD
    56 00000071 2020202020200A0D   
    57 00000079 202020202020202020-     	msg17: db "               ", 0xA, 0xD
    57 00000082 2020202020200A0D   
    58 0000008A 202020202020202020-     	msg18: db "               ", 0xA, 0xD
    58 00000093 2020202020200A0D   
    59 0000009B 09090909090956616C-     	msg2: db "						Valerin Calderon       ", 0xA, 0xD
    59 000000A4 6572696E2043616C64-
    59 000000AD 65726F6E2020202020-
    59 000000B6 20200A0D           
    60 000000BA 09090909090959656E-     	msg5: db "						Yendry Badilla         ", 0xA, 0xD
    60 000000C3 64727920426164696C-
    60 000000CC 6C6120202020202020-
    60 000000D5 20200A0D           
    61 000000D9 090909090909416E64-     	msg15: db "						Andrés Molina          ", 0xA, 0xD
    61 000000E2 72C3A973204D6F6C69-
    61 000000EB 6E6120202020202020-
    61 000000F4 2020200A0D         
    62 000000F9 202020202020202020-     	msg6: db "               ", 0xA, 0xD
    62 00000102 2020202020200A0D   
    63 0000010A 202020202020202020-     	msg7: db "               ", 0xA, 0xD
    63 00000113 2020202020200A0D   
    64 0000011B 202020202020202020-     	msg8: db "               ", 0xA, 0xD
    64 00000124 2020202020200A0D   
    65 0000012C 202020202020202020-     	msg9: db "               ", 0xA, 0xD
    65 00000135 2020202020200A0D   
    66 0000013D 202020202020202020-     	msg16: db "               ", 0xA, 0xD 
    66 00000146 2020202020200A0D   
    67 0000014E 090909090909475241-     	msg3: db "						GRAN TRAK TEC        ", 0xA, 0xD
    67 00000157 4E205452414B205445-
    67 00000160 432020202020202020-
    67 00000169 0A0D               
    68                                  
    69 0000016B 202020202020202020-     	msg19: db "               ", 0xA, 0xD
    69 00000174 2020202020200A0D   
    70 0000017C 202020202020202020-     	msg20: db "               ", 0xA, 0xD
    70 00000185 2020202020200A0D   
    71 0000018D 202020202020202020-     	msg21: db "               ", 0xA, 0xD
    71 00000196 2020202020200A0D   
    72 0000019E 202020202020202020-     	msg22: db "               ", 0xA, 0xD
    72 000001A7 2020202020200A0D   
    73 000001AF 202020202020202020-     	msg23: db "               ", 0xA, 0xD 
    73 000001B8 2020202020200A0D   
    74 000001C0 202020202020202020-     	msg24: db "               ", 0xA, 0xD
    74 000001C9 2020202020200A0D   
    75 000001D1 202020202020202020-     	msg25: db "               ", 0xA, 0xD
    75 000001DA 2020202020200A0D   
    76 000001E2 202020202020202020-     	msg26: db "               ", 0xA, 0xD 
    76 000001EB 2020202020200A0D   
    77 000001F3 202020202020090909-     	msg4: db "      					   PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    77 000001FC 090920202050524553-
    77 00000205 494F4E4520454E5445-
    77 0000020E 52205041524120494E-
    77 00000217 494349415220202020-
    77 00000220 202020200A0D       
    78                                  	msg1_length:	equ $-msg1
    79                                  	msg2_length:	equ $-msg2
    80                                  	msg3_length:	equ $-msg3
    81                                  	msg4_length:	equ $-msg4
    82                                  	msg5_length:	equ $-msg5
    83                                  	msg13_length:	equ $-msg13
    84                                  	msg14_length:	equ $-msg14
    85                                  	msg15_length:	equ $-msg15
    86                                  	msg16_length:	equ $-msg16
    87                                  	msg17_length:	equ $-msg17 
    88                                  	msg6_length:	equ $-msg6 
    89                                  	msg7_length:	equ $-msg7 
    90                                  	msg8_length:	equ $-msg8 
    91                                  	msg9_length:	equ $-msg9 
    92                                  	msg18_length:	equ $-msg18
    93                                  	msg19_length:	equ $-msg19
    94                                  	msg20_length:	equ $-msg20
    95                                  	msg21_length:	equ $-msg21
    96                                  	msg22_length:	equ $-msg22
    97                                  	msg23_length:	equ $-msg23
    98                                  	msg24_length:	equ $-msg24
    99                                  	msg25_length:	equ $-msg25
   100                                  	msg26_length:	equ $-msg26
   101                                  
   102                                  
   103                                  	; Usefull macros (Como funciones reutilizables)
   104                                   
   105                                  	%macro setnonblocking 0		;Configura la entrada estándar para que funcione en modo no bloqueante
   106                                  		mov rax, sys_fcntl
   107                                  		mov rdi, STDIN_FILENO
   108                                  		mov rsi, F_SETFL
   109                                  		mov rdx, O_NONBLOCK
   110                                  		syscall
   111                                  	%endmacro
   112                                  
   113                                  	%macro unsetnonblocking 0	;Restablece la entrada estándar al modo bloqueante
   114                                  		mov rax, sys_fcntl
   115                                  		mov rdi, STDIN_FILENO
   116                                  		mov rsi, F_SETFL
   117                                  		mov rdx, 0
   118                                  		syscall
   119                                  	%endmacro
   120                                  
   121                                  	%macro full_line 0			;Linea completa de X
   122                                  		times column_cells db "X"
   123                                  		db 0x0a, 0xD
   124                                  	%endmacro
   125                                  
   126                                  	;Esta parte es para la creacion de la pista
   127                                  
   128                                  	%macro up_down_pista 0			;Parte de arriba de la pista
   129                                  		db "X"
   130                                  		times 9 db " "
   131                                  		times 90 db "O"
   132                                  		times 9 db " "
   133                                  		db "X"
   134                                  		db 0x0a, 0xD
   135                                  	%endmacro
   136                                  
   137                                  	%macro right_pista1 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   138                                  		db "X"
   139                                  		times 9 db " "
   140                                  		db "O"
   141                                  		times 88 db " "
   142                                  		db "O"
   143                                  		times 9 db " "
   144                                  		db "X", 0x0a, 0xD
   145                                  	%endmacro
   146                                  
   147                                  	%macro right_pista2 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   148                                  		db "X"
   149                                  		times 9 db " "
   150                                  		db "O"
   151                                  		times 70 db " "
   152                                  		times 19 db "O"
   153                                  		times 9 db " "
   154                                  		db "X", 0x0a, 0xD
   155                                  	%endmacro
   156                                  
   157                                  	%macro right_pista3 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   158                                  		db "X"
   159                                  		times 9 db " "
   160                                  		db "O"
   161                                  		times 70 db " "
   162                                  		db "O"
   163                                  		times 27 db " "
   164                                  		db "X", 0x0a, 0xD
   165                                  	%endmacro
   166                                  
   167                                  	%macro right_pista4 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   168                                  		db "X"
   169                                  		times 9 db " "
   170                                  		db "O"
   171                                  		times 70 db " "
   172                                  		db "O"
   173                                  		times 4 db " "
   174                                  		times 23 db "O"
   175                                  		db "X", 0x0a, 0xD
   176                                  	%endmacro
   177                                  
   178                                  	; Fin de la creacion de la pista
   179                                  
   180                                  	%macro marcador_j1 0			;Crea una línea completa de 'O' seguida de una nueva línea marcadores
   181                                  		db "X PLAYER 1 TURNS: "
   182                                  		times 60 db " "
   183                                  		db "Time:"
   184                                  		times 26 db " "
   185                                  		db "X"
   186                                  		db 0x0a, 0xD
   187                                  	%endmacro
   188                                  
   189                                  	%macro marcador_j2 0			;Crea una línea completa de 'O' seguida de una nueva línea
   190                                  		db "X PLAYER 2 TURNS: "
   191                                  		times 91 db " "
   192                                  		db "X"
   193                                  		db 0x0a, 0xD
   194                                  	%endmacro
   195                                  
   196                                  	%macro hollow_line 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   197                                  		db "X"
   198                                  		times column_cells-2 db char_space	;A 80 le resta las 2 X de los extremos e imprime 78 espacios
   199                                  		db "X", 0x0a, 0xD
   200                                  	%endmacro
   201                                  
   202                                  	%macro print 2				;Imprime una cadena especificada en la salida estándar
   203                                  		mov eax, sys_write
   204                                  		mov edi, 1 	; stdout
   205                                  		mov rsi, %1				;Parametro 1 que se pasa en donde se llama al macro
   206                                  		mov edx, %2				;Parametro 2
   207                                  		syscall
   208                                  	%endmacro
   209                                  
   210                                  	;Esta es la funcion que obtiene lo que uno ingrese
   211                                  	%macro getchar 0			;Lee un solo carácter de la entrada estándar y lo almacena en input_char
   212                                  		mov     rax, sys_read
   213                                  		mov     rdi, STDIN_FILENO
   214                                  		mov     rsi, input_char
   215                                  		mov     rdx, 1 ; number of bytes
   216                                  		syscall         ;read text input from keyboard
   217                                  	%endmacro
   218                                  
   219                                  	%macro sleeptime 0			;Suspende la ejecución del programa durante el tiempo especificado
   220                                  		mov eax, sys_nanosleep
   221                                  		mov rdi, timespec
   222                                  		xor esi, esi		; ignore remaining time in case of call interruption
   223                                  		syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   224                                  	%endmacro
   225                                  
   226                                  global _start
   227                                  
   228                                  section .bss
   229                                  
   230 00000000 ??????????              	buffer resb 5  ; Buffer para almacenar los dígitos convertidos
   231 00000005 ????????????????        	input_char: resq 1 
   232 0000000D ??                      	temp_char resb 1
   233 0000000E ??                      	random resb 1 ;Numero random obtenido
   234 0000000F ????????????????        	random_result resq 1
   235 00000017 ??                      	random2 resb 1
   236 00000018 ????????????????        	bot_speed resq 1
   237 00000020 ????????????????        	bot_counter resq 1  ; Contador para controlar la frecuencia de movimiento del bot en ciclos
   238                                  
   239                                  section .data 
   240                                  
   241 00000000 2F6465762F7572616E-     	urandom db '/dev/urandom', 0 ; Ruta al archivo /dev/urandom
   241 00000009 646F6D00           
   242 0000000D 0A00                    	newline db 10, 0
   243                                  
   244 0000000F 0000000000000000        	score dq 0
   245 00000017 [9204000000000000]      	score_position dq board + 19 + 10* (column_cells + 2)
   246                                  
   247                                  	board:
   248                                  		full_line
   122 0000001F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 0000008D 0A0D                <1>  db 0x0a, 0xD
   249                                  		marcador_j1
   181 0000008F 5820504C4159455220- <1>  db "X PLAYER 1 TURNS: "
   181 00000098 31205455524E533A20  <1>
   182 000000A1 20<rep 3Ch>         <1>  times 60 db " "
   183 000000DD 54696D653A          <1>  db "Time:"
   184 000000E2 20<rep 1Ah>         <1>  times 26 db " "
   185 000000FC 58                  <1>  db "X"
   186 000000FD 0A0D                <1>  db 0x0a, 0xD
   250                                  		marcador_j2 
   190 000000FF 5820504C4159455220- <1>  db "X PLAYER 2 TURNS: "
   190 00000108 32205455524E533A20  <1>
   191 00000111 20<rep 5Bh>         <1>  times 91 db " "
   192 0000016C 58                  <1>  db "X"
   193 0000016D 0A0D                <1>  db 0x0a, 0xD
   251                                  		full_line
   122 0000016F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000001DD 0A0D                <1>  db 0x0a, 0xD
   252                                          %rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   253                                          hollow_line
   254                                          %endrep 
   253                              <1>  hollow_line
   197 000001DF 58                  <2>  db "X"
   198 000001E0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000024C 580A0D              <2>  db "X", 0x0a, 0xD
   253                              <1>  hollow_line
   197 0000024F 58                  <2>  db "X"
   198 00000250 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000002BC 580A0D              <2>  db "X", 0x0a, 0xD
   253                              <1>  hollow_line
   197 000002BF 58                  <2>  db "X"
   198 000002C0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000032C 580A0D              <2>  db "X", 0x0a, 0xD
   255                                  
   256                                  		up_down_pista
   129 0000032F 58                  <1>  db "X"
   130 00000330 20<rep 9h>          <1>  times 9 db " "
   131 00000339 4F<rep 5Ah>         <1>  times 90 db "O"
   132 00000393 20<rep 9h>          <1>  times 9 db " "
   133 0000039C 58                  <1>  db "X"
   134 0000039D 0A0D                <1>  db 0x0a, 0xD
   257                                  
   258                                  
   259                                          right_pista2
   148 0000039F 58                  <1>  db "X"
   149 000003A0 20<rep 9h>          <1>  times 9 db " "
   150 000003A9 4F                  <1>  db "O"
   151 000003AA 20<rep 46h>         <1>  times 70 db " "
   152 000003F0 4F<rep 13h>         <1>  times 19 db "O"
   153 00000403 20<rep 9h>          <1>  times 9 db " "
   154 0000040C 580A0D              <1>  db "X", 0x0a, 0xD
   260                                  
   261                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   262                                          right_pista3
   263                                          %endrep
   262                              <1>  right_pista3
   158 0000040F 58                  <2>  db "X"
   159 00000410 20<rep 9h>          <2>  times 9 db " "
   160 00000419 4F                  <2>  db "O"
   161 0000041A 20<rep 46h>         <2>  times 70 db " "
   162 00000460 4F                  <2>  db "O"
   163 00000461 20<rep 1Bh>         <2>  times 27 db " "
   164 0000047C 580A0D              <2>  db "X", 0x0a, 0xD
   262                              <1>  right_pista3
   158 0000047F 58                  <2>  db "X"
   159 00000480 20<rep 9h>          <2>  times 9 db " "
   160 00000489 4F                  <2>  db "O"
   161 0000048A 20<rep 46h>         <2>  times 70 db " "
   162 000004D0 4F                  <2>  db "O"
   163 000004D1 20<rep 1Bh>         <2>  times 27 db " "
   164 000004EC 580A0D              <2>  db "X", 0x0a, 0xD
   264                                  
   265                                  		right_pista4
   168 000004EF 58                  <1>  db "X"
   169 000004F0 20<rep 9h>          <1>  times 9 db " "
   170 000004F9 4F                  <1>  db "O"
   171 000004FA 20<rep 46h>         <1>  times 70 db " "
   172 00000540 4F                  <1>  db "O"
   173 00000541 20<rep 4h>          <1>  times 4 db " "
   174 00000545 4F<rep 17h>         <1>  times 23 db "O"
   175 0000055C 580A0D              <1>  db "X", 0x0a, 0xD
   266                                  		right_pista4
   168 0000055F 58                  <1>  db "X"
   169 00000560 20<rep 9h>          <1>  times 9 db " "
   170 00000569 4F                  <1>  db "O"
   171 0000056A 20<rep 46h>         <1>  times 70 db " "
   172 000005B0 4F                  <1>  db "O"
   173 000005B1 20<rep 4h>          <1>  times 4 db " "
   174 000005B5 4F<rep 17h>         <1>  times 23 db "O"
   175 000005CC 580A0D              <1>  db "X", 0x0a, 0xD
   267                                  		right_pista4
   168 000005CF 58                  <1>  db "X"
   169 000005D0 20<rep 9h>          <1>  times 9 db " "
   170 000005D9 4F                  <1>  db "O"
   171 000005DA 20<rep 46h>         <1>  times 70 db " "
   172 00000620 4F                  <1>  db "O"
   173 00000621 20<rep 4h>          <1>  times 4 db " "
   174 00000625 4F<rep 17h>         <1>  times 23 db "O"
   175 0000063C 580A0D              <1>  db "X", 0x0a, 0xD
   268                                  
   269                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   270                                          right_pista3
   271                                          %endrep 
   270                              <1>  right_pista3
   158 0000063F 58                  <2>  db "X"
   159 00000640 20<rep 9h>          <2>  times 9 db " "
   160 00000649 4F                  <2>  db "O"
   161 0000064A 20<rep 46h>         <2>  times 70 db " "
   162 00000690 4F                  <2>  db "O"
   163 00000691 20<rep 1Bh>         <2>  times 27 db " "
   164 000006AC 580A0D              <2>  db "X", 0x0a, 0xD
   270                              <1>  right_pista3
   158 000006AF 58                  <2>  db "X"
   159 000006B0 20<rep 9h>          <2>  times 9 db " "
   160 000006B9 4F                  <2>  db "O"
   161 000006BA 20<rep 46h>         <2>  times 70 db " "
   162 00000700 4F                  <2>  db "O"
   163 00000701 20<rep 1Bh>         <2>  times 27 db " "
   164 0000071C 580A0D              <2>  db "X", 0x0a, 0xD
   272                                  
   273                                  		right_pista2
   148 0000071F 58                  <1>  db "X"
   149 00000720 20<rep 9h>          <1>  times 9 db " "
   150 00000729 4F                  <1>  db "O"
   151 0000072A 20<rep 46h>         <1>  times 70 db " "
   152 00000770 4F<rep 13h>         <1>  times 19 db "O"
   153 00000783 20<rep 9h>          <1>  times 9 db " "
   154 0000078C 580A0D              <1>  db "X", 0x0a, 0xD
   274                                  
   275                                  
   276                                  		up_down_pista
   129 0000078F 58                  <1>  db "X"
   130 00000790 20<rep 9h>          <1>  times 9 db " "
   131 00000799 4F<rep 5Ah>         <1>  times 90 db "O"
   132 000007F3 20<rep 9h>          <1>  times 9 db " "
   133 000007FC 58                  <1>  db "X"
   134 000007FD 0A0D                <1>  db 0x0a, 0xD
   277                                  
   278                                  		%rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   279                                          hollow_line
   280                                          %endrep
   279                              <1>  hollow_line
   197 000007FF 58                  <2>  db "X"
   198 00000800 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000086C 580A0D              <2>  db "X", 0x0a, 0xD
   279                              <1>  hollow_line
   197 0000086F 58                  <2>  db "X"
   198 00000870 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 000008DC 580A0D              <2>  db "X", 0x0a, 0xD
   279                              <1>  hollow_line
   197 000008DF 58                  <2>  db "X"
   198 000008E0 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   199 0000094C 580A0D              <2>  db "X", 0x0a, 0xD
   281                                  
   282                                          full_line
   122 0000094F 58<rep 6Eh>         <1>  times column_cells db "X"
   123 000009BD 0A0D                <1>  db 0x0a, 0xD
   283                                  	board_size:   equ   $ - board
   284                                  
   285                                  	; Added for the terminal issue	
   286 000009BF 00<rep 24h>             		termios:        times 36 db 0	;Define una estructura de 36 bytes inicializados a 0. Esta estructura es utilizada para almacenar las configuraciones del terminal
   287                                  		stdin:          equ 0			;Define el descriptor de archivo para la entrada estándar (stdin), que es 0
   288                                  		ICANON:         equ 1<<1		;Canonico la entrada no se envía al programa hasta que el usuario presiona Enter
   289                                  		ECHO:           equ 1<<3		;Bandera que habilita o deshabilita este modo
   290                                  		VTIME: 			equ 5
   291                                  		VMIN:			equ 6
   292                                  		CC_C:			equ 18
   293                                  
   294                                  
   295 000009E3 [D404000000000000]      	pallet_position dq board + 85 + ((column_cells + 2) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical 
   296 000009EB 0300000000000000        	pallet_size dq 3
   297                                  
   298 000009F3 [DE04000000000000]      	bot_position dq board + 85 + ((column_cells + 3) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical
   299                                  
   300 000009FB 1E00000000000000        	pared1_x_pos: dq 30 ;0-59
   301 00000A03 0100000000000000        	pared1_y_pos: dq 1
   302 00000A0B 5000000000000000        	pared2_x_pos: dq 80 ;0-59
   303 00000A13 0100000000000000        	pared2_y_pos: dq 1
   304 00000A1B 1500000000000000        		colen: dq 21
   305 00000A23 0000000000000000        		colj: dq 0
   306 00000A2B 0000000000000000        		cole: dq 0
   307 00000A33 1500000000000000        		pared: dq 21
   308 00000A3B 0000000000000000        		colplayer: dq 0 
   309                                  
   310                                  
   311                                  
   312                                  section .text
   313                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   314                                  canonical_off:										;La entrada se procese carácter por carácter sin esperar a que se presione Enter.
   315 00000226 E86F000000                      call read_stdin_termios						;Guarda los atributos actuales del terminal en la variable termios
   316                                  
   317                                          ; clear canonical bit in local mode flags	
   318 0000022B 50                              push rax						
   319 0000022C B802000000                      mov eax, ICANON								;Carga el valor de la constante ICANON (que representa el bit del modo canónico) en eax
   320 00000231 F7D0                            not eax										;Niega todos los bits en eax
   321 00000233 2105(CB090000)                  and [termios+12], eax						;Limpia el bit canónico en las banderas de modo local
   322 00000239 C605(D6090000)00        		mov byte[termios+CC_C+VTIME], 0				;Establecen VTIME y VMIN en 0 para que el terminal no espere caracteres adicionales
   323 00000240 C605(D7090000)00        		mov byte[termios+CC_C+VMIN], 0
   324 00000247 58                              pop rax
   325                                  
   326 00000248 E86C000000                      call write_stdin_termios					;Escribe los atributos modificados de termios de vuelta al terminal
   327 0000024D C3                              ret
   328                                  
   329                                  echo_off:											;No se muestran los caracteres introducidos
   330 0000024E E847000000                      call read_stdin_termios
   331                                  
   332                                          ; clear echo bit in local mode flags
   333 00000253 50                              push rax
   334 00000254 B808000000                      mov eax, ECHO
   335 00000259 F7D0                            not eax
   336 0000025B 2105(CB090000)                  and [termios+12], eax
   337 00000261 58                              pop rax
   338                                  
   339 00000262 E852000000                      call write_stdin_termios
   340 00000267 C3                              ret
   341                                  
   342                                  canonical_on:										;La entrada se procesa en líneas completas. Espera hasta que el usuario presione Enter
   343 00000268 E82D000000                      call read_stdin_termios
   344                                  
   345                                          ; set canonical bit in local mode flags
   346 0000026D 830D(CB090000)02                or dword [termios+12], ICANON
   347 00000274 C605(D6090000)00        		mov byte[termios+CC_C+VTIME], 0			;Tiempo en decisegundos que el terminal espera para la entrada.
   348 0000027B C605(D7090000)01        		mov byte[termios+CC_C+VMIN], 1			;El número mínimo de caracteres que se deben leer
   349 00000282 E832000000                      call write_stdin_termios
   350 00000287 C3                              ret
   351                                  
   352                                  echo_on:											;Se muestran los caracteres introducidos
   353 00000288 E80D000000                      call read_stdin_termios
   354                                  
   355                                          ; set echo bit in local mode flags
   356 0000028D 830D(CB090000)08                or dword [termios+12], ECHO
   357                                  
   358 00000294 E820000000                      call write_stdin_termios
   359 00000299 C3                              ret
   360                                  
   361                                  read_stdin_termios:									;Lee los atributos del terminal y los guarda en la variable termios
   362 0000029A 50                              push rax
   363 0000029B 53                              push rbx
   364 0000029C 51                              push rcx
   365 0000029D 52                              push rdx
   366                                  
   367 0000029E B836000000                      mov eax, 36h
   368 000002A3 BB00000000                      mov ebx, stdin
   369 000002A8 B901540000                      mov ecx, 5401h
   370 000002AD BA[BF090000]                    mov edx, termios
   371 000002B2 CD80                            int 80h
   372                                  
   373 000002B4 5A                              pop rdx
   374 000002B5 59                              pop rcx
   375 000002B6 5B                              pop rbx
   376 000002B7 58                              pop rax
   377 000002B8 C3                              ret
   378                                  
   379                                  write_stdin_termios:								;Escribe los atributos del terminal utilizando la llamada al sistema 
   380 000002B9 50                              push rax
   381 000002BA 53                              push rbx
   382 000002BB 51                              push rcx
   383 000002BC 52                              push rdx
   384                                  
   385 000002BD B836000000                      mov eax, 36h
   386 000002C2 BB00000000                      mov ebx, stdin
   387 000002C7 B902540000                      mov ecx, 5402h
   388 000002CC BA[BF090000]                    mov edx, termios
   389 000002D1 CD80                            int 80h
   390                                  
   391 000002D3 5A                              pop rdx
   392 000002D4 59                              pop rcx
   393 000002D5 5B                              pop rbx
   394 000002D6 58                              pop rax
   395 000002D7 C3                              ret
   396                                  
   397                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   398                                  
   399                                  ; Function: print_pallet
   400                                  ; This function moves the pallet in the game
   401                                  ; Arguments: none
   402                                  ;
   403                                  ; Return;
   404                                  ;	void
   405                                  print_pallet:
   406                                    
   407 000002D8 4C8B05(E3090000)        	mov r8, [pallet_position] 
   408                                  	.write_pallet:
   409 000002DF 41C600B0                		mov byte [r8], char_comillas
   410                                  
   411                                  	 
   412 000002E3 C3                      	ret
   413                                  
   414                                  ; Function: move_pallet
   415                                  ; This function is in charge of moving the pallet in a given direction
   416                                  ; Arguments:
   417                                  ;	rdi: left direction or right direction
   418                                  ;
   419                                  ; Return:
   420                                  ;	void
   421                                  move_pallet:
   422                                  
   423 000002E4 50                      	push rax
   424 000002E5 51                      	push rcx
   425                                  
   426 000002E6 4C8B2D(230A0000)        	mov r13, [colj]
   427 000002ED 4983FD01                	cmp r13, 1
   428 000002F1 0F845B070000            	je .endp
   429                                  	  
   430 000002F7 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   431 000002FB 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   432                                  
   433 000002FD 4883FF03                	cmp rdi, down_direction
   434 00000301 0F8471020000            	je .move_down
   435                                  
   436 00000307 4883FF01                	cmp rdi, right_direction
   437 0000030B 0F8472060000            	je .move_right
   438                                  
   439 00000311 4883FFFF                	cmp rdi, left_direction
   440 00000315 0F84BD040000            	je .move_left
   441                                  
   442                                  	.move_up:
   443 0000031B 4C8B05(E3090000)        		mov r8, [pallet_position]
   444                                  
   445                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   446 00000322 4981F8[4C020000]        		cmp r8, board + 109 + ((column_cells + 2) * 4)
   447 00000329 0F8C23070000            		jl .endp
   448                                  
   449 0000032F 4981F8[61040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   450 00000336 0F8416070000            		je .endp 
   451 0000033C 4981F8[62040000]        		cmp r8, board + 83 + ((column_cells + 2) * 9)
   452 00000343 0F8409070000            		je .endp
   453 00000349 4981F8[63040000]        		cmp r8, board + 84 + ((column_cells + 2) * 9)
   454 00000350 0F84FC060000            		je .endp
   455 00000356 4981F8[64040000]        		cmp r8, board + 85 + ((column_cells + 2) * 9)
   456 0000035D 0F84EF060000            		je .endp
   457 00000363 4981F8[65040000]        		cmp r8, board + 86 + ((column_cells + 2) * 9)
   458 0000036A 0F84E2060000            		je .endp
   459 00000370 4981F8[66040000]        		cmp r8, board + 87 + ((column_cells + 2) * 9)
   460 00000377 0F84D5060000            		je .endp
   461 0000037D 4981F8[67040000]        		cmp r8, board + 88 + ((column_cells + 2) * 9)
   462 00000384 0F84C8060000            		je .endp
   463 0000038A 4981F8[68040000]        		cmp r8, board + 89 + ((column_cells + 2) * 9)
   464 00000391 0F84BB060000            		je .endp
   465 00000397 4981F8[69040000]        		cmp r8, board + 90 + ((column_cells + 2) * 9)
   466 0000039E 0F84AE060000            		je .endp
   467 000003A4 4981F8[6A040000]        		cmp r8, board + 91 + ((column_cells + 2) * 9)
   468 000003AB 0F84A1060000            		je .endp
   469 000003B1 4981F8[6B040000]        		cmp r8, board + 92 + ((column_cells + 2) * 9)
   470 000003B8 0F8494060000            		je .endp
   471 000003BE 4981F8[6C040000]        		cmp r8, board + 93 + ((column_cells + 2) * 9)
   472 000003C5 0F8487060000            		je .endp
   473 000003CB 4981F8[6D040000]        		cmp r8, board + 94 + ((column_cells + 2) * 9)
   474 000003D2 0F847A060000            		je .endp
   475 000003D8 4981F8[6E040000]        		cmp r8, board + 95 + ((column_cells + 2) * 9)
   476 000003DF 0F846D060000            		je .endp
   477 000003E5 4981F8[6F040000]        		cmp r8, board + 96 + ((column_cells + 2) * 9)
   478 000003EC 0F8460060000            		je .endp
   479 000003F2 4981F8[70040000]        		cmp r8, board + 97 + ((column_cells + 2) * 9)
   480 000003F9 0F8453060000            		je .endp
   481 000003FF 4981F8[71040000]        		cmp r8, board + 98 + ((column_cells + 2) * 9)
   482 00000406 0F8446060000            		je .endp
   483 0000040C 4981F8[72040000]        		cmp r8, board + 99 + ((column_cells + 2) * 9)
   484 00000413 0F8439060000            		je .endp
   485                                  
   486 00000419 4981F8[95060000]        		cmp r8, board + 86 + ((column_cells + 2) * 14)
   487 00000420 0F842C060000            		je .endp
   488 00000426 4981F8[96060000]        		cmp r8, board + 87 + ((column_cells + 2) * 14)
   489 0000042D 0F841F060000            		je .endp
   490 00000433 4981F8[97060000]        		cmp r8, board + 88 + ((column_cells + 2) * 14)
   491 0000043A 0F8412060000            		je .endp
   492 00000440 4981F8[98060000]        		cmp r8, board + 89 + ((column_cells + 2) * 14)
   493 00000447 0F8405060000            		je .endp
   494 0000044D 4981F8[99060000]        		cmp r8, board + 90 + ((column_cells + 2) * 14)
   495 00000454 0F84F8050000            		je .endp
   496 0000045A 4981F8[9A060000]        		cmp r8, board + 91 + ((column_cells + 2) * 14)
   497 00000461 0F84EB050000            		je .endp
   498 00000467 4981F8[9B060000]        		cmp r8, board + 92 + ((column_cells + 2) * 14)
   499 0000046E 0F84DE050000            		je .endp
   500 00000474 4981F8[9C060000]        		cmp r8, board + 93 + ((column_cells + 2) * 14)
   501 0000047B 0F84D1050000            		je .endp
   502 00000481 4981F8[9D060000]        		cmp r8, board + 94 + ((column_cells + 2) * 14)
   503 00000488 0F84C4050000            		je .endp
   504 0000048E 4981F8[9E060000]        		cmp r8, board + 95 + ((column_cells + 2) * 14)
   505 00000495 0F84B7050000            		je .endp
   506 0000049B 4981F8[9F060000]        		cmp r8, board + 96 + ((column_cells + 2) * 14)
   507 000004A2 0F84AA050000            		je .endp
   508 000004A8 4981F8[A0060000]        		cmp r8, board + 97 + ((column_cells + 2) * 14)
   509 000004AF 0F849D050000            		je .endp
   510 000004B5 4981F8[A1060000]        		cmp r8, board + 98 + ((column_cells + 2) * 14)
   511 000004BC 0F8490050000            		je .endp
   512 000004C2 4981F8[A2060000]        		cmp r8, board + 99 + ((column_cells + 2) * 14)
   513 000004C9 0F8483050000            		je .endp
   514 000004CF 4981F8[A3060000]        		cmp r8, board + 100 + ((column_cells + 2) * 14)
   515 000004D6 0F8476050000            		je .endp
   516 000004DC 4981F8[A4060000]        		cmp r8, board + 101 + ((column_cells + 2) * 14)
   517 000004E3 0F8469050000            		je .endp
   518 000004E9 4981F8[A5060000]        		cmp r8, board + 102 + ((column_cells + 2) * 14)
   519 000004F0 0F845C050000            		je .endp
   520 000004F6 4981F8[A6060000]        		cmp r8, board + 103 + ((column_cells + 2) * 14)
   521 000004FD 0F844F050000            		je .endp
   522 00000503 4981F8[A7060000]        		cmp r8, board + 104 + ((column_cells + 2) * 14)
   523 0000050A 0F8442050000            		je .endp
   524 00000510 4981F8[A8060000]        		cmp r8, board + 105 + ((column_cells + 2) * 14)
   525 00000517 0F8435050000            		je .endp
   526 0000051D 4981F8[A9060000]        		cmp r8, board + 106 + ((column_cells + 2) * 14)
   527 00000524 0F8428050000            		je .endp
   528 0000052A 4981F8[AA060000]        		cmp r8, board + 107 + ((column_cells + 2) * 14)
   529 00000531 0F841B050000            		je .endp
   530 00000537 4981F8[AB060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   531 0000053E 0F840E050000            		je .endp
   532                                  
   533 00000544 4981F8[08080000]        		cmp r8, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   534 0000054B 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   535                                  
   536 0000054D 4981F8[63080000]        		cmp r8, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   537 00000554 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   538                                  
   539                                  		; Aquí entra si 81 < r8 < 100
   540 00000556 EB1B                    		jmp .continuar    
   541                                  
   542                                  		.fuera_rango:
   543 00000558 4C8B0D(EB090000)        			mov r9, [pallet_size]
   544 0000055F 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   545 00000563 4983E870                			sub r8, 112						; Mover una fila arriba (restar 320)
   546 00000567 4C8905(E3090000)        			mov [pallet_position], r8			; Actualizar posición
   547                                  
   548 0000056E E9DF040000              		jmp .endp
   549                                  
   550                                  		.continuar:
   551 00000573 E9DA040000              			jmp .endp
   552                                  
   553                                  	.move_down:
   554                                  
   555 00000578 4C8B05(E3090000)        		mov r8, [pallet_position]
   556                                  
   557 0000057F 4981F8[D5040000]        		cmp r8, board + 86 + ((column_cells + 2) * 10)  
   558 00000586 0F84C6040000            		je .endp
   559 0000058C 4981F8[D6040000]        		cmp r8, board + 87 + ((column_cells + 2) * 10)  
   560 00000593 0F84B9040000            		je .endp
   561 00000599 4981F8[D7040000]        		cmp r8, board + 88 + ((column_cells + 2) * 10)  
   562 000005A0 0F84AC040000            		je .endp
   563 000005A6 4981F8[D8040000]        		cmp r8, board + 89 + ((column_cells + 2) * 10)  
   564 000005AD 0F849F040000            		je .endp
   565 000005B3 4981F8[D9040000]        		cmp r8, board + 90 + ((column_cells + 2) * 10)  
   566 000005BA 0F8492040000            		je .endp
   567 000005C0 4981F8[DA040000]        		cmp r8, board + 91 + ((column_cells + 2) * 10)  
   568 000005C7 0F8485040000            		je .endp
   569 000005CD 4981F8[DB040000]        		cmp r8, board + 92 + ((column_cells + 2) * 10)  
   570 000005D4 0F8478040000            		je .endp
   571 000005DA 4981F8[DC040000]        		cmp r8, board + 93 + ((column_cells + 2) * 10)  
   572 000005E1 0F846B040000            		je .endp
   573 000005E7 4981F8[DD040000]        		cmp r8, board + 94 + ((column_cells + 2) * 10)  
   574 000005EE 0F845E040000            		je .endp
   575 000005F4 4981F8[DE040000]        		cmp r8, board + 95 + ((column_cells + 2) * 10)  
   576 000005FB 0F8451040000            		je .endp
   577 00000601 4981F8[DF040000]        		cmp r8, board + 96 + ((column_cells + 2) * 10)  
   578 00000608 0F8444040000            		je .endp
   579 0000060E 4981F8[E0040000]        		cmp r8, board + 97 + ((column_cells + 2) * 10)  
   580 00000615 0F8437040000            		je .endp
   581 0000061B 4981F8[E1040000]        		cmp r8, board + 98 + ((column_cells + 2) * 10)  
   582 00000622 0F842A040000            		je .endp
   583 00000628 4981F8[E2040000]        		cmp r8, board + 99 + ((column_cells + 2) * 10)  
   584 0000062F 0F841D040000            		je .endp
   585 00000635 4981F8[E3040000]        		cmp r8, board + 100 + ((column_cells + 2) * 10)  
   586 0000063C 0F8410040000            		je .endp
   587 00000642 4981F8[E4040000]        		cmp r8, board + 101 + ((column_cells + 2) * 10)  
   588 00000649 0F8403040000            		je .endp
   589 0000064F 4981F8[E5040000]        		cmp r8, board + 102 + ((column_cells + 2) * 10)  
   590 00000656 0F84F6030000            		je .endp
   591 0000065C 4981F8[E6040000]        		cmp r8, board + 103 + ((column_cells + 2) * 10)  
   592 00000663 0F84E9030000            		je .endp
   593 00000669 4981F8[E7040000]        		cmp r8, board + 104 + ((column_cells + 2) * 10)  
   594 00000670 0F84DC030000            		je .endp
   595 00000676 4981F8[E8040000]        		cmp r8, board + 105 + ((column_cells + 2) * 10)  
   596 0000067D 0F84CF030000            		je .endp
   597 00000683 4981F8[E9040000]        		cmp r8, board + 106 + ((column_cells + 2) * 10)  
   598 0000068A 0F84C2030000            		je .endp
   599 00000690 4981F8[EA040000]        		cmp r8, board + 107 + ((column_cells + 2) * 10)  
   600 00000697 0F84B5030000            		je .endp
   601 0000069D 4981F8[EB040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)  
   602 000006A4 0F84A8030000            		je .endp
   603                                  
   604 000006AA 4981F8[01070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   605 000006B1 0F849B030000            		je .endp
   606 000006B7 4981F8[02070000]        		cmp r8, board + 83 + ((column_cells + 2) * 15)
   607 000006BE 0F848E030000            		je .endp
   608 000006C4 4981F8[03070000]        		cmp r8, board + 84 + ((column_cells + 2) * 15)
   609 000006CB 0F8481030000            		je .endp
   610 000006D1 4981F8[04070000]        		cmp r8, board + 85 + ((column_cells + 2) * 15)
   611 000006D8 0F8474030000            		je .endp
   612 000006DE 4981F8[05070000]        		cmp r8, board + 86 + ((column_cells + 2) * 15)
   613 000006E5 0F8467030000            		je .endp
   614 000006EB 4981F8[06070000]        		cmp r8, board + 87 + ((column_cells + 2) * 15)
   615 000006F2 0F845A030000            		je .endp
   616 000006F8 4981F8[07070000]        		cmp r8, board + 88 + ((column_cells + 2) * 15)
   617 000006FF 0F844D030000            		je .endp
   618 00000705 4981F8[08070000]        		cmp r8, board + 89 + ((column_cells + 2) * 15)
   619 0000070C 0F8440030000            		je .endp
   620 00000712 4981F8[09070000]        		cmp r8, board + 90 + ((column_cells + 2) * 15)
   621 00000719 0F8433030000            		je .endp
   622 0000071F 4981F8[0A070000]        		cmp r8, board + 91 + ((column_cells + 2) * 15)
   623 00000726 0F8426030000            		je .endp
   624 0000072C 4981F8[0B070000]        		cmp r8, board + 92 + ((column_cells + 2) * 15)
   625 00000733 0F8419030000            		je .endp
   626 00000739 4981F8[0C070000]        		cmp r8, board + 93 + ((column_cells + 2) * 15)
   627 00000740 0F840C030000            		je .endp
   628 00000746 4981F8[0D070000]        		cmp r8, board + 94 + ((column_cells + 2) * 15)
   629 0000074D 0F84FF020000            		je .endp
   630 00000753 4981F8[0E070000]        		cmp r8, board + 95 + ((column_cells + 2) * 15)
   631 0000075A 0F84F2020000            		je .endp
   632 00000760 4981F8[0F070000]        		cmp r8, board + 96 + ((column_cells + 2) * 15)
   633 00000767 0F84E5020000            		je .endp
   634 0000076D 4981F8[10070000]        		cmp r8, board + 97 + ((column_cells + 2) * 15)
   635 00000774 0F84D8020000            		je .endp
   636 0000077A 4981F8[11070000]        		cmp r8, board + 98 + ((column_cells + 2) * 15)
   637 00000781 0F84CB020000            		je .endp
   638 00000787 4981F8[12070000]        		cmp r8, board + 99 + ((column_cells + 2) * 15)
   639 0000078E 0F84BE020000            		je .endp
   640                                  		
   641 00000794 4981F8[DF080000]        		cmp r8, board + ((column_cells + 2) * 20)
   642 0000079B 0F8FB1020000            		jg .endp
   643                                  
   644                                  
   645 000007A1 4981F8[C8020000]        		cmp r8, board + 9 + ((column_cells + 2) * 6)  
   646 000007A8 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
   647                                  
   648 000007AA 4981F8[23030000]        		cmp r8, board + 100 + ((column_cells + 2) * 6) 
   649 000007B1 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
   650                                  
   651                                  		
   652                                  
   653                                  		; Aquí entra si 81 < r8 < 100
   654 000007B3 E9BBFDFFFF              		jmp .continuar    
   655                                  
   656                                  		.fuera_rango_down:
   657 000007B8 4C8B0D(EB090000)        			mov r9, [pallet_size]
   658 000007BF 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   659 000007C3 4983C070                			add r8, 112							; Mover una fila abajo (sumar 320)
   660 000007C7 4C8905(E3090000)        			mov [pallet_position], r8			; Actualizar posición
   661                                  
   662                                  
   663 000007CE E97F020000              		jmp .endp	
   664                                  
   665                                  		.continuar_down:
   666 000007D3 E97A020000              			jmp .endp
   667                                  
   668                                  
   669                                  
   670                                  		
   671                                  		
   672                                  
   673                                  	.move_left:
   674                                  
   675 000007D8 4C8B2D(230A0000)        		mov r13, [colj]
   676 000007DF 4983FD01                		cmp r13, 1
   677 000007E3 0F8469020000            		je .endp
   678                                  
   679 000007E9 4C8B05(E3090000)        		mov r8, [pallet_position]
   680                                  
   681                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   682 000007F0 4981F8[E0010000]        		cmp r8, board + 1 + ((column_cells + 2) * 4)
   683 000007F7 0F8455020000            		je .endp 
   684                                  
   685 000007FD 4981F8[50020000]        		cmp r8, board + 1 + ((column_cells + 2) * 5)
   686 00000804 0F8448020000            		je .endp 
   687                                  
   688 0000080A 4981F8[C0020000]        		cmp r8, board + 1 + ((column_cells + 2) * 6)
   689 00000811 0F843B020000            		je .endp 
   690                                  
   691 00000817 4981F8[30030000]        		cmp r8, board + 1 + ((column_cells + 2) * 7)
   692 0000081E 0F842E020000            		je .endp 
   693                                  
   694 00000824 4981F8[A0030000]        		cmp r8, board + 1 + ((column_cells + 2) * 8)
   695 0000082B 0F8421020000            		je .endp 
   696                                  
   697 00000831 4981F8[10040000]        		cmp r8, board + 1 + ((column_cells + 2) * 9)
   698 00000838 0F8414020000            		je .endp 
   699                                  	
   700 0000083E 4981F8[80040000]        		cmp r8, board + 1 + ((column_cells + 2) * 10)
   701 00000845 0F8407020000            		je .endp 
   702                                  
   703 0000084B 4981F8[F0040000]        		cmp r8, board + 1 + ((column_cells + 2) * 11)
   704 00000852 0F84FA010000            		je .endp 
   705                                  
   706 00000858 4981F8[60050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   707 0000085F 0F84ED010000            		je .endp 
   708                                  
   709 00000865 4981F8[60050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   710 0000086C 0F84E0010000            		je .endp 
   711                                  
   712 00000872 4981F8[D0050000]        		cmp r8, board + 1 + ((column_cells + 2) * 13)
   713 00000879 0F84D3010000            		je .endp 
   714                                  
   715 0000087F 4981F8[40060000]        		cmp r8, board + 1 + ((column_cells + 2) * 14)
   716 00000886 0F84C6010000            		je .endp 
   717                                  
   718 0000088C 4981F8[B0060000]        		cmp r8, board + 1 + ((column_cells + 2) * 15)
   719 00000893 0F84B9010000            		je .endp 
   720                                  
   721 00000899 4981F8[20070000]        		cmp r8, board + 1 + ((column_cells + 2) * 16)
   722 000008A0 0F84AC010000            		je .endp 
   723                                  
   724 000008A6 4981F8[90070000]        		cmp r8, board + 1 + ((column_cells + 2) * 17)
   725 000008AD 0F849F010000            		je .endp 
   726                                  
   727 000008B3 4981F8[00080000]        		cmp r8, board + 1 + ((column_cells + 2) * 18)
   728 000008BA 0F8492010000            		je .endp 
   729                                  
   730 000008C0 4981F8[70080000]        		cmp r8, board + 1 + ((column_cells + 2) * 19)
   731 000008C7 0F8485010000            		je .endp
   732                                  
   733 000008CD 4981F8[E0080000]        		cmp r8, board + 1 + ((column_cells + 2) * 20)
   734 000008D4 0F8478010000            		je .endp
   735                                  
   736 000008DA 4981F8[93030000]        		cmp r8, board + 100 + ((column_cells + 2) * 7)
   737 000008E1 0F846B010000            		je .endp
   738                                  
   739 000008E7 4981F8[03040000]        		cmp r8, board + 100 + ((column_cells + 2) * 8)
   740 000008EE 0F845E010000            		je .endp
   741                                  
   742 000008F4 4981F8[61040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   743 000008FB 0F8451010000            		je .endp
   744                                  
   745                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
   746 00000901 4981F8[D1040000]        		cmp r8, board + 82 + ((column_cells + 2) * 10)
   747 00000908 0F8444010000            		je .endp
   748                                  
   749 0000090E 4981F8[41050000]        		cmp r8, board + 82 + ((column_cells + 2) * 11)
   750 00000915 0F8437010000            		je .endp
   751                                  
   752 0000091B 4981F8[B1050000]        		cmp r8, board + 82 + ((column_cells + 2) * 12)
   753 00000922 0F842A010000            		je .endp
   754                                  
   755 00000928 4981F8[21060000]        		cmp r8, board + 82 + ((column_cells + 2) * 13)
   756 0000092F 0F841D010000            		je .endp
   757                                  
   758 00000935 4981F8[91060000]        		cmp r8, board + 82 + ((column_cells + 2) * 14)
   759 0000093C 0F8410010000            		je .endp
   760                                  
   761 00000942 4981F8[01070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   762 00000949 0F8403010000            		je .endp
   763                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
   764                                  
   765 0000094F 4981F8[83070000]        		cmp r8, board + 100 + ((column_cells + 2) * 16)
   766 00000956 0F84F6000000            		je .endp
   767                                  
   768 0000095C 4981F8[F3070000]        		cmp r8, board + 100 + ((column_cells + 2) * 17)
   769 00000963 0F84E9000000            		je .endp
   770                                  
   771 00000969 4C8B0D(EB090000)        		mov r9, [pallet_size]
   772 00000970 41C60020                		mov byte [r8], char_space	; Limpiar el último carácter del palet
   773 00000974 49FFC8                  		dec r8								; Mover la posición del palet una unidad a la izquierda
   774 00000977 4C8905(E3090000)        		mov [pallet_position], r8			; Actualizar la posición del palet en la memoria
   775                                  
   776 0000097E E9CF000000              		jmp .endp	
   777                                  							 
   778                                  	.move_right:
   779                                  
   780 00000983 4C8B2D(230A0000)        		mov r13, [colj]
   781 0000098A 4983FD02                		cmp r13, 2
   782 0000098E 0F84BE000000            		je .endp
   783                                  
   784 00000994 4C8B05(E3090000)        		mov r8, [pallet_position]
   785                                  
   786                                  		
   787 0000099B 4981F8[4B020000]        		cmp r8, board + 108 + ((column_cells + 2) * 4)
   788 000009A2 0F84AA000000            		je .endp
   789                                  
   790 000009A8 4981F8[BB020000]        		cmp r8, board + 108 + ((column_cells + 2) * 5)
   791 000009AF 0F849D000000            		je .endp
   792                                  
   793 000009B5 4981F8[2B030000]        		cmp r8, board + 108 + ((column_cells + 2) * 6)
   794 000009BC 0F8490000000            		je .endp
   795                                  
   796 000009C2 4981F8[9B030000]        		cmp r8, board + 108 + ((column_cells + 2) * 7)
   797 000009C9 0F8483000000            		je .endp
   798                                  
   799 000009CF 4981F8[0B040000]        		cmp r8, board + 108 + ((column_cells + 2) * 8)
   800 000009D6 747A                    		je .endp
   801                                  
   802 000009D8 4981F8[7B040000]        		cmp r8, board + 108 + ((column_cells + 2) * 9)
   803 000009DF 7471                    		je .endp
   804                                  
   805 000009E1 4981F8[EB040000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)
   806 000009E8 7468                    		je .endp
   807                                  
   808 000009EA 4981F8[44050000]        		cmp r8, board + 85 + ((column_cells + 2) * 11)
   809 000009F1 745F                    		je .endp
   810                                  
   811 000009F3 4981F8[B4050000]        		cmp r8, board + 85 + ((column_cells + 2) * 12)
   812 000009FA 7456                    		je .endp
   813                                  
   814 000009FC 4981F8[24060000]        		cmp r8, board + 85 + ((column_cells + 2) * 13)
   815 00000A03 744D                    		je .endp
   816                                  
   817 00000A05 4981F8[AB060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   818 00000A0C 7444                    		je .endp
   819                                  
   820 00000A0E 4981F8[1B070000]        		cmp r8, board + 108 + ((column_cells + 2) * 15)
   821 00000A15 743B                    		je .endp
   822                                  
   823 00000A17 4981F8[8B070000]        		cmp r8, board + 108 + ((column_cells + 2) * 16)
   824 00000A1E 7432                    		je .endp
   825                                  
   826 00000A20 4981F8[FB070000]        		cmp r8, board + 108 + ((column_cells + 2) * 17)
   827 00000A27 7429                    		je .endp
   828                                  
   829 00000A29 4981F8[6B080000]        		cmp r8, board + 108 + ((column_cells + 2) * 18)
   830 00000A30 7420                    		je .endp
   831                                  
   832 00000A32 4981F8[DB080000]        		cmp r8, board + 108 + ((column_cells + 2) * 19)
   833 00000A39 7417                    		je .endp
   834                                  
   835 00000A3B 4981F8[4B090000]        		cmp r8, board + 108 + ((column_cells + 2) * 20)
   836 00000A42 740E                    		je .endp
   837                                  
   838 00000A44 41C60020                		mov byte [r8], char_space
   839 00000A48 49FFC0                  		inc r8
   840 00000A4B 4C8905(E3090000)        		mov [pallet_position], r8
   841                                   
   842                                  
   843                                  
   844                                  	.endp:
   845 00000A52 48C705(230A0000)00-     		mov qword [colj], 0
   845 00000A5A 000000             
   846                                  
   847 00000A5D 58                      	pop rax
   848 00000A5E 59                      	pop rcx
   849                                  	 
   850 00000A5F C3                      	ret
   851                                  
   852                                  ; Funcion print_bot
   853                                  ; Esta funcion imprime los bots en la pista en la posicion definida
   854                                  print_bot:
   855                                  	; Obtener la posición actual del bot
   856 00000A60 4C8B15(F3090000)            mov r10, [bot_position]      ; Cargar la dirección de la posición del bot
   857                                      .write_pallet:
   858 00000A67 41C60262                		mov byte [r10], char_bot
   859 00000A6B C3                      	ret
   860                                  
   861                                  ; Funcion generar un numero aleatorio entre 100 y 150 para la velocidad 
   862                                  generate_random:
   863                                      ; Abrir /dev/urandom para leer un byte aleatorio
   864 00000A6C 57                      	push rdi
   865 00000A6D 56                      	push rsi
   866 00000A6E 52                      	push rdx
   867 00000A6F 50                      	push rax
   868                                  
   869 00000A70 B800000000                  mov rax, 0                ; sys_read
   870 00000A75 48BF-                       mov rdi, urandom          ; Descriptor de archivo para /dev/urandom
   870 00000A77 [0000000000000000] 
   871 00000A7F 48BE-                       mov rsi, random           ; Direccion donde se guarda el byte aleatorio
   871 00000A81 [0E00000000000000] 
   872 00000A89 BA01000000                  mov rdx, 1                ; Leer 1 byte
   873 00000A8E 0F05                        syscall                   ; Llamada al sistema para leer
   874                                  
   875                                      ; Reducir el rango del número aleatorio a 0-49
   876 00000A90 480FB605(0E000000)          movzx rax, byte [random]  ; Cargar el byte aleatorio en rax
   877 00000A98 4831D2                      xor rdx, rdx              ; Limpiar rdx para la division
   878 00000A9B B932000000                  mov rcx, 50               ; Divisor (rango deseado: 50 numeros)
   879 00000AA0 48F7F1                      div rcx                   ; rax = rax / rcx, rdx = rax % rcx
   880                                      ; Ahora rdx contiene el número aleatorio en el rango 0-49
   881                                  
   882                                      ; Ajustar el rango base a 100-150
   883 00000AA3 4883C264                    add rdx, 100 ; suma 100 para obtener el rango deseado
   884                                  
   885                                      ; Guardar el resultado en una variable o registro
   886 00000AA7 488915(0F000000)            mov [random_result], rdx  ; Guardar el número aleatorio generado
   887                                  
   888 00000AAE 5F                      	pop rdi
   889 00000AAF 5E                      	pop rsi
   890 00000AB0 5A                      	pop rdx
   891 00000AB1 58                      	pop rax
   892                                  
   893 00000AB2 C3                          ret
   894                                  
   895                                  ; Función: set_bot_speed
   896                                  ; Establece la velocidad del bot de manera aleatoria
   897                                  set_bot_speed:
   898 00000AB3 52                      	push rdx
   899                                  	; Llamar a la funcion para generar numero random
   900 00000AB4 E8B3FFFFFF              	call generate_random
   901                                  	; Guardar el numero aleatorio en la variable de velocidad del bot
   902 00000AB9 488915(18000000)        	mov [bot_speed], rdx ; Guardar el número aleatorio generado en bot_speed
   903                                  
   904 00000AC0 5A                      	pop rdx
   905 00000AC1 C3                      	ret
   906                                  
   907                                  
   908                                  ; Función: move_bot
   909                                  ; Mueve el bot en la dirección definida
   910                                  ; Return:
   911                                  ;   void
   912                                  move_bot:
   913                                  
   914 00000AC2 50                      	push rax
   915 00000AC3 51                      	push rcx
   916                                  
   917 00000AC4 4C8B1D(230A0000)        	mov r11, [colj]              ; Cargar el valor de la variable `colj` en r11
   918 00000ACB 4983FB01                	cmp r11, 1                   ; Comparar el valor de `colj` con 1
   919 00000ACF 0F84D5000000            	je .endp                     ; Si `colj` es igual a 1, saltar al final de la función
   920                                      
   921 00000AD5 4883FF01                	cmp rdi, right_direction
   922 00000AD9 7400                    	je .move_right
   923                                  
   924                                  							 
   925                                  	.move_right:
   926                                  
   927 00000ADB 4C8B1D(230A0000)        		mov r11, [colj]
   928 00000AE2 4983FB02                		cmp r11, 2
   929 00000AE6 0F84BE000000            		je .endp
   930                                  
   931 00000AEC 4C8B15(F3090000)        		mov r10, [bot_position]
   932                                  
   933                                  		
   934 00000AF3 4981FA[4B020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
   935 00000AFA 0F84AA000000            		je .endp
   936                                  
   937 00000B00 4981FA[BB020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
   938 00000B07 0F849D000000            		je .endp
   939                                  
   940 00000B0D 4981FA[2B030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
   941 00000B14 0F8490000000            		je .endp
   942                                  
   943 00000B1A 4981FA[9B030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
   944 00000B21 0F8483000000            		je .endp
   945                                  
   946 00000B27 4981FA[0B040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
   947 00000B2E 747A                    		je .endp
   948                                  
   949 00000B30 4981FA[7B040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
   950 00000B37 7471                    		je .endp
   951                                  
   952 00000B39 4981FA[EB040000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
   953 00000B40 7468                    		je .endp
   954                                  
   955 00000B42 4981FA[44050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
   956 00000B49 745F                    		je .endp
   957                                  
   958 00000B4B 4981FA[B4050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
   959 00000B52 7456                    		je .endp
   960                                  
   961 00000B54 4981FA[24060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
   962 00000B5B 744D                    		je .endp
   963                                  
   964 00000B5D 4981FA[AB060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
   965 00000B64 7444                    		je .endp
   966                                  
   967 00000B66 4981FA[1B070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
   968 00000B6D 743B                    		je .endp
   969                                  
   970 00000B6F 4981FA[8B070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
   971 00000B76 7432                    		je .endp
   972                                  
   973 00000B78 4981FA[FB070000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
   974 00000B7F 7429                    		je .endp
   975                                  
   976 00000B81 4981FA[6B080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
   977 00000B88 7420                    		je .endp
   978                                  
   979 00000B8A 4981FA[DB080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
   980 00000B91 7417                    		je .endp
   981                                  
   982 00000B93 4981FA[4B090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
   983 00000B9A 740E                    		je .endp
   984                                  
   985 00000B9C 41C60220                		mov byte [r10], char_space
   986 00000BA0 49FFC2                  		inc r10
   987 00000BA3 4C8915(F3090000)        		mov [bot_position], r10
   988                                   
   989                                  	.endp:
   990 00000BAA 48C705(230A0000)00-     		mov qword [colj], 0
   990 00000BB2 000000             
   991                                  
   992 00000BB5 58                      	pop rax
   993 00000BB6 59                      	pop rcx
   994                                  	 
   995 00000BB7 C3                      	ret
   996                                  
   997                                  
   998                                  
   999                                  _start: 
  1000                                  	print clear, clear_length
   203 00000BB8 B801000000          <1>  mov eax, sys_write
   204 00000BBD BF01000000          <1>  mov edi, 1
   205 00000BC2 48BE-               <1>  mov rsi, %1
   205 00000BC4 [2000000000000000]  <1>
   206 00000BCC BA07000000          <1>  mov edx, %2
   207 00000BD1 0F05                <1>  syscall
  1001 00000BD3 E83D010000              	call start_screen
  1002                                  	level_up:
  1003 00000BD8 E849F6FFFF              	call canonical_off
  1004 00000BDD E8D1FEFFFF              	call set_bot_speed
  1005                                  
  1006                                   
  1007                                  	.main_loop:
  1008                                  		; Incrementar el contador del bot
  1009 00000BE2 488B05(20000000)            	mov rax, [bot_counter]       ; Cargar el valor actual del contador
  1010 00000BE9 48FFC0                      	inc rax                      ; Incrementar el contador
  1011 00000BEC 488905(20000000)            	mov [bot_counter], rax       ; Guardar el nuevo valor del contador
  1012                                  
  1013                                      	; Comparar el contador con la velocidad del bot
  1014 00000BF3 488B1D(18000000)            	mov rbx, [bot_speed]         ; Cargar la velocidad del bot
  1015 00000BFA 4839D8                      	cmp rax, rbx                 ; Comparar el contador con la velocidad
  1016 00000BFD 7514                        	jne .skip_bot_move           ; Si no coincide, saltar el movimiento del bot
  1017                                  
  1018                                      	; Restablecer el contador y mover el bot
  1019 00000BFF 4831C0                      	xor rax, rax                 ; Restablecer el contador a 0
  1020 00000C02 488905(20000000)            	mov [bot_counter], rax       ; Guardar el valor restablecido
  1021 00000C09 BF03000000                  	mov rdi, down_direction      ; Dirección de movimiento del bot (puedes cambiarla dinámicamente)
  1022 00000C0E E8AFFEFFFF                  	call move_bot                ; Llamar a la función para mover el bot
  1023                                  
  1024                                  
  1025                                  	.skip_bot_move:
  1026                                      	; Continuar con el resto del bucle principal
  1027 00000C13 E8C0F6FFFF                  	call print_pallet
  1028 00000C18 E843FEFFFF                  	call print_bot
  1029                                      	print board, board_size
   203 00000C1D B801000000          <1>  mov eax, sys_write
   204 00000C22 BF01000000          <1>  mov edi, 1
   205 00000C27 48BE-               <1>  mov rsi, %1
   205 00000C29 [1F00000000000000]  <1>
   206 00000C31 BAA0090000          <1>  mov edx, %2
   207 00000C36 0F05                <1>  syscall
  1030                                  
  1031                                  		; Leer entrada del usuario
  1032 00000C38 E815000000                  	call .read_more
  1033                                  
  1034                                      	; Pausar el programa por un tiempo
  1035                                      	sleeptime
   220 00000C3D B823000000          <1>  mov eax, sys_nanosleep
   221 00000C42 48BF-               <1>  mov rdi, timespec
   221 00000C44 [0000000000000000]  <1>
   222 00000C4C 31F6                <1>  xor esi, esi
   223 00000C4E 0F05                <1>  syscall
  1036                                      
  1037 00000C50 EB90                        	jmp .main_loop
  1038                                  
  1039                                  	.read_more:	
  1040                                  		getchar						;Llama a la macro getchar para leer un carácter de la entrada de teclado 
   212 00000C52 B800000000          <1>  mov rax, sys_read
   213 00000C57 BF00000000          <1>  mov rdi, STDIN_FILENO
   214 00000C5C 48BE-               <1>  mov rsi, input_char
   214 00000C5E [0500000000000000]  <1>
   215 00000C66 BA01000000          <1>  mov rdx, 1
   216 00000C6B 0F05                <1>  syscall
  1041                                  		
  1042 00000C6D 4883F801                		cmp rax, 1
  1043 00000C71 7552                        	jne .done
  1044                                  		
  1045 00000C73 8A05(05000000)          		mov al,[input_char]
  1046                                  
  1047                                  		.up_in:
  1048 00000C79 3C77                    			cmp al, 'w'
  1049 00000C7B 750C                    			jne .down_in
  1050 00000C7D BF02000000              			mov rdi, up_direction
  1051 00000C82 E85DF6FFFF              			call move_pallet
  1052 00000C87 EB3C                    			jmp .done
  1053                                  
  1054                                  		.down_in:
  1055 00000C89 3C73                    			cmp al, 's'
  1056 00000C8B 750C                    			jne .left_in
  1057 00000C8D BF03000000              			mov rdi, down_direction
  1058 00000C92 E84DF6FFFF              			call move_pallet
  1059 00000C97 EB2C                    			jmp .done
  1060                                  
  1061                                  		.left_in:
  1062 00000C99 3C61                    			cmp al, 'a'
  1063 00000C9B 750E                    			jne .right_in
  1064 00000C9D 48C7C7FFFFFFFF          			mov rdi, left_direction
  1065 00000CA4 E83BF6FFFF              			call move_pallet
  1066 00000CA9 EB1A                    			jmp .done
  1067                                  		
  1068                                  		.right_in:
  1069 00000CAB 3C64                    		 	cmp al, 'd'
  1070 00000CAD 750C                    	    	jne .go_out
  1071 00000CAF BF01000000              			mov rdi, right_direction
  1072 00000CB4 E82BF6FFFF              			call move_pallet
  1073 00000CB9 EB0A                        		jmp .done	
  1074                                  
  1075                                  		.go_out:
  1076                                  
  1077 00000CBB 3C71                        		cmp al, 'q'
  1078 00000CBD 0F84AE000000                		je exit
  1079                                  
  1080 00000CC3 EB8D                    			jmp .read_more
  1081                                  		
  1082                                  		.done:	
  1083                                  			;unsetnonblocking		
  1084                                  			sleeptime	
   220 00000CC5 B823000000          <1>  mov eax, sys_nanosleep
   221 00000CCA 48BF-               <1>  mov rdi, timespec
   221 00000CCC [0000000000000000]  <1>
   222 00000CD4 31F6                <1>  xor esi, esi
   223 00000CD6 0F05                <1>  syscall
  1085                                  			print clear, clear_length
   203 00000CD8 B801000000          <1>  mov eax, sys_write
   204 00000CDD BF01000000          <1>  mov edi, 1
   205 00000CE2 48BE-               <1>  mov rsi, %1
   205 00000CE4 [2000000000000000]  <1>
   206 00000CEC BA07000000          <1>  mov edx, %2
   207 00000CF1 0F05                <1>  syscall
  1086 00000CF3 E9EAFEFFFF                  		jmp .main_loop 
  1087                                  
  1088                                  		print clear, clear_length
   203 00000CF8 B801000000          <1>  mov eax, sys_write
   204 00000CFD BF01000000          <1>  mov edi, 1
   205 00000D02 48BE-               <1>  mov rsi, %1
   205 00000D04 [2000000000000000]  <1>
   206 00000D0C BA07000000          <1>  mov edx, %2
   207 00000D11 0F05                <1>  syscall
  1089                                  		
  1090 00000D13 EB5C                    		jmp exit
  1091                                  
  1092                                  
  1093                                  start_screen: 
  1094                                  
  1095 00000D15 50                      	push rax
  1096 00000D16 51                      	push rcx
  1097 00000D17 52                      	push rdx
  1098 00000D18 57                      	push rdi
  1099 00000D19 56                      	push rsi
  1100                                  	
  1101                                  	print msg1, msg1_length	
   203 00000D1A B801000000          <1>  mov eax, sys_write
   204 00000D1F BF01000000          <1>  mov edi, 1
   205 00000D24 48BE-               <1>  mov rsi, %1
   205 00000D26 [3800000000000000]  <1>
   206 00000D2E BAEE010000          <1>  mov edx, %2
   207 00000D33 0F05                <1>  syscall
  1102                                  	getchar
   212 00000D35 B800000000          <1>  mov rax, sys_read
   213 00000D3A BF00000000          <1>  mov rdi, STDIN_FILENO
   214 00000D3F 48BE-               <1>  mov rsi, input_char
   214 00000D41 [0500000000000000]  <1>
   215 00000D49 BA01000000          <1>  mov rdx, 1
   216 00000D4E 0F05                <1>  syscall
  1103                                  	print clear, clear_length
   203 00000D50 B801000000          <1>  mov eax, sys_write
   204 00000D55 BF01000000          <1>  mov edi, 1
   205 00000D5A 48BE-               <1>  mov rsi, %1
   205 00000D5C [2000000000000000]  <1>
   206 00000D64 BA07000000          <1>  mov edx, %2
   207 00000D69 0F05                <1>  syscall
  1104                                  
  1105 00000D6B 58                      	pop rax
  1106 00000D6C 59                      	pop rcx
  1107 00000D6D 5A                      	pop rdx
  1108 00000D6E 5F                      	pop rdi
  1109 00000D6F 5E                      	pop rsi
  1110 00000D70 C3                      	ret
  1111                                  
  1112                                  
  1113                                  
  1114                                  exit: 
  1115 00000D71 E8F2F4FFFF              	call canonical_on
  1116 00000D76 B83C000000              	mov    rax, 60
  1117 00000D7B BF00000000                  mov    rdi, 0
  1118 00000D80 0F05                        syscall
  1119                                  
  1120                                  
