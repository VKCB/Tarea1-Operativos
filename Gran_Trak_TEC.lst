     1                                  bits 64
     2                                  default rel
     3                                  
     4                                  
     5                                  ; Definicion de caracteres 
     6                                  	sys_read: equ 0	
     7                                  	sys_write:	equ 1
     8                                  	sys_nanosleep:	equ 35
     9                                  	sys_nanosleep2:	equ 200
    10                                  	sys_time:	equ 201
    11                                  	sys_fcntl:	equ 72
    12                                  
    13                                  	char_equal: equ 61 
    14                                  	char_aster: equ 42
    15                                  	char_may: equ 62  
    16                                  	char_men: equ 60 
    17                                  	char_dosp: equ 58
    18                                  	char_comillas: equ 71 ;Letra que identifica al Jugador 1
    19                                  	char_comilla: equ 39 
    20                                  	char_space: equ 32 
    21                                  	left_direction: equ -1
    22                                  	right_direction: equ 1
    23                                  	up_direction: equ 2
    24                                  	down_direction: equ 3
    25                                  	char_bot1: equ 98 ; Letra que identifica al bot1 blue
    26                                  	char_bot2: equ 98 ; Letra que identifica al bot1 blue
    27                                  	char_bot3: equ 98 ; Letra que identifica al bot1 blue
    28                                  	char_player2: equ 82 ; Letra que identifica al Jugador 2
    29                                  
    30                                  
    31                                  
    32                                  STDIN_FILENO: equ 0			;Se utiliza en llamadas al sistema que requieren un descriptor de archivo, por ejemplo, al leer de la entrada estándar
    33                                  
    34                                  F_SETFL:	equ 0x0004		;Se pasa como segundo argumento a la llamada al sistema fcntl para indicar que queremos cambiar los flags del descriptor de archivo.
    35                                  O_NONBLOCK: equ 0x0004		;Se utiliza como tercer argumento en la llamada al sistema fcntl para indicar que el descriptor de archivo debe operar en modo no bloqueante.
    36                                  
    37                                  ;definicion de pantalla en limpio
    38                                  	row_cells:	equ 24	;Numero de filas que caben en la pantalla
    39                                  	column_cells: 	equ 110 ; set to any (reasonable) value you wish
    40                                  	array_length:	equ row_cells * column_cells + row_cells ;(+ 32 caracteres de nueva línea)
    41                                  
    42                                  ;sleep time
    43                                  timespec:
    44 00000000 0000000000000000            tv_sec  dq 0
    45 00000008 002D310100000000            tv_nsec dq 20000000		;0.02 s
    46                                  
    47                                  timespec2:
    48 00000010 0000000000000000            tv_sec2  dq 0
    49 00000018 00204AA9D1010000            tv_nsec2 dq 2000000000000		;0.02 s
    50                                  
    51                                  ;limpieza de la pantalla
    52 00000020 1B5B324A1B5B48          clear:		db 27, "[2J", 27, "[H"	;2J: Esta es una secuencia de escape ANSI que indica Clear screen
    53                                  clear_length:	equ $-clear			;H: Indica reposicionamiento del cursor.
    54                                  
    55                                  ; Texto mostrado en la pantalla de inicio
    56                                  	
    57 00000027 202020202020202020-     	msg13: db "               ", 0xA, 0xD
    57 00000030 2020202020200A0D   
    58 00000038 202020202009090909-     	msg1: db "     					   TECNOLOGICO DE COSTA RICA        ", 0xA, 0xD
    58 00000041 092020205445434E4F-
    58 0000004A 4C4F4749434F204445-
    58 00000053 20434F535441205249-
    58 0000005C 434120202020202020-
    58 00000065 200A0D             
    59 00000068 202020202020202020-     	msg14: db "               ", 0xA, 0xD
    59 00000071 2020202020200A0D   
    60 00000079 202020202020202020-     	msg17: db "               ", 0xA, 0xD
    60 00000082 2020202020200A0D   
    61 0000008A 202020202020202020-     	msg18: db "               ", 0xA, 0xD
    61 00000093 2020202020200A0D   
    62 0000009B 09090909090956616C-     	msg2: db "						Valerin Calderon       ", 0xA, 0xD
    62 000000A4 6572696E2043616C64-
    62 000000AD 65726F6E2020202020-
    62 000000B6 20200A0D           
    63 000000BA 09090909090959656E-     	msg5: db "						Yendry Badilla         ", 0xA, 0xD
    63 000000C3 64727920426164696C-
    63 000000CC 6C6120202020202020-
    63 000000D5 20200A0D           
    64 000000D9 090909090909416E64-     	msg15: db "						Andrés Molina          ", 0xA, 0xD
    64 000000E2 72C3A973204D6F6C69-
    64 000000EB 6E6120202020202020-
    64 000000F4 2020200A0D         
    65 000000F9 202020202020202020-     	msg6: db "               ", 0xA, 0xD
    65 00000102 2020202020200A0D   
    66 0000010A 202020202020202020-     	msg7: db "               ", 0xA, 0xD
    66 00000113 2020202020200A0D   
    67 0000011B 202020202020202020-     	msg8: db "               ", 0xA, 0xD
    67 00000124 2020202020200A0D   
    68 0000012C 202020202020202020-     	msg9: db "               ", 0xA, 0xD
    68 00000135 2020202020200A0D   
    69 0000013D 202020202020202020-     	msg16: db "               ", 0xA, 0xD 
    69 00000146 2020202020200A0D   
    70 0000014E 090909090909475241-     	msg3: db "						GRAN TRAK TEC        ", 0xA, 0xD
    70 00000157 4E205452414B205445-
    70 00000160 432020202020202020-
    70 00000169 0A0D               
    71                                  
    72 0000016B 202020202020202020-     	msg19: db "               ", 0xA, 0xD
    72 00000174 2020202020200A0D   
    73 0000017C 202020202020202020-     	msg20: db "               ", 0xA, 0xD
    73 00000185 2020202020200A0D   
    74 0000018D 202020202020202020-     	msg21: db "               ", 0xA, 0xD
    74 00000196 2020202020200A0D   
    75 0000019E 202020202020202020-     	msg22: db "               ", 0xA, 0xD
    75 000001A7 2020202020200A0D   
    76 000001AF 202020202020202020-     	msg23: db "               ", 0xA, 0xD 
    76 000001B8 2020202020200A0D   
    77 000001C0 202020202020202020-     	msg24: db "               ", 0xA, 0xD
    77 000001C9 2020202020200A0D   
    78 000001D1 202020202020202020-     	msg25: db "               ", 0xA, 0xD
    78 000001DA 2020202020200A0D   
    79 000001E2 202020202020202020-     	msg26: db "               ", 0xA, 0xD 
    79 000001EB 2020202020200A0D   
    80 000001F3 202020202020090909-     	msg4: db "      					   PRESIONE ENTER PARA INICIAR        ", 0xA, 0xD
    80 000001FC 090920202050524553-
    80 00000205 494F4E4520454E5445-
    80 0000020E 52205041524120494E-
    80 00000217 494349415220202020-
    80 00000220 202020200A0D       
    81                                  	msg1_length:	equ $-msg1
    82                                  	msg2_length:	equ $-msg2
    83                                  	msg3_length:	equ $-msg3
    84                                  	msg4_length:	equ $-msg4
    85                                  	msg5_length:	equ $-msg5
    86                                  	msg13_length:	equ $-msg13
    87                                  	msg14_length:	equ $-msg14
    88                                  	msg15_length:	equ $-msg15
    89                                  	msg16_length:	equ $-msg16
    90                                  	msg17_length:	equ $-msg17 
    91                                  	msg6_length:	equ $-msg6 
    92                                  	msg7_length:	equ $-msg7 
    93                                  	msg8_length:	equ $-msg8 
    94                                  	msg9_length:	equ $-msg9 
    95                                  	msg18_length:	equ $-msg18
    96                                  	msg19_length:	equ $-msg19
    97                                  	msg20_length:	equ $-msg20
    98                                  	msg21_length:	equ $-msg21
    99                                  	msg22_length:	equ $-msg22
   100                                  	msg23_length:	equ $-msg23
   101                                  	msg24_length:	equ $-msg24
   102                                  	msg25_length:	equ $-msg25
   103                                  	msg26_length:	equ $-msg26
   104                                  
   105 00000226 456C206A7565676F20-     	game_over_msg db "El juego ha finalizado", 0xA, 0xD
   105 0000022F 68612066696E616C69-
   105 00000238 7A61646F0A0D       
   106                                  	game_over_msg_length equ $-game_over_msg
   107                                  
   108                                  	; Usefull macros (Como funciones reutilizables)
   109                                   
   110                                  	%macro setnonblocking 0		;Configura la entrada estándar para que funcione en modo no bloqueante
   111                                  		mov rax, sys_fcntl
   112                                  		mov rdi, STDIN_FILENO
   113                                  		mov rsi, F_SETFL
   114                                  		mov rdx, O_NONBLOCK
   115                                  		syscall
   116                                  	%endmacro
   117                                  
   118                                  	%macro unsetnonblocking 0	;Restablece la entrada estándar al modo bloqueante
   119                                  		mov rax, sys_fcntl
   120                                  		mov rdi, STDIN_FILENO
   121                                  		mov rsi, F_SETFL
   122                                  		mov rdx, 0
   123                                  		syscall
   124                                  	%endmacro
   125                                  
   126                                  	%macro full_line 0			;Linea completa de X
   127                                  		times column_cells db "X"
   128                                  		db 0x0a, 0xD
   129                                  	%endmacro
   130                                  
   131                                  	;Esta parte es para la creacion de la pista
   132                                  
   133                                  	%macro up_down_pista 0			;Parte de arriba de la pista
   134                                  		db "X"
   135                                  		times 9 db " "
   136                                  		times 90 db "O"
   137                                  		times 9 db " "
   138                                  		db "X"
   139                                  		db 0x0a, 0xD
   140                                  	%endmacro
   141                                  
   142                                  	%macro right_pista1 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   143                                  		db "X"
   144                                  		times 9 db " "
   145                                  		db "O"
   146                                  		times 88 db " "
   147                                  		db "O"
   148                                  		times 9 db " "
   149                                  		db "X", 0x0a, 0xD
   150                                  	%endmacro
   151                                  
   152                                  	%macro right_pista2 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   153                                  		db "X"
   154                                  		times 9 db " "
   155                                  		db "O"
   156                                  		times 70 db " "
   157                                  		times 19 db "O"
   158                                  		times 9 db " "
   159                                  		db "X", 0x0a, 0xD
   160                                  	%endmacro
   161                                  
   162                                  	%macro right_pista3 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   163                                  		db "X"
   164                                  		times 9 db " "
   165                                  		db "O"
   166                                  		times 70 db " "
   167                                  		db "O"
   168                                  		times 27 db " "
   169                                  		db "X", 0x0a, 0xD
   170                                  	%endmacro
   171                                  
   172                                  	%macro right_pista4 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   173                                  		db "X"
   174                                  		times 9 db " "
   175                                  		db "O"
   176                                  		times 70 db " "
   177                                  		db "O"
   178                                  		times 4 db " "
   179                                  		times 23 db "O"
   180                                  		db "X", 0x0a, 0xD
   181                                  	%endmacro
   182                                  
   183                                  	; Fin de la creacion de la pista
   184                                  
   185                                  	%macro marcador_j1 0			;Crea una línea completa de 'O' seguida de una nueva línea marcadores
   186                                  		db "X PLAYER 1 TURNS: "
   187                                  		times 60 db " "
   188                                  		db "Time:"
   189                                  		times 26 db " "
   190                                  		db "X"
   191                                  		db 0x0a, 0xD
   192                                  	%endmacro
   193                                  
   194                                  	%macro marcador_j2 0			;Crea una línea completa de 'O' seguida de una nueva línea
   195                                  		db "X PLAYER 2 TURNS: "
   196                                  		times 91 db " "
   197                                  		db "X"
   198                                  		db 0x0a, 0xD
   199                                  	%endmacro
   200                                  
   201                                  	%macro hollow_line 0		;Crea una línea con 'X' en los extremos y espacios en el medio, seguida de una nueva línea
   202                                  		db "X"
   203                                  		times column_cells-2 db char_space	;A 80 le resta las 2 X de los extremos e imprime 78 espacios
   204                                  		db "X", 0x0a, 0xD
   205                                  	%endmacro
   206                                  
   207                                  	%macro print 2				;Imprime una cadena especificada en la salida estándar
   208                                  		mov eax, sys_write
   209                                  		mov edi, 1 	; stdout
   210                                  		mov rsi, %1				;Parametro 1 que se pasa en donde se llama al macro
   211                                  		mov edx, %2				;Parametro 2
   212                                  		syscall
   213                                  	%endmacro
   214                                  
   215                                  	;Esta es la funcion que obtiene lo que uno ingrese
   216                                  	%macro getchar 0			;Lee un solo carácter de la entrada estándar y lo almacena en input_char
   217                                  		mov     rax, sys_read
   218                                  		mov     rdi, STDIN_FILENO
   219                                  		mov     rsi, input_char
   220                                  		mov     rdx, 1 ; number of bytes
   221                                  		syscall         ;read text input from keyboard
   222                                  	%endmacro
   223                                  
   224                                  	%macro sleeptime 0			;Suspende la ejecución del programa durante el tiempo especificado
   225                                  		mov eax, sys_nanosleep
   226                                  		mov rdi, timespec
   227                                  		xor esi, esi		; ignore remaining time in case of call interruption
   228                                  		syscall			; sleep for tv_sec seconds + tv_nsec nanoseconds
   229                                  	%endmacro
   230                                  
   231                                  global _start
   232                                  
   233                                  section .bss
   234                                  
   235 00000000 ??????????              	buffer resb 5  ; Buffer para almacenar los dígitos convertidos
   236                                  
   237 00000005 ????????????????        	input_char resq 1 
   238                                  
   239 0000000D ??                      	temp_char resb 1
   240 0000000E ??                      	random_value resb 1 ; Número random obtenido (renombrado para evitar conflicto)
   241 0000000F ??                      	random2_value resb 1 ; Número random adicional (renombrado para evitar conflicto)
   242 00000010 ????????????????        	start_time resq 1  ; Variable para almacenar el tiempo inicial
   243 00000018 ????????????????        	current_time resq 1 ; Variable para almacenar el tiempo actual
   244                                  
   245                                  	; Bots
   246 00000020 ??                      	bot_random resb 1 ; Número random obtenido para el bot (renombrado)
   247 00000021 ????????????????         	random_result resq 1
   248 00000029 ????????????????          	bot_speed resq 1
   249 00000031 ????????????????          	bot_counter resq 1
   250 00000039 ????????????????        	bot_direction resq 1  ; Variable para almacenar la direccion actual del bot
   251 00000041 ??                      	bot_first_move resb 1  ; Variable para rastrear si el bot ya realizó su primer movimiento (0 = no, 1 = sí)
   252 00000042 ??                      	bot_path_state resb 1  ; Estado actual en la ruta predefinida (0-7)
   253                                  
   254                                  
   255                                  section .data 
   256                                  
   257                                  
   258 00000000 2F6465762F7572616E-     	urandom db '/dev/urandom', 0
   258 00000009 646F6D00           
   259 0000000D 0A00                    	newline db 10, 0
   260                                  
   261 0000000F 0000000000000000        	score dq 0
   262 00000017 [A704000000000000]      	score_position dq board + 19 + 10* (column_cells + 2)
   263                                  
   264 0000001F 5469656D706F207265-     		time_msg db "Tiempo restante: ", 0
   264 00000028 7374616E74653A2000 
   265                                  		time_msg_length equ $-time_msg
   266 00000031 303000                  		time_buffer db "00", 0  ; Buffer para mostrar los segundos restantes como texto
   267                                  		time_buffer_length equ $-time_buffer
   268                                  
   269                                  	board:
   270                                  		full_line
   127 00000034 58<rep 6Eh>         <1>  times column_cells db "X"
   128 000000A2 0A0D                <1>  db 0x0a, 0xD
   271                                  		marcador_j1
   186 000000A4 5820504C4159455220- <1>  db "X PLAYER 1 TURNS: "
   186 000000AD 31205455524E533A20  <1>
   187 000000B6 20<rep 3Ch>         <1>  times 60 db " "
   188 000000F2 54696D653A          <1>  db "Time:"
   189 000000F7 20<rep 1Ah>         <1>  times 26 db " "
   190 00000111 58                  <1>  db "X"
   191 00000112 0A0D                <1>  db 0x0a, 0xD
   272                                  		marcador_j2 
   195 00000114 5820504C4159455220- <1>  db "X PLAYER 2 TURNS: "
   195 0000011D 32205455524E533A20  <1>
   196 00000126 20<rep 5Bh>         <1>  times 91 db " "
   197 00000181 58                  <1>  db "X"
   198 00000182 0A0D                <1>  db 0x0a, 0xD
   273                                  		full_line
   127 00000184 58<rep 6Eh>         <1>  times column_cells db "X"
   128 000001F2 0A0D                <1>  db 0x0a, 0xD
   274                                          %rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   275                                          hollow_line
   276                                          %endrep 
   275                              <1>  hollow_line
   202 000001F4 58                  <2>  db "X"
   203 000001F5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 00000261 580A0D              <2>  db "X", 0x0a, 0xD
   275                              <1>  hollow_line
   202 00000264 58                  <2>  db "X"
   203 00000265 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 000002D1 580A0D              <2>  db "X", 0x0a, 0xD
   275                              <1>  hollow_line
   202 000002D4 58                  <2>  db "X"
   203 000002D5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 00000341 580A0D              <2>  db "X", 0x0a, 0xD
   277                                  
   278                                  		up_down_pista
   134 00000344 58                  <1>  db "X"
   135 00000345 20<rep 9h>          <1>  times 9 db " "
   136 0000034E 4F<rep 5Ah>         <1>  times 90 db "O"
   137 000003A8 20<rep 9h>          <1>  times 9 db " "
   138 000003B1 58                  <1>  db "X"
   139 000003B2 0A0D                <1>  db 0x0a, 0xD
   279                                  
   280                                  
   281                                          right_pista2
   153 000003B4 58                  <1>  db "X"
   154 000003B5 20<rep 9h>          <1>  times 9 db " "
   155 000003BE 4F                  <1>  db "O"
   156 000003BF 20<rep 46h>         <1>  times 70 db " "
   157 00000405 4F<rep 13h>         <1>  times 19 db "O"
   158 00000418 20<rep 9h>          <1>  times 9 db " "
   159 00000421 580A0D              <1>  db "X", 0x0a, 0xD
   282                                  
   283                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   284                                          right_pista3
   285                                          %endrep
   284                              <1>  right_pista3
   163 00000424 58                  <2>  db "X"
   164 00000425 20<rep 9h>          <2>  times 9 db " "
   165 0000042E 4F                  <2>  db "O"
   166 0000042F 20<rep 46h>         <2>  times 70 db " "
   167 00000475 4F                  <2>  db "O"
   168 00000476 20<rep 1Bh>         <2>  times 27 db " "
   169 00000491 580A0D              <2>  db "X", 0x0a, 0xD
   284                              <1>  right_pista3
   163 00000494 58                  <2>  db "X"
   164 00000495 20<rep 9h>          <2>  times 9 db " "
   165 0000049E 4F                  <2>  db "O"
   166 0000049F 20<rep 46h>         <2>  times 70 db " "
   167 000004E5 4F                  <2>  db "O"
   168 000004E6 20<rep 1Bh>         <2>  times 27 db " "
   169 00000501 580A0D              <2>  db "X", 0x0a, 0xD
   286                                  
   287                                  		right_pista4
   173 00000504 58                  <1>  db "X"
   174 00000505 20<rep 9h>          <1>  times 9 db " "
   175 0000050E 4F                  <1>  db "O"
   176 0000050F 20<rep 46h>         <1>  times 70 db " "
   177 00000555 4F                  <1>  db "O"
   178 00000556 20<rep 4h>          <1>  times 4 db " "
   179 0000055A 4F<rep 17h>         <1>  times 23 db "O"
   180 00000571 580A0D              <1>  db "X", 0x0a, 0xD
   288                                  		right_pista4
   173 00000574 58                  <1>  db "X"
   174 00000575 20<rep 9h>          <1>  times 9 db " "
   175 0000057E 4F                  <1>  db "O"
   176 0000057F 20<rep 46h>         <1>  times 70 db " "
   177 000005C5 4F                  <1>  db "O"
   178 000005C6 20<rep 4h>          <1>  times 4 db " "
   179 000005CA 4F<rep 17h>         <1>  times 23 db "O"
   180 000005E1 580A0D              <1>  db "X", 0x0a, 0xD
   289                                  		right_pista4
   173 000005E4 58                  <1>  db "X"
   174 000005E5 20<rep 9h>          <1>  times 9 db " "
   175 000005EE 4F                  <1>  db "O"
   176 000005EF 20<rep 46h>         <1>  times 70 db " "
   177 00000635 4F                  <1>  db "O"
   178 00000636 20<rep 4h>          <1>  times 4 db " "
   179 0000063A 4F<rep 17h>         <1>  times 23 db "O"
   180 00000651 580A0D              <1>  db "X", 0x0a, 0xD
   290                                  
   291                                         %rep 2  ; 3 = linea superior+linea inferior+linea de comandos 
   292                                          right_pista3
   293                                          %endrep 
   292                              <1>  right_pista3
   163 00000654 58                  <2>  db "X"
   164 00000655 20<rep 9h>          <2>  times 9 db " "
   165 0000065E 4F                  <2>  db "O"
   166 0000065F 20<rep 46h>         <2>  times 70 db " "
   167 000006A5 4F                  <2>  db "O"
   168 000006A6 20<rep 1Bh>         <2>  times 27 db " "
   169 000006C1 580A0D              <2>  db "X", 0x0a, 0xD
   292                              <1>  right_pista3
   163 000006C4 58                  <2>  db "X"
   164 000006C5 20<rep 9h>          <2>  times 9 db " "
   165 000006CE 4F                  <2>  db "O"
   166 000006CF 20<rep 46h>         <2>  times 70 db " "
   167 00000715 4F                  <2>  db "O"
   168 00000716 20<rep 1Bh>         <2>  times 27 db " "
   169 00000731 580A0D              <2>  db "X", 0x0a, 0xD
   294                                  
   295                                  		right_pista2
   153 00000734 58                  <1>  db "X"
   154 00000735 20<rep 9h>          <1>  times 9 db " "
   155 0000073E 4F                  <1>  db "O"
   156 0000073F 20<rep 46h>         <1>  times 70 db " "
   157 00000785 4F<rep 13h>         <1>  times 19 db "O"
   158 00000798 20<rep 9h>          <1>  times 9 db " "
   159 000007A1 580A0D              <1>  db "X", 0x0a, 0xD
   296                                  
   297                                  
   298                                  		up_down_pista
   134 000007A4 58                  <1>  db "X"
   135 000007A5 20<rep 9h>          <1>  times 9 db " "
   136 000007AE 4F<rep 5Ah>         <1>  times 90 db "O"
   137 00000808 20<rep 9h>          <1>  times 9 db " "
   138 00000811 58                  <1>  db "X"
   139 00000812 0A0D                <1>  db 0x0a, 0xD
   299                                  
   300                                  		%rep 3  ; 3 = linea superior+linea inferior+linea de comandos 
   301                                          hollow_line
   302                                          %endrep
   301                              <1>  hollow_line
   202 00000814 58                  <2>  db "X"
   203 00000815 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 00000881 580A0D              <2>  db "X", 0x0a, 0xD
   301                              <1>  hollow_line
   202 00000884 58                  <2>  db "X"
   203 00000885 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 000008F1 580A0D              <2>  db "X", 0x0a, 0xD
   301                              <1>  hollow_line
   202 000008F4 58                  <2>  db "X"
   203 000008F5 20<rep 6Ch>         <2>  times column_cells-2 db char_space
   204 00000961 580A0D              <2>  db "X", 0x0a, 0xD
   303                                  
   304                                          full_line
   127 00000964 58<rep 6Eh>         <1>  times column_cells db "X"
   128 000009D2 0A0D                <1>  db 0x0a, 0xD
   305                                  	board_size:   equ   $ - board
   306                                  
   307                                  	; Added for the terminal issue	
   308 000009D4 00<rep 24h>             		termios:        times 36 db 0	;Define una estructura de 36 bytes inicializados a 0. Esta estructura es utilizada para almacenar las configuraciones del terminal
   309                                  		stdin:          equ 0			;Define el descriptor de archivo para la entrada estándar (stdin), que es 0
   310                                  		ICANON:         equ 1<<1		;Canonico la entrada no se envía al programa hasta que el usuario presiona Enter
   311                                  		ECHO:           equ 1<<3		;Bandera que habilita o deshabilita este modo
   312                                  		VTIME: 			equ 5
   313                                  		VMIN:			equ 6
   314                                  		CC_C:			equ 18
   315                                  
   316                                  
   317 000009F8 [E904000000000000]      	pallet_position dq board + 85 + ((column_cells + 2) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical 
   318 00000A00 0300000000000000        	pallet_size dq 3
   319                                  
   320 00000A08 [F304000000000000]      	bot_initial_position dq board + 85 + ((column_cells + 3) * 10)  ;posición inicial
   321 00000A10 [F304000000000000]      	bot_position dq board + 85 + ((column_cells + 3) * 10) ; El 1 es el movimiento horizontal y  en ((column_cells + 2) * 12) el 12 es el movimiento vertical
   322 00000A18 [E604000000000000]      	player2_position dq board + 82 + ((column_cells + 2) * 10) ; Posición inicial del Jugador 2
   323 00000A20 1E00000000000000        	pared1_x_pos: dq 30 ;0-59
   324 00000A28 0100000000000000        	pared1_y_pos: dq 1
   325 00000A30 5000000000000000        	pared2_x_pos: dq 80 ;0-59
   326 00000A38 0100000000000000        	pared2_y_pos: dq 1
   327 00000A40 1500000000000000        		colen: dq 21
   328 00000A48 0000000000000000        		colj: dq 0
   329 00000A50 0000000000000000        		cole: dq 0
   330 00000A58 1500000000000000        		pared: dq 21
   331 00000A60 0000000000000000        		colplayer: dq 0 
   332                                  
   333                                  
   334                                  section .text
   335                                  ;;;;;;;;;;;;;;;;;;;;for the working of the terminal;;;;;;;;;;;;;;;;;
   336                                  canonical_off:										;La entrada se procese carácter por carácter sin esperar a que se presione Enter.
   337 0000023E E86F000000                      call read_stdin_termios						;Guarda los atributos actuales del terminal en la variable termios
   338                                  
   339                                          ; clear canonical bit in local mode flags	
   340 00000243 50                              push rax						
   341 00000244 B802000000                      mov eax, ICANON								;Carga el valor de la constante ICANON (que representa el bit del modo canónico) en eax
   342 00000249 F7D0                            not eax										;Niega todos los bits en eax
   343 0000024B 2105(E0090000)                  and [termios+12], eax						;Limpia el bit canónico en las banderas de modo local
   344 00000251 C605(EB090000)00        		mov byte[termios+CC_C+VTIME], 0				;Establecen VTIME y VMIN en 0 para que el terminal no espere caracteres adicionales
   345 00000258 C605(EC090000)00        		mov byte[termios+CC_C+VMIN], 0
   346 0000025F 58                              pop rax
   347                                  
   348 00000260 E86C000000                      call write_stdin_termios					;Escribe los atributos modificados de termios de vuelta al terminal
   349 00000265 C3                              ret
   350                                  
   351                                  echo_off:											;No se muestran los caracteres introducidos
   352 00000266 E847000000                      call read_stdin_termios
   353                                  
   354                                          ; clear echo bit in local mode flags
   355 0000026B 50                              push rax
   356 0000026C B808000000                      mov eax, ECHO
   357 00000271 F7D0                            not eax
   358 00000273 2105(E0090000)                  and [termios+12], eax
   359 00000279 58                              pop rax
   360                                  
   361 0000027A E852000000                      call write_stdin_termios
   362 0000027F C3                              ret
   363                                  
   364                                  canonical_on:										;La entrada se procesa en líneas completas. Espera hasta que el usuario presione Enter
   365 00000280 E82D000000                      call read_stdin_termios
   366                                  
   367                                          ; set canonical bit in local mode flags
   368 00000285 830D(E0090000)02                or dword [termios+12], ICANON
   369 0000028C C605(EB090000)00        		mov byte[termios+CC_C+VTIME], 0			;Tiempo en decisegundos que el terminal espera para la entrada.
   370 00000293 C605(EC090000)01        		mov byte[termios+CC_C+VMIN], 1			;El número mínimo de caracteres que se deben leer
   371 0000029A E832000000                      call write_stdin_termios
   372 0000029F C3                              ret
   373                                  
   374                                  echo_on:											;Se muestran los caracteres introducidos
   375 000002A0 E80D000000                      call read_stdin_termios
   376                                  
   377                                          ; set echo bit in local mode flags
   378 000002A5 830D(E0090000)08                or dword [termios+12], ECHO
   379                                  
   380 000002AC E820000000                      call write_stdin_termios
   381 000002B1 C3                              ret
   382                                  
   383                                  read_stdin_termios:									;Lee los atributos del terminal y los guarda en la variable termios
   384 000002B2 50                              push rax
   385 000002B3 53                              push rbx
   386 000002B4 51                              push rcx
   387 000002B5 52                              push rdx
   388                                  
   389 000002B6 B836000000                      mov eax, 36h
   390 000002BB BB00000000                      mov ebx, stdin
   391 000002C0 B901540000                      mov ecx, 5401h
   392 000002C5 BA[D4090000]                    mov edx, termios
   393 000002CA CD80                            int 80h
   394                                  
   395 000002CC 5A                              pop rdx
   396 000002CD 59                              pop rcx
   397 000002CE 5B                              pop rbx
   398 000002CF 58                              pop rax
   399 000002D0 C3                              ret
   400                                  
   401                                  write_stdin_termios:								;Escribe los atributos del terminal utilizando la llamada al sistema 
   402 000002D1 50                              push rax
   403 000002D2 53                              push rbx
   404 000002D3 51                              push rcx
   405 000002D4 52                              push rdx
   406                                  
   407 000002D5 B836000000                      mov eax, 36h
   408 000002DA BB00000000                      mov ebx, stdin
   409 000002DF B902540000                      mov ecx, 5402h
   410 000002E4 BA[D4090000]                    mov edx, termios
   411 000002E9 CD80                            int 80h
   412                                  
   413 000002EB 5A                              pop rdx
   414 000002EC 59                              pop rcx
   415 000002ED 5B                              pop rbx
   416 000002EE 58                              pop rax
   417 000002EF C3                              ret
   418                                  
   419                                  ;;;;;;;;;;;;;;;;;;;;end for the working of the terminal;;;;;;;;;;;;
   420                                  
   421                                  ; Function: print_pallet
   422                                  ; This function moves the pallet in the game
   423                                  ; Arguments: none
   424                                  ;
   425                                  ; Return;
   426                                  ;	void
   427                                  print_pallet:
   428                                    
   429 000002F0 4C8B05(F8090000)        	mov r8, [pallet_position] 
   430                                  	.write_pallet:
   431 000002F7 41C60047                		mov byte [r8], char_comillas
   432 000002FB C3                      	ret
   433                                  
   434                                  ; Function: move_pallet
   435                                  ; Mueve al Jugador 1 en la direccion especificada
   436                                  ; Argumentos:
   437                                  ;   rdi: direccion (up_direction, down_direction, left_direction, right_direction)
   438                                  ; Return:
   439                                  ;	void
   440                                  move_pallet:
   441                                  
   442 000002FC 50                      	push rax
   443 000002FD 51                      	push rcx
   444                                  
   445 000002FE 4C8B2D(480A0000)        	mov r13, [colj]
   446 00000305 4983FD01                	cmp r13, 1
   447 00000309 0F845B070000            	je .endp
   448                                  	  
   449 0000030F 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   450 00000313 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   451                                  
   452 00000315 4883FF03                	cmp rdi, down_direction
   453 00000319 0F8471020000            	je .move_down
   454                                  
   455 0000031F 4883FF01                	cmp rdi, right_direction
   456 00000323 0F8472060000            	je .move_right
   457                                  
   458 00000329 4883FFFF                	cmp rdi, left_direction
   459 0000032D 0F84BD040000            	je .move_left
   460                                  
   461                                  	.move_up:
   462 00000333 4C8B05(F8090000)        		mov r8, [pallet_position]
   463                                  
   464                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   465 0000033A 4981F8[61020000]        		cmp r8, board + 109 + ((column_cells + 2) * 4)
   466 00000341 0F8C23070000            		jl .endp
   467                                  
   468 00000347 4981F8[76040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   469 0000034E 0F8416070000            		je .endp 
   470 00000354 4981F8[77040000]        		cmp r8, board + 83 + ((column_cells + 2) * 9)
   471 0000035B 0F8409070000            		je .endp
   472 00000361 4981F8[78040000]        		cmp r8, board + 84 + ((column_cells + 2) * 9)
   473 00000368 0F84FC060000            		je .endp
   474 0000036E 4981F8[79040000]        		cmp r8, board + 85 + ((column_cells + 2) * 9)
   475 00000375 0F84EF060000            		je .endp
   476 0000037B 4981F8[7A040000]        		cmp r8, board + 86 + ((column_cells + 2) * 9)
   477 00000382 0F84E2060000            		je .endp
   478 00000388 4981F8[7B040000]        		cmp r8, board + 87 + ((column_cells + 2) * 9)
   479 0000038F 0F84D5060000            		je .endp
   480 00000395 4981F8[7C040000]        		cmp r8, board + 88 + ((column_cells + 2) * 9)
   481 0000039C 0F84C8060000            		je .endp
   482 000003A2 4981F8[7D040000]        		cmp r8, board + 89 + ((column_cells + 2) * 9)
   483 000003A9 0F84BB060000            		je .endp
   484 000003AF 4981F8[7E040000]        		cmp r8, board + 90 + ((column_cells + 2) * 9)
   485 000003B6 0F84AE060000            		je .endp
   486 000003BC 4981F8[7F040000]        		cmp r8, board + 91 + ((column_cells + 2) * 9)
   487 000003C3 0F84A1060000            		je .endp
   488 000003C9 4981F8[80040000]        		cmp r8, board + 92 + ((column_cells + 2) * 9)
   489 000003D0 0F8494060000            		je .endp
   490 000003D6 4981F8[81040000]        		cmp r8, board + 93 + ((column_cells + 2) * 9)
   491 000003DD 0F8487060000            		je .endp
   492 000003E3 4981F8[82040000]        		cmp r8, board + 94 + ((column_cells + 2) * 9)
   493 000003EA 0F847A060000            		je .endp
   494 000003F0 4981F8[83040000]        		cmp r8, board + 95 + ((column_cells + 2) * 9)
   495 000003F7 0F846D060000            		je .endp
   496 000003FD 4981F8[84040000]        		cmp r8, board + 96 + ((column_cells + 2) * 9)
   497 00000404 0F8460060000            		je .endp
   498 0000040A 4981F8[85040000]        		cmp r8, board + 97 + ((column_cells + 2) * 9)
   499 00000411 0F8453060000            		je .endp
   500 00000417 4981F8[86040000]        		cmp r8, board + 98 + ((column_cells + 2) * 9)
   501 0000041E 0F8446060000            		je .endp
   502 00000424 4981F8[87040000]        		cmp r8, board + 99 + ((column_cells + 2) * 9)
   503 0000042B 0F8439060000            		je .endp
   504                                  
   505 00000431 4981F8[AA060000]        		cmp r8, board + 86 + ((column_cells + 2) * 14)
   506 00000438 0F842C060000            		je .endp
   507 0000043E 4981F8[AB060000]        		cmp r8, board + 87 + ((column_cells + 2) * 14)
   508 00000445 0F841F060000            		je .endp
   509 0000044B 4981F8[AC060000]        		cmp r8, board + 88 + ((column_cells + 2) * 14)
   510 00000452 0F8412060000            		je .endp
   511 00000458 4981F8[AD060000]        		cmp r8, board + 89 + ((column_cells + 2) * 14)
   512 0000045F 0F8405060000            		je .endp
   513 00000465 4981F8[AE060000]        		cmp r8, board + 90 + ((column_cells + 2) * 14)
   514 0000046C 0F84F8050000            		je .endp
   515 00000472 4981F8[AF060000]        		cmp r8, board + 91 + ((column_cells + 2) * 14)
   516 00000479 0F84EB050000            		je .endp
   517 0000047F 4981F8[B0060000]        		cmp r8, board + 92 + ((column_cells + 2) * 14)
   518 00000486 0F84DE050000            		je .endp
   519 0000048C 4981F8[B1060000]        		cmp r8, board + 93 + ((column_cells + 2) * 14)
   520 00000493 0F84D1050000            		je .endp
   521 00000499 4981F8[B2060000]        		cmp r8, board + 94 + ((column_cells + 2) * 14)
   522 000004A0 0F84C4050000            		je .endp
   523 000004A6 4981F8[B3060000]        		cmp r8, board + 95 + ((column_cells + 2) * 14)
   524 000004AD 0F84B7050000            		je .endp
   525 000004B3 4981F8[B4060000]        		cmp r8, board + 96 + ((column_cells + 2) * 14)
   526 000004BA 0F84AA050000            		je .endp
   527 000004C0 4981F8[B5060000]        		cmp r8, board + 97 + ((column_cells + 2) * 14)
   528 000004C7 0F849D050000            		je .endp
   529 000004CD 4981F8[B6060000]        		cmp r8, board + 98 + ((column_cells + 2) * 14)
   530 000004D4 0F8490050000            		je .endp
   531 000004DA 4981F8[B7060000]        		cmp r8, board + 99 + ((column_cells + 2) * 14)
   532 000004E1 0F8483050000            		je .endp
   533 000004E7 4981F8[B8060000]        		cmp r8, board + 100 + ((column_cells + 2) * 14)
   534 000004EE 0F8476050000            		je .endp
   535 000004F4 4981F8[B9060000]        		cmp r8, board + 101 + ((column_cells + 2) * 14)
   536 000004FB 0F8469050000            		je .endp
   537 00000501 4981F8[BA060000]        		cmp r8, board + 102 + ((column_cells + 2) * 14)
   538 00000508 0F845C050000            		je .endp
   539 0000050E 4981F8[BB060000]        		cmp r8, board + 103 + ((column_cells + 2) * 14)
   540 00000515 0F844F050000            		je .endp
   541 0000051B 4981F8[BC060000]        		cmp r8, board + 104 + ((column_cells + 2) * 14)
   542 00000522 0F8442050000            		je .endp
   543 00000528 4981F8[BD060000]        		cmp r8, board + 105 + ((column_cells + 2) * 14)
   544 0000052F 0F8435050000            		je .endp
   545 00000535 4981F8[BE060000]        		cmp r8, board + 106 + ((column_cells + 2) * 14)
   546 0000053C 0F8428050000            		je .endp
   547 00000542 4981F8[BF060000]        		cmp r8, board + 107 + ((column_cells + 2) * 14)
   548 00000549 0F841B050000            		je .endp
   549 0000054F 4981F8[C0060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   550 00000556 0F840E050000            		je .endp
   551                                  
   552 0000055C 4981F8[1D080000]        		cmp r8, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
   553 00000563 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
   554                                  
   555 00000565 4981F8[78080000]        		cmp r8, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
   556 0000056C 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
   557                                  
   558                                  		; Aquí entra si 81 < r8 < 100
   559 0000056E EB1B                    		jmp .continuar    
   560                                  
   561                                  		.fuera_rango:
   562 00000570 4C8B0D(000A0000)        			mov r9, [pallet_size]
   563 00000577 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   564 0000057B 4983E870                			sub r8, 112						; Mover una fila arriba (restar 320)
   565 0000057F 4C8905(F8090000)        			mov [pallet_position], r8			; Actualizar posición
   566                                  
   567 00000586 E9DF040000              		jmp .endp
   568                                  
   569                                  		.continuar:
   570 0000058B E9DA040000              			jmp .endp
   571                                  
   572                                  	.move_down:
   573                                  
   574 00000590 4C8B05(F8090000)        		mov r8, [pallet_position]
   575                                  
   576 00000597 4981F8[EA040000]        		cmp r8, board + 86 + ((column_cells + 2) * 10)  
   577 0000059E 0F84C6040000            		je .endp
   578 000005A4 4981F8[EB040000]        		cmp r8, board + 87 + ((column_cells + 2) * 10)  
   579 000005AB 0F84B9040000            		je .endp
   580 000005B1 4981F8[EC040000]        		cmp r8, board + 88 + ((column_cells + 2) * 10)  
   581 000005B8 0F84AC040000            		je .endp
   582 000005BE 4981F8[ED040000]        		cmp r8, board + 89 + ((column_cells + 2) * 10)  
   583 000005C5 0F849F040000            		je .endp
   584 000005CB 4981F8[EE040000]        		cmp r8, board + 90 + ((column_cells + 2) * 10)  
   585 000005D2 0F8492040000            		je .endp
   586 000005D8 4981F8[EF040000]        		cmp r8, board + 91 + ((column_cells + 2) * 10)  
   587 000005DF 0F8485040000            		je .endp
   588 000005E5 4981F8[F0040000]        		cmp r8, board + 92 + ((column_cells + 2) * 10)  
   589 000005EC 0F8478040000            		je .endp
   590 000005F2 4981F8[F1040000]        		cmp r8, board + 93 + ((column_cells + 2) * 10)  
   591 000005F9 0F846B040000            		je .endp
   592 000005FF 4981F8[F2040000]        		cmp r8, board + 94 + ((column_cells + 2) * 10)  
   593 00000606 0F845E040000            		je .endp
   594 0000060C 4981F8[F3040000]        		cmp r8, board + 95 + ((column_cells + 2) * 10)  
   595 00000613 0F8451040000            		je .endp
   596 00000619 4981F8[F4040000]        		cmp r8, board + 96 + ((column_cells + 2) * 10)  
   597 00000620 0F8444040000            		je .endp
   598 00000626 4981F8[F5040000]        		cmp r8, board + 97 + ((column_cells + 2) * 10)  
   599 0000062D 0F8437040000            		je .endp
   600 00000633 4981F8[F6040000]        		cmp r8, board + 98 + ((column_cells + 2) * 10)  
   601 0000063A 0F842A040000            		je .endp
   602 00000640 4981F8[F7040000]        		cmp r8, board + 99 + ((column_cells + 2) * 10)  
   603 00000647 0F841D040000            		je .endp
   604 0000064D 4981F8[F8040000]        		cmp r8, board + 100 + ((column_cells + 2) * 10)  
   605 00000654 0F8410040000            		je .endp
   606 0000065A 4981F8[F9040000]        		cmp r8, board + 101 + ((column_cells + 2) * 10)  
   607 00000661 0F8403040000            		je .endp
   608 00000667 4981F8[FA040000]        		cmp r8, board + 102 + ((column_cells + 2) * 10)  
   609 0000066E 0F84F6030000            		je .endp
   610 00000674 4981F8[FB040000]        		cmp r8, board + 103 + ((column_cells + 2) * 10)  
   611 0000067B 0F84E9030000            		je .endp
   612 00000681 4981F8[FC040000]        		cmp r8, board + 104 + ((column_cells + 2) * 10)  
   613 00000688 0F84DC030000            		je .endp
   614 0000068E 4981F8[FD040000]        		cmp r8, board + 105 + ((column_cells + 2) * 10)  
   615 00000695 0F84CF030000            		je .endp
   616 0000069B 4981F8[FE040000]        		cmp r8, board + 106 + ((column_cells + 2) * 10)  
   617 000006A2 0F84C2030000            		je .endp
   618 000006A8 4981F8[FF040000]        		cmp r8, board + 107 + ((column_cells + 2) * 10)  
   619 000006AF 0F84B5030000            		je .endp
   620 000006B5 4981F8[00050000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)  
   621 000006BC 0F84A8030000            		je .endp
   622                                  
   623 000006C2 4981F8[16070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   624 000006C9 0F849B030000            		je .endp
   625 000006CF 4981F8[17070000]        		cmp r8, board + 83 + ((column_cells + 2) * 15)
   626 000006D6 0F848E030000            		je .endp
   627 000006DC 4981F8[18070000]        		cmp r8, board + 84 + ((column_cells + 2) * 15)
   628 000006E3 0F8481030000            		je .endp
   629 000006E9 4981F8[19070000]        		cmp r8, board + 85 + ((column_cells + 2) * 15)
   630 000006F0 0F8474030000            		je .endp
   631 000006F6 4981F8[1A070000]        		cmp r8, board + 86 + ((column_cells + 2) * 15)
   632 000006FD 0F8467030000            		je .endp
   633 00000703 4981F8[1B070000]        		cmp r8, board + 87 + ((column_cells + 2) * 15)
   634 0000070A 0F845A030000            		je .endp
   635 00000710 4981F8[1C070000]        		cmp r8, board + 88 + ((column_cells + 2) * 15)
   636 00000717 0F844D030000            		je .endp
   637 0000071D 4981F8[1D070000]        		cmp r8, board + 89 + ((column_cells + 2) * 15)
   638 00000724 0F8440030000            		je .endp
   639 0000072A 4981F8[1E070000]        		cmp r8, board + 90 + ((column_cells + 2) * 15)
   640 00000731 0F8433030000            		je .endp
   641 00000737 4981F8[1F070000]        		cmp r8, board + 91 + ((column_cells + 2) * 15)
   642 0000073E 0F8426030000            		je .endp
   643 00000744 4981F8[20070000]        		cmp r8, board + 92 + ((column_cells + 2) * 15)
   644 0000074B 0F8419030000            		je .endp
   645 00000751 4981F8[21070000]        		cmp r8, board + 93 + ((column_cells + 2) * 15)
   646 00000758 0F840C030000            		je .endp
   647 0000075E 4981F8[22070000]        		cmp r8, board + 94 + ((column_cells + 2) * 15)
   648 00000765 0F84FF020000            		je .endp
   649 0000076B 4981F8[23070000]        		cmp r8, board + 95 + ((column_cells + 2) * 15)
   650 00000772 0F84F2020000            		je .endp
   651 00000778 4981F8[24070000]        		cmp r8, board + 96 + ((column_cells + 2) * 15)
   652 0000077F 0F84E5020000            		je .endp
   653 00000785 4981F8[25070000]        		cmp r8, board + 97 + ((column_cells + 2) * 15)
   654 0000078C 0F84D8020000            		je .endp
   655 00000792 4981F8[26070000]        		cmp r8, board + 98 + ((column_cells + 2) * 15)
   656 00000799 0F84CB020000            		je .endp
   657 0000079F 4981F8[27070000]        		cmp r8, board + 99 + ((column_cells + 2) * 15)
   658 000007A6 0F84BE020000            		je .endp
   659                                  		
   660 000007AC 4981F8[F4080000]        		cmp r8, board + ((column_cells + 2) * 20)
   661 000007B3 0F8FB1020000            		jg .endp
   662                                  
   663                                  
   664 000007B9 4981F8[DD020000]        		cmp r8, board + 9 + ((column_cells + 2) * 6)  
   665 000007C0 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
   666                                  
   667 000007C2 4981F8[38030000]        		cmp r8, board + 100 + ((column_cells + 2) * 6) 
   668 000007C9 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
   669                                  
   670                                  		
   671                                  
   672                                  		; Aquí entra si 81 < r8 < 100
   673 000007CB E9BBFDFFFF              		jmp .continuar    
   674                                  
   675                                  		.fuera_rango_down:
   676 000007D0 4C8B0D(000A0000)        			mov r9, [pallet_size]
   677 000007D7 41C60020                			mov byte [r8], char_space	; Limpiar último carácter del palet
   678 000007DB 4983C070                			add r8, 112							; Mover una fila abajo (sumar 320)
   679 000007DF 4C8905(F8090000)        			mov [pallet_position], r8			; Actualizar posición
   680                                  
   681                                  
   682 000007E6 E97F020000              		jmp .endp	
   683                                  
   684                                  		.continuar_down:
   685 000007EB E97A020000              			jmp .endp
   686                                  
   687                                  
   688                                  
   689                                  		
   690                                  		
   691                                  
   692                                  	.move_left:
   693                                  
   694 000007F0 4C8B2D(480A0000)        		mov r13, [colj]
   695 000007F7 4983FD01                		cmp r13, 1
   696 000007FB 0F8469020000            		je .endp
   697                                  
   698 00000801 4C8B05(F8090000)        		mov r8, [pallet_position]
   699                                  
   700                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
   701 00000808 4981F8[F5010000]        		cmp r8, board + 1 + ((column_cells + 2) * 4)
   702 0000080F 0F8455020000            		je .endp 
   703                                  
   704 00000815 4981F8[65020000]        		cmp r8, board + 1 + ((column_cells + 2) * 5)
   705 0000081C 0F8448020000            		je .endp 
   706                                  
   707 00000822 4981F8[D5020000]        		cmp r8, board + 1 + ((column_cells + 2) * 6)
   708 00000829 0F843B020000            		je .endp 
   709                                  
   710 0000082F 4981F8[45030000]        		cmp r8, board + 1 + ((column_cells + 2) * 7)
   711 00000836 0F842E020000            		je .endp 
   712                                  
   713 0000083C 4981F8[B5030000]        		cmp r8, board + 1 + ((column_cells + 2) * 8)
   714 00000843 0F8421020000            		je .endp 
   715                                  
   716 00000849 4981F8[25040000]        		cmp r8, board + 1 + ((column_cells + 2) * 9)
   717 00000850 0F8414020000            		je .endp 
   718                                  	
   719 00000856 4981F8[95040000]        		cmp r8, board + 1 + ((column_cells + 2) * 10)
   720 0000085D 0F8407020000            		je .endp 
   721                                  
   722 00000863 4981F8[05050000]        		cmp r8, board + 1 + ((column_cells + 2) * 11)
   723 0000086A 0F84FA010000            		je .endp 
   724                                  
   725 00000870 4981F8[75050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   726 00000877 0F84ED010000            		je .endp 
   727                                  
   728 0000087D 4981F8[75050000]        		cmp r8, board + 1 + ((column_cells + 2) * 12)
   729 00000884 0F84E0010000            		je .endp 
   730                                  
   731 0000088A 4981F8[E5050000]        		cmp r8, board + 1 + ((column_cells + 2) * 13)
   732 00000891 0F84D3010000            		je .endp 
   733                                  
   734 00000897 4981F8[55060000]        		cmp r8, board + 1 + ((column_cells + 2) * 14)
   735 0000089E 0F84C6010000            		je .endp 
   736                                  
   737 000008A4 4981F8[C5060000]        		cmp r8, board + 1 + ((column_cells + 2) * 15)
   738 000008AB 0F84B9010000            		je .endp 
   739                                  
   740 000008B1 4981F8[35070000]        		cmp r8, board + 1 + ((column_cells + 2) * 16)
   741 000008B8 0F84AC010000            		je .endp 
   742                                  
   743 000008BE 4981F8[A5070000]        		cmp r8, board + 1 + ((column_cells + 2) * 17)
   744 000008C5 0F849F010000            		je .endp 
   745                                  
   746 000008CB 4981F8[15080000]        		cmp r8, board + 1 + ((column_cells + 2) * 18)
   747 000008D2 0F8492010000            		je .endp 
   748                                  
   749 000008D8 4981F8[85080000]        		cmp r8, board + 1 + ((column_cells + 2) * 19)
   750 000008DF 0F8485010000            		je .endp
   751                                  
   752 000008E5 4981F8[F5080000]        		cmp r8, board + 1 + ((column_cells + 2) * 20)
   753 000008EC 0F8478010000            		je .endp
   754                                  
   755 000008F2 4981F8[A8030000]        		cmp r8, board + 100 + ((column_cells + 2) * 7)
   756 000008F9 0F846B010000            		je .endp
   757                                  
   758 000008FF 4981F8[18040000]        		cmp r8, board + 100 + ((column_cells + 2) * 8)
   759 00000906 0F845E010000            		je .endp
   760                                  
   761 0000090C 4981F8[76040000]        		cmp r8, board + 82 + ((column_cells + 2) * 9)
   762 00000913 0F8451010000            		je .endp
   763                                  
   764                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
   765 00000919 4981F8[E6040000]        		cmp r8, board + 82 + ((column_cells + 2) * 10)
   766 00000920 0F8444010000            		je .endp
   767                                  
   768 00000926 4981F8[56050000]        		cmp r8, board + 82 + ((column_cells + 2) * 11)
   769 0000092D 0F8437010000            		je .endp
   770                                  
   771 00000933 4981F8[C6050000]        		cmp r8, board + 82 + ((column_cells + 2) * 12)
   772 0000093A 0F842A010000            		je .endp
   773                                  
   774 00000940 4981F8[36060000]        		cmp r8, board + 82 + ((column_cells + 2) * 13)
   775 00000947 0F841D010000            		je .endp
   776                                  
   777 0000094D 4981F8[A6060000]        		cmp r8, board + 82 + ((column_cells + 2) * 14)
   778 00000954 0F8410010000            		je .endp
   779                                  
   780 0000095A 4981F8[16070000]        		cmp r8, board + 82 + ((column_cells + 2) * 15)
   781 00000961 0F8403010000            		je .endp
   782                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
   783                                  
   784 00000967 4981F8[98070000]        		cmp r8, board + 100 + ((column_cells + 2) * 16)
   785 0000096E 0F84F6000000            		je .endp
   786                                  
   787 00000974 4981F8[08080000]        		cmp r8, board + 100 + ((column_cells + 2) * 17)
   788 0000097B 0F84E9000000            		je .endp
   789                                  
   790 00000981 4C8B0D(000A0000)        		mov r9, [pallet_size]
   791 00000988 41C60020                		mov byte [r8], char_space	; Limpiar el último carácter del palet
   792 0000098C 49FFC8                  		dec r8								; Mover la posición del palet una unidad a la izquierda
   793 0000098F 4C8905(F8090000)        		mov [pallet_position], r8			; Actualizar la posición del palet en la memoria
   794                                  
   795 00000996 E9CF000000              		jmp .endp	
   796                                  							 
   797                                  	.move_right:
   798                                  
   799 0000099B 4C8B2D(480A0000)        		mov r13, [colj]
   800 000009A2 4983FD02                		cmp r13, 2
   801 000009A6 0F84BE000000            		je .endp
   802                                  
   803 000009AC 4C8B05(F8090000)        		mov r8, [pallet_position]
   804                                  
   805                                  		
   806 000009B3 4981F8[60020000]        		cmp r8, board + 108 + ((column_cells + 2) * 4)
   807 000009BA 0F84AA000000            		je .endp
   808                                  
   809 000009C0 4981F8[D0020000]        		cmp r8, board + 108 + ((column_cells + 2) * 5)
   810 000009C7 0F849D000000            		je .endp
   811                                  
   812 000009CD 4981F8[40030000]        		cmp r8, board + 108 + ((column_cells + 2) * 6)
   813 000009D4 0F8490000000            		je .endp
   814                                  
   815 000009DA 4981F8[B0030000]        		cmp r8, board + 108 + ((column_cells + 2) * 7)
   816 000009E1 0F8483000000            		je .endp
   817                                  
   818 000009E7 4981F8[20040000]        		cmp r8, board + 108 + ((column_cells + 2) * 8)
   819 000009EE 747A                    		je .endp
   820                                  
   821 000009F0 4981F8[90040000]        		cmp r8, board + 108 + ((column_cells + 2) * 9)
   822 000009F7 7471                    		je .endp
   823                                  
   824 000009F9 4981F8[00050000]        		cmp r8, board + 108 + ((column_cells + 2) * 10)
   825 00000A00 7468                    		je .endp
   826                                  
   827 00000A02 4981F8[59050000]        		cmp r8, board + 85 + ((column_cells + 2) * 11)
   828 00000A09 745F                    		je .endp
   829                                  
   830 00000A0B 4981F8[C9050000]        		cmp r8, board + 85 + ((column_cells + 2) * 12)
   831 00000A12 7456                    		je .endp
   832                                  
   833 00000A14 4981F8[39060000]        		cmp r8, board + 85 + ((column_cells + 2) * 13)
   834 00000A1B 744D                    		je .endp
   835                                  
   836 00000A1D 4981F8[C0060000]        		cmp r8, board + 108 + ((column_cells + 2) * 14)
   837 00000A24 7444                    		je .endp
   838                                  
   839 00000A26 4981F8[30070000]        		cmp r8, board + 108 + ((column_cells + 2) * 15)
   840 00000A2D 743B                    		je .endp
   841                                  
   842 00000A2F 4981F8[A0070000]        		cmp r8, board + 108 + ((column_cells + 2) * 16)
   843 00000A36 7432                    		je .endp
   844                                  
   845 00000A38 4981F8[10080000]        		cmp r8, board + 108 + ((column_cells + 2) * 17)
   846 00000A3F 7429                    		je .endp
   847                                  
   848 00000A41 4981F8[80080000]        		cmp r8, board + 108 + ((column_cells + 2) * 18)
   849 00000A48 7420                    		je .endp
   850                                  
   851 00000A4A 4981F8[F0080000]        		cmp r8, board + 108 + ((column_cells + 2) * 19)
   852 00000A51 7417                    		je .endp
   853                                  
   854 00000A53 4981F8[60090000]        		cmp r8, board + 108 + ((column_cells + 2) * 20)
   855 00000A5A 740E                    		je .endp
   856                                  
   857 00000A5C 41C60020                		mov byte [r8], char_space
   858 00000A60 49FFC0                  		inc r8
   859 00000A63 4C8905(F8090000)        		mov [pallet_position], r8
   860                                   
   861                                  
   862                                  
   863                                  	.endp:
   864 00000A6A 48C705(480A0000)00-     		mov qword [colj], 0
   864 00000A72 000000             
   865                                  
   866 00000A75 58                      	pop rax
   867 00000A76 59                      	pop rcx
   868                                  	 
   869 00000A77 C3                      	ret
   870                                  
   871                                  ; Primera definición
   872                                  print_bot1:
   873 00000A78 4C8B0D(100A0000)            mov r9, [bot_position]
   874                                      .write_pallet_bot1:
   875 00000A7F 41C60162                        mov byte [r9], char_bot1
   876 00000A83 C3                          ret
   877                                  
   878                                  ; Segunda definición
   879                                  print_bot1_position:
   880 00000A84 4C8B15(100A0000)            mov r10, [bot_position]
   881                                      .write_pallet_bot2:
   882 00000A8B 41C60262                        mov byte [r10], char_bot1
   883 00000A8F C3                          ret
   884                                  
   885                                  ; Funcion generar un numero aleatorio entre 100 y 150 para la velocidad 
   886                                  generate_random:
   887                                      ; Abrir /dev/urandom para leer un byte aleatorio
   888 00000A90 57                      	push rdi
   889 00000A91 56                      	push rsi
   890 00000A92 52                      	push rdx
   891 00000A93 50                      	push rax
   892                                  
   893 00000A94 B800000000                  mov rax, 0                ; sys_read
   894 00000A99 48BF-                       mov rdi, urandom          ; Descriptor de archivo para /dev/urandom
   894 00000A9B [0000000000000000] 
   895 00000AA3 48BE-                       mov rsi, random_value     ; Dirección donde se guarda el byte aleatorio
   895 00000AA5 [0E00000000000000] 
   896 00000AAD BA01000000                  mov rdx, 1                ; Leer 1 byte
   897 00000AB2 0F05                        syscall                   ; Llamada al sistema para leer
   898                                  
   899                                      ; Reducir el rango del número aleatorio a 0-49
   900 00000AB4 480FB605(0E000000)          movzx rax, byte [random_value]  ; Cargar el byte aleatorio en rax
   901 00000ABC 4831D2                      xor rdx, rdx              ; Limpiar rdx para la division
   902 00000ABF B932000000                  mov rcx, 50               ; Divisor (rango deseado: 50 numeros)
   903 00000AC4 48F7F1                      div rcx                   ; rax = rax / rcx, rdx = rax % rcx
   904                                      ; Ahora rdx contiene el número aleatorio en el rango 0-49
   905                                  
   906                                      ; Ajustar el rango base a 100-150
   907 00000AC7 4883C264                    add rdx, 100 ; suma 100 para obtener el rango deseado
   908                                  
   909                                      ; Guardar el resultado en una variable o registro
   910 00000ACB 488915(21000000)            mov [random_result], rdx  ; Guardar el número aleatorio generado
   911                                  
   912 00000AD2 5F                      	pop rdi
   913 00000AD3 5E                      	pop rsi
   914 00000AD4 5A                      	pop rdx
   915 00000AD5 58                      	pop rax
   916                                  
   917 00000AD6 C3                          ret
   918                                  
   919                                  ; Funcion: generate_random_low
   920                                  ; Genera un número aleatorio entre 0 y 10
   921                                  ; Return:
   922                                  ;   rdx: Número aleatorio en el rango 0-10
   923                                  generate_random_low:
   924                                      ; Abrir /dev/urandom para leer un byte aleatorio
   925 00000AD7 57                          push rdi
   926 00000AD8 56                          push rsi
   927 00000AD9 52                          push rdx
   928 00000ADA 50                          push rax
   929                                  
   930 00000ADB B800000000                  mov rax, 0                ; sys_read
   931 00000AE0 48BF-                       mov rdi, urandom          ; Descriptor de archivo para /dev/urandom
   931 00000AE2 [0000000000000000] 
   932 00000AEA 48BE-                       mov rsi, random_value     ; Dirección donde se guarda el byte aleatorio
   932 00000AEC [0E00000000000000] 
   933 00000AF4 BA01000000                  mov rdx, 1                ; Leer 1 byte
   934 00000AF9 0F05                        syscall                   ; Llamada al sistema para leer
   935                                  
   936                                      ; Reducir el rango del número aleatorio a 0-10
   937 00000AFB 480FB605(0E000000)          movzx rax, byte [random_value]  ; Cargar el byte aleatorio en rax
   938 00000B03 4831D2                      xor rdx, rdx              ; Limpiar rdx para la división
   939 00000B06 B904000000                  mov rcx, 4               ; Divisor (rango deseado: 11 números, de 0 a 10)
   940 00000B0B 48F7F1                      div rcx                   ; rax = rax / rcx, rdx = rax % rcx
   941                                      ; Ahora rdx contiene el número aleatorio en el rango 0-10
   942                                  
   943                                      ; Guardar el resultado en una variable o registro
   944 00000B0E 488915(21000000)            mov [random_result], rdx  ; Guardar el número aleatorio generado
   945                                  
   946 00000B15 5F                          pop rdi
   947 00000B16 5E                          pop rsi
   948 00000B17 5A                          pop rdx
   949 00000B18 58                          pop rax
   950                                  
   951 00000B19 C3                          ret
   952                                  
   953                                  ; Función: set_bot_speed
   954                                  ; Establece la velocidad del bot de manera aleatoria
   955                                  set_bot_speed:
   956 00000B1A 52                      	push rdx
   957                                  	; Llamar a la funcion para generar numero random
   958 00000B1B E870FFFFFF              	call generate_random
   959                                  	; ; Guardar el numero aleatorio en la variable de velocidad del bot
   960                                  	; mov [bot_speed], rdx ; Guardar el número aleatorio generado en bot_speed
   961                                  
   962                                  	; pop rdx
   963                                  	; ret
   964                                  	; Invertir el valor (mayor número = mayor velocidad)
   965 00000B20 B896000000                  mov rax, 150                ; Valor máximo
   966 00000B25 4829D0                      sub rax, rdx                ; Restar el número generado (100-150)
   967 00000B28 4883C064                    add rax, 100                ; Ajustar nuevamente al rango 50-100
   968 00000B2C 488905(29000000)            mov [bot_speed], rax        ; Guardar el número invertido
   969 00000B33 5A                          pop rdx
   970 00000B34 C3                          ret
   971                                  
   972                                  
   973                                  ; Función: move_bot
   974                                  ; Mueve el bot en la dirección definida
   975                                  ; Return:
   976                                  ;   void
   977                                  move_bot:
   978                                  
   979 00000B35 50                      	push rax
   980 00000B36 51                      	push rcx
   981                                  
   982 00000B37 4C8B1D(480A0000)        	mov r11, [colj]              ; Cargar el valor de la variable `colj` en r11
   983 00000B3E 4983FB01                	cmp r11, 1                   ; Comparar el valor de `colj` con 1
   984 00000B42 0F8460070000            	je .endp                     ; Si `colj` es igual a 1, saltar al final de la función
   985                                      
   986 00000B48 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
   987 00000B4C 7423                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
   988                                  
   989 00000B4E 4883FF03                	cmp rdi, down_direction
   990 00000B52 0F8476020000            	je .move_down
   991                                  
   992 00000B58 4883FF01                	cmp rdi, right_direction
   993 00000B5C 0F8477060000            	je .move_right
   994                                  
   995 00000B62 4883FFFF                	cmp rdi, left_direction
   996 00000B66 0F84C2040000            	je .move_left
   997                                  
   998                                  	; Si no coincide con ninguna dirección, salir
   999 00000B6C E937070000                  jmp .endp
  1000                                  							 
  1001                                  	.move_up:
  1002 00000B71 4C8B15(100A0000)        		mov r10, [bot_position]
  1003                                  
  1004                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1005 00000B78 4981FA[61020000]        		cmp r10, board + 109 + ((column_cells + 2) * 4)
  1006 00000B7F 0F8C23070000            		jl .endp
  1007                                  
  1008 00000B85 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1009 00000B8C 0F8416070000            		je .endp 
  1010 00000B92 4981FA[77040000]        		cmp r10, board + 83 + ((column_cells + 2) * 9)
  1011 00000B99 0F8409070000            		je .endp
  1012 00000B9F 4981FA[78040000]        		cmp r10, board + 84 + ((column_cells + 2) * 9)
  1013 00000BA6 0F84FC060000            		je .endp
  1014 00000BAC 4981FA[79040000]        		cmp r10, board + 85 + ((column_cells + 2) * 9)
  1015 00000BB3 0F84EF060000            		je .endp
  1016 00000BB9 4981FA[7A040000]        		cmp r10, board + 86 + ((column_cells + 2) * 9)
  1017 00000BC0 0F84E2060000            		je .endp
  1018 00000BC6 4981FA[7B040000]        		cmp r10, board + 87 + ((column_cells + 2) * 9)
  1019 00000BCD 0F84D5060000            		je .endp
  1020 00000BD3 4981FA[7C040000]        		cmp r10, board + 88 + ((column_cells + 2) * 9)
  1021 00000BDA 0F84C8060000            		je .endp
  1022 00000BE0 4981FA[7D040000]        		cmp r10, board + 89 + ((column_cells + 2) * 9)
  1023 00000BE7 0F84BB060000            		je .endp
  1024 00000BED 4981FA[7E040000]        		cmp r10, board + 90 + ((column_cells + 2) * 9)
  1025 00000BF4 0F84AE060000            		je .endp
  1026 00000BFA 4981FA[7F040000]        		cmp r10, board + 91 + ((column_cells + 2) * 9)
  1027 00000C01 0F84A1060000            		je .endp
  1028 00000C07 4981FA[80040000]        		cmp r10, board + 92 + ((column_cells + 2) * 9)
  1029 00000C0E 0F8494060000            		je .endp
  1030 00000C14 4981FA[81040000]        		cmp r10, board + 93 + ((column_cells + 2) * 9)
  1031 00000C1B 0F8487060000            		je .endp
  1032 00000C21 4981FA[82040000]        		cmp r10, board + 94 + ((column_cells + 2) * 9)
  1033 00000C28 0F847A060000            		je .endp
  1034 00000C2E 4981FA[83040000]        		cmp r10, board + 95 + ((column_cells + 2) * 9)
  1035 00000C35 0F846D060000            		je .endp
  1036 00000C3B 4981FA[84040000]        		cmp r10, board + 96 + ((column_cells + 2) * 9)
  1037 00000C42 0F8460060000            		je .endp
  1038 00000C48 4981FA[85040000]        		cmp r10, board + 97 + ((column_cells + 2) * 9)
  1039 00000C4F 0F8453060000            		je .endp
  1040 00000C55 4981FA[86040000]        		cmp r10, board + 98 + ((column_cells + 2) * 9)
  1041 00000C5C 0F8446060000            		je .endp
  1042 00000C62 4981FA[87040000]        		cmp r10, board + 99 + ((column_cells + 2) * 9)
  1043 00000C69 0F8439060000            		je .endp
  1044                                  
  1045 00000C6F 4981FA[AA060000]        		cmp r10, board + 86 + ((column_cells + 2) * 14)
  1046 00000C76 0F842C060000            		je .endp
  1047 00000C7C 4981FA[AB060000]        		cmp r10, board + 87 + ((column_cells + 2) * 14)
  1048 00000C83 0F841F060000            		je .endp
  1049 00000C89 4981FA[AC060000]        		cmp r10, board + 88 + ((column_cells + 2) * 14)
  1050 00000C90 0F8412060000            		je .endp
  1051 00000C96 4981FA[AD060000]        		cmp r10, board + 89 + ((column_cells + 2) * 14)
  1052 00000C9D 0F8405060000            		je .endp
  1053 00000CA3 4981FA[AE060000]        		cmp r10, board + 90 + ((column_cells + 2) * 14)
  1054 00000CAA 0F84F8050000            		je .endp
  1055 00000CB0 4981FA[AF060000]        		cmp r10, board + 91 + ((column_cells + 2) * 14)
  1056 00000CB7 0F84EB050000            		je .endp
  1057 00000CBD 4981FA[B0060000]        		cmp r10, board + 92 + ((column_cells + 2) * 14)
  1058 00000CC4 0F84DE050000            		je .endp
  1059 00000CCA 4981FA[B1060000]        		cmp r10, board + 93 + ((column_cells + 2) * 14)
  1060 00000CD1 0F84D1050000            		je .endp
  1061 00000CD7 4981FA[B2060000]        		cmp r10, board + 94 + ((column_cells + 2) * 14)
  1062 00000CDE 0F84C4050000            		je .endp
  1063 00000CE4 4981FA[B3060000]        		cmp r10, board + 95 + ((column_cells + 2) * 14)
  1064 00000CEB 0F84B7050000            		je .endp
  1065 00000CF1 4981FA[B4060000]        		cmp r10, board + 96 + ((column_cells + 2) * 14)
  1066 00000CF8 0F84AA050000            		je .endp
  1067 00000CFE 4981FA[B5060000]        		cmp r10, board + 97 + ((column_cells + 2) * 14)
  1068 00000D05 0F849D050000            		je .endp
  1069 00000D0B 4981FA[B6060000]        		cmp r10, board + 98 + ((column_cells + 2) * 14)
  1070 00000D12 0F8490050000            		je .endp
  1071 00000D18 4981FA[B7060000]        		cmp r10, board + 99 + ((column_cells + 2) * 14)
  1072 00000D1F 0F8483050000            		je .endp
  1073 00000D25 4981FA[B8060000]        		cmp r10, board + 100 + ((column_cells + 2) * 14)
  1074 00000D2C 0F8476050000            		je .endp
  1075 00000D32 4981FA[B9060000]        		cmp r10, board + 101 + ((column_cells + 2) * 14)
  1076 00000D39 0F8469050000            		je .endp
  1077 00000D3F 4981FA[BA060000]        		cmp r10, board + 102 + ((column_cells + 2) * 14)
  1078 00000D46 0F845C050000            		je .endp
  1079 00000D4C 4981FA[BB060000]        		cmp r10, board + 103 + ((column_cells + 2) * 14)
  1080 00000D53 0F844F050000            		je .endp
  1081 00000D59 4981FA[BC060000]        		cmp r10, board + 104 + ((column_cells + 2) * 14)
  1082 00000D60 0F8442050000            		je .endp
  1083 00000D66 4981FA[BD060000]        		cmp r10, board + 105 + ((column_cells + 2) * 14)
  1084 00000D6D 0F8435050000            		je .endp
  1085 00000D73 4981FA[BE060000]        		cmp r10, board + 106 + ((column_cells + 2) * 14)
  1086 00000D7A 0F8428050000            		je .endp
  1087 00000D80 4981FA[BF060000]        		cmp r10, board + 107 + ((column_cells + 2) * 14)
  1088 00000D87 0F841B050000            		je .endp
  1089 00000D8D 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1090 00000D94 0F840E050000            		je .endp
  1091                                  
  1092 00000D9A 4981FA[1D080000]        		cmp r10, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
  1093 00000DA1 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
  1094                                  
  1095 00000DA3 4981FA[78080000]        		cmp r10, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
  1096 00000DAA 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
  1097                                  
  1098                                  		; Aquí entra si 81 < r10 < 100
  1099 00000DAC EB1B                    		jmp .continuar    
  1100                                  
  1101                                  		.fuera_rango:
  1102 00000DAE 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1103 00000DB5 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1104 00000DB9 4983EA70                			sub r10, 112						; Mover una fila arriba (restar 320)
  1105 00000DBD 4C8915(100A0000)        			mov [bot_position], r10			; Actualizar posición
  1106                                  
  1107 00000DC4 E9DF040000              		jmp .endp
  1108                                  
  1109                                  		.continuar:
  1110 00000DC9 E9DA040000              			jmp .endp
  1111                                  
  1112                                  	.move_down:
  1113                                  
  1114 00000DCE 4C8B15(100A0000)        		mov r10, [bot_position]
  1115                                  
  1116 00000DD5 4981FA[EA040000]        		cmp r10, board + 86 + ((column_cells + 2) * 10)  
  1117 00000DDC 0F84C6040000            		je .endp
  1118 00000DE2 4981FA[EB040000]        		cmp r10, board + 87 + ((column_cells + 2) * 10)  
  1119 00000DE9 0F84B9040000            		je .endp
  1120 00000DEF 4981FA[EC040000]        		cmp r10, board + 88 + ((column_cells + 2) * 10)  
  1121 00000DF6 0F84AC040000            		je .endp
  1122 00000DFC 4981FA[ED040000]        		cmp r10, board + 89 + ((column_cells + 2) * 10)  
  1123 00000E03 0F849F040000            		je .endp
  1124 00000E09 4981FA[EE040000]        		cmp r10, board + 90 + ((column_cells + 2) * 10)  
  1125 00000E10 0F8492040000            		je .endp
  1126 00000E16 4981FA[EF040000]        		cmp r10, board + 91 + ((column_cells + 2) * 10)  
  1127 00000E1D 0F8485040000            		je .endp
  1128 00000E23 4981FA[F0040000]        		cmp r10, board + 92 + ((column_cells + 2) * 10)  
  1129 00000E2A 0F8478040000            		je .endp
  1130 00000E30 4981FA[F1040000]        		cmp r10, board + 93 + ((column_cells + 2) * 10)  
  1131 00000E37 0F846B040000            		je .endp
  1132 00000E3D 4981FA[F2040000]        		cmp r10, board + 94 + ((column_cells + 2) * 10)  
  1133 00000E44 0F845E040000            		je .endp
  1134 00000E4A 4981FA[F3040000]        		cmp r10, board + 95 + ((column_cells + 2) * 10)  
  1135 00000E51 0F8451040000            		je .endp
  1136 00000E57 4981FA[F4040000]        		cmp r10, board + 96 + ((column_cells + 2) * 10)  
  1137 00000E5E 0F8444040000            		je .endp
  1138 00000E64 4981FA[F5040000]        		cmp r10, board + 97 + ((column_cells + 2) * 10)  
  1139 00000E6B 0F8437040000            		je .endp
  1140 00000E71 4981FA[F6040000]        		cmp r10, board + 98 + ((column_cells + 2) * 10)  
  1141 00000E78 0F842A040000            		je .endp
  1142 00000E7E 4981FA[F7040000]        		cmp r10, board + 99 + ((column_cells + 2) * 10)  
  1143 00000E85 0F841D040000            		je .endp
  1144 00000E8B 4981FA[F8040000]        		cmp r10, board + 100 + ((column_cells + 2) * 10)  
  1145 00000E92 0F8410040000            		je .endp
  1146 00000E98 4981FA[F9040000]        		cmp r10, board + 101 + ((column_cells + 2) * 10)  
  1147 00000E9F 0F8403040000            		je .endp
  1148 00000EA5 4981FA[FA040000]        		cmp r10, board + 102 + ((column_cells + 2) * 10)  
  1149 00000EAC 0F84F6030000            		je .endp
  1150 00000EB2 4981FA[FB040000]        		cmp r10, board + 103 + ((column_cells + 2) * 10)  
  1151 00000EB9 0F84E9030000            		je .endp
  1152 00000EBF 4981FA[FC040000]        		cmp r10, board + 104 + ((column_cells + 2) * 10)  
  1153 00000EC6 0F84DC030000            		je .endp
  1154 00000ECC 4981FA[FD040000]        		cmp r10, board + 105 + ((column_cells + 2) * 10)  
  1155 00000ED3 0F84CF030000            		je .endp
  1156 00000ED9 4981FA[FE040000]        		cmp r10, board + 106 + ((column_cells + 2) * 10)  
  1157 00000EE0 0F84C2030000            		je .endp
  1158 00000EE6 4981FA[FF040000]        		cmp r10, board + 107 + ((column_cells + 2) * 10)  
  1159 00000EED 0F84B5030000            		je .endp
  1160 00000EF3 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)  
  1161 00000EFA 0F84A8030000            		je .endp
  1162                                  
  1163 00000F00 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1164 00000F07 0F849B030000            		je .endp
  1165 00000F0D 4981FA[17070000]        		cmp r10, board + 83 + ((column_cells + 2) * 15)
  1166 00000F14 0F848E030000            		je .endp
  1167 00000F1A 4981FA[18070000]        		cmp r10, board + 84 + ((column_cells + 2) * 15)
  1168 00000F21 0F8481030000            		je .endp
  1169 00000F27 4981FA[19070000]        		cmp r10, board + 85 + ((column_cells + 2) * 15)
  1170 00000F2E 0F8474030000            		je .endp
  1171 00000F34 4981FA[1A070000]        		cmp r10, board + 86 + ((column_cells + 2) * 15)
  1172 00000F3B 0F8467030000            		je .endp
  1173 00000F41 4981FA[1B070000]        		cmp r10, board + 87 + ((column_cells + 2) * 15)
  1174 00000F48 0F845A030000            		je .endp
  1175 00000F4E 4981FA[1C070000]        		cmp r10, board + 88 + ((column_cells + 2) * 15)
  1176 00000F55 0F844D030000            		je .endp
  1177 00000F5B 4981FA[1D070000]        		cmp r10, board + 89 + ((column_cells + 2) * 15)
  1178 00000F62 0F8440030000            		je .endp
  1179 00000F68 4981FA[1E070000]        		cmp r10, board + 90 + ((column_cells + 2) * 15)
  1180 00000F6F 0F8433030000            		je .endp
  1181 00000F75 4981FA[1F070000]        		cmp r10, board + 91 + ((column_cells + 2) * 15)
  1182 00000F7C 0F8426030000            		je .endp
  1183 00000F82 4981FA[20070000]        		cmp r10, board + 92 + ((column_cells + 2) * 15)
  1184 00000F89 0F8419030000            		je .endp
  1185 00000F8F 4981FA[21070000]        		cmp r10, board + 93 + ((column_cells + 2) * 15)
  1186 00000F96 0F840C030000            		je .endp
  1187 00000F9C 4981FA[22070000]        		cmp r10, board + 94 + ((column_cells + 2) * 15)
  1188 00000FA3 0F84FF020000            		je .endp
  1189 00000FA9 4981FA[23070000]        		cmp r10, board + 95 + ((column_cells + 2) * 15)
  1190 00000FB0 0F84F2020000            		je .endp
  1191 00000FB6 4981FA[24070000]        		cmp r10, board + 96 + ((column_cells + 2) * 15)
  1192 00000FBD 0F84E5020000            		je .endp
  1193 00000FC3 4981FA[25070000]        		cmp r10, board + 97 + ((column_cells + 2) * 15)
  1194 00000FCA 0F84D8020000            		je .endp
  1195 00000FD0 4981FA[26070000]        		cmp r10, board + 98 + ((column_cells + 2) * 15)
  1196 00000FD7 0F84CB020000            		je .endp
  1197 00000FDD 4981FA[27070000]        		cmp r10, board + 99 + ((column_cells + 2) * 15)
  1198 00000FE4 0F84BE020000            		je .endp
  1199                                  		
  1200 00000FEA 4981FA[F4080000]        		cmp r10, board + ((column_cells + 2) * 20)
  1201 00000FF1 0F8FB1020000            		jg .endp
  1202                                  
  1203                                  
  1204 00000FF7 4981FA[DD020000]        		cmp r10, board + 9 + ((column_cells + 2) * 6)  
  1205 00000FFE 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
  1206                                  
  1207 00001000 4981FA[38030000]        		cmp r10, board + 100 + ((column_cells + 2) * 6) 
  1208 00001007 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
  1209                                  
  1210                                  		
  1211                                  
  1212                                  		; Aquí entra si 81 < r10 < 100
  1213 00001009 E9BBFDFFFF              		jmp .continuar    
  1214                                  
  1215                                  		.fuera_rango_down:
  1216 0000100E 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1217 00001015 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1218 00001019 4983C270                			add r10, 112							; Mover una fila abajo (sumar 320)
  1219 0000101D 4C8915(100A0000)        			mov [bot_position], r10			; Actualizar posición
  1220                                  
  1221                                  
  1222 00001024 E97F020000              		jmp .endp	
  1223                                  
  1224                                  		.continuar_down:
  1225 00001029 E97A020000              			jmp .endp
  1226                                  
  1227                                  
  1228                                  
  1229                                  		
  1230                                  		
  1231                                  
  1232                                  	.move_left:
  1233                                  
  1234 0000102E 4C8B1D(480A0000)        		mov r11, [colj]
  1235 00001035 4983FB01                		cmp r11, 1
  1236 00001039 0F8469020000            		je .endp
  1237                                  
  1238 0000103F 4C8B15(100A0000)        		mov r10, [bot_position]
  1239                                  
  1240                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1241 00001046 4981FA[F5010000]        		cmp r10, board + 1 + ((column_cells + 2) * 4)
  1242 0000104D 0F8455020000            		je .endp 
  1243                                  
  1244 00001053 4981FA[65020000]        		cmp r10, board + 1 + ((column_cells + 2) * 5)
  1245 0000105A 0F8448020000            		je .endp 
  1246                                  
  1247 00001060 4981FA[D5020000]        		cmp r10, board + 1 + ((column_cells + 2) * 6)
  1248 00001067 0F843B020000            		je .endp 
  1249                                  
  1250 0000106D 4981FA[45030000]        		cmp r10, board + 1 + ((column_cells + 2) * 7)
  1251 00001074 0F842E020000            		je .endp 
  1252                                  
  1253 0000107A 4981FA[B5030000]        		cmp r10, board + 1 + ((column_cells + 2) * 8)
  1254 00001081 0F8421020000            		je .endp 
  1255                                  
  1256 00001087 4981FA[25040000]        		cmp r10, board + 1 + ((column_cells + 2) * 9)
  1257 0000108E 0F8414020000            		je .endp 
  1258                                  	
  1259 00001094 4981FA[95040000]        		cmp r10, board + 1 + ((column_cells + 2) * 10)
  1260 0000109B 0F8407020000            		je .endp 
  1261                                  
  1262 000010A1 4981FA[05050000]        		cmp r10, board + 1 + ((column_cells + 2) * 11)
  1263 000010A8 0F84FA010000            		je .endp 
  1264                                  
  1265 000010AE 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1266 000010B5 0F84ED010000            		je .endp 
  1267                                  
  1268 000010BB 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1269 000010C2 0F84E0010000            		je .endp 
  1270                                  
  1271 000010C8 4981FA[E5050000]        		cmp r10, board + 1 + ((column_cells + 2) * 13)
  1272 000010CF 0F84D3010000            		je .endp 
  1273                                  
  1274 000010D5 4981FA[55060000]        		cmp r10, board + 1 + ((column_cells + 2) * 14)
  1275 000010DC 0F84C6010000            		je .endp 
  1276                                  
  1277 000010E2 4981FA[C5060000]        		cmp r10, board + 1 + ((column_cells + 2) * 15)
  1278 000010E9 0F84B9010000            		je .endp 
  1279                                  
  1280 000010EF 4981FA[35070000]        		cmp r10, board + 1 + ((column_cells + 2) * 16)
  1281 000010F6 0F84AC010000            		je .endp 
  1282                                  
  1283 000010FC 4981FA[A5070000]        		cmp r10, board + 1 + ((column_cells + 2) * 17)
  1284 00001103 0F849F010000            		je .endp 
  1285                                  
  1286 00001109 4981FA[15080000]        		cmp r10, board + 1 + ((column_cells + 2) * 18)
  1287 00001110 0F8492010000            		je .endp 
  1288                                  
  1289 00001116 4981FA[85080000]        		cmp r10, board + 1 + ((column_cells + 2) * 19)
  1290 0000111D 0F8485010000            		je .endp
  1291                                  
  1292 00001123 4981FA[F5080000]        		cmp r10, board + 1 + ((column_cells + 2) * 20)
  1293 0000112A 0F8478010000            		je .endp
  1294                                  
  1295 00001130 4981FA[A8030000]        		cmp r10, board + 100 + ((column_cells + 2) * 7)
  1296 00001137 0F846B010000            		je .endp
  1297                                  
  1298 0000113D 4981FA[18040000]        		cmp r10, board + 100 + ((column_cells + 2) * 8)
  1299 00001144 0F845E010000            		je .endp
  1300                                  
  1301 0000114A 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1302 00001151 0F8451010000            		je .endp
  1303                                  
  1304                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
  1305 00001157 4981FA[E6040000]        		cmp r10, board + 82 + ((column_cells + 2) * 10)
  1306 0000115E 0F8444010000            		je .endp
  1307                                  
  1308 00001164 4981FA[56050000]        		cmp r10, board + 82 + ((column_cells + 2) * 11)
  1309 0000116B 0F8437010000            		je .endp
  1310                                  
  1311 00001171 4981FA[C6050000]        		cmp r10, board + 82 + ((column_cells + 2) * 12)
  1312 00001178 0F842A010000            		je .endp
  1313                                  
  1314 0000117E 4981FA[36060000]        		cmp r10, board + 82 + ((column_cells + 2) * 13)
  1315 00001185 0F841D010000            		je .endp
  1316                                  
  1317 0000118B 4981FA[A6060000]        		cmp r10, board + 82 + ((column_cells + 2) * 14)
  1318 00001192 0F8410010000            		je .endp
  1319                                  
  1320 00001198 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1321 0000119F 0F8403010000            		je .endp
  1322                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
  1323                                  
  1324 000011A5 4981FA[98070000]        		cmp r10, board + 100 + ((column_cells + 2) * 16)
  1325 000011AC 0F84F6000000            		je .endp
  1326                                  
  1327 000011B2 4981FA[08080000]        		cmp r10, board + 100 + ((column_cells + 2) * 17)
  1328 000011B9 0F84E9000000            		je .endp
  1329                                  
  1330 000011BF 4C8B0D(000A0000)        		mov r9, [pallet_size]
  1331 000011C6 41C60220                		mov byte [r10], char_space	; Limpiar el último carácter del palet
  1332 000011CA 49FFCA                  		dec r10								; Mover la posición del palet una unidad a la izquierda
  1333 000011CD 4C8915(100A0000)        		mov [bot_position], r10			; Actualizar la posición del palet en la memoria
  1334                                  
  1335 000011D4 E9CF000000              		jmp .endp	
  1336                                  							 
  1337                                  	.move_right:
  1338                                  
  1339 000011D9 4C8B1D(480A0000)        		mov r11, [colj]
  1340 000011E0 4983FB02                		cmp r11, 2
  1341 000011E4 0F84BE000000            		je .endp
  1342                                  
  1343 000011EA 4C8B15(100A0000)        		mov r10, [bot_position]
  1344                                  
  1345                                  		
  1346 000011F1 4981FA[60020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
  1347 000011F8 0F84AA000000            		je .endp
  1348                                  
  1349 000011FE 4981FA[D0020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
  1350 00001205 0F849D000000            		je .endp
  1351                                  
  1352 0000120B 4981FA[40030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
  1353 00001212 0F8490000000            		je .endp
  1354                                  
  1355 00001218 4981FA[B0030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
  1356 0000121F 0F8483000000            		je .endp
  1357                                  
  1358 00001225 4981FA[20040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
  1359 0000122C 747A                    		je .endp
  1360                                  
  1361 0000122E 4981FA[90040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
  1362 00001235 7471                    		je .endp
  1363                                  
  1364 00001237 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
  1365 0000123E 7468                    		je .endp
  1366                                  
  1367 00001240 4981FA[59050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
  1368 00001247 745F                    		je .endp
  1369                                  
  1370 00001249 4981FA[C9050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
  1371 00001250 7456                    		je .endp
  1372                                  
  1373 00001252 4981FA[39060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
  1374 00001259 744D                    		je .endp
  1375                                  
  1376 0000125B 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1377 00001262 7444                    		je .endp
  1378                                  
  1379 00001264 4981FA[30070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
  1380 0000126B 743B                    		je .endp
  1381                                  
  1382 0000126D 4981FA[A0070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
  1383 00001274 7432                    		je .endp
  1384                                  
  1385 00001276 4981FA[10080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
  1386 0000127D 7429                    		je .endp
  1387                                  
  1388 0000127F 4981FA[80080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
  1389 00001286 7420                    		je .endp
  1390                                  
  1391 00001288 4981FA[F0080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
  1392 0000128F 7417                    		je .endp
  1393                                  
  1394 00001291 4981FA[60090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
  1395 00001298 740E                    		je .endp
  1396                                  
  1397 0000129A 41C60220                		mov byte [r10], char_space
  1398 0000129E 49FFC2                  		inc r10
  1399 000012A1 4C8915(100A0000)        		mov [bot_position], r10
  1400                                   
  1401                                  	.endp:
  1402 000012A8 48C705(480A0000)00-     		mov qword [colj], 0
  1402 000012B0 000000             
  1403                                  
  1404 000012B3 58                      	pop rax
  1405 000012B4 59                      	pop rcx
  1406                                  	 
  1407 000012B5 C3                      	ret
  1408                                  
  1409                                  ; Funcion: update_bot_direction
  1410                                  ; Actualiza la direccion del bot segun la posicion actual
  1411                                  ; Return:
  1412                                  ;   void
  1413                                  update_bot_direction:
  1414 000012B6 488B05(100A0000)            mov rax, [bot_position]       ; Cargar la posición actual del bot
  1415                                  
  1416                                      ; Verificar si el bot está en el límite inferior del tablero
  1417 000012BD 483D[440A0000]              cmp rax, board + ((column_cells + 2) * (row_cells - 1))  ; Límite inferior
  1418 000012C3 7D19                        jge .change_direction_up      ; Si está en el límite inferior, cambiar dirección a "arriba"
  1419                                  
  1420                                      ; Verificar si el bot está en el límite superior del tablero
  1421 000012C5 483D[34000000]              cmp rax, board
  1422 000012CB 7E1D                        jle .change_direction_down    ; Si está en el límite superior, cambiar dirección a "abajo"
  1423                                  
  1424                                      ; Verificar si el bot está en el límite derecho del tablero
  1425 000012CD 483D[A1000000]              cmp rax, board + column_cells - 1
  1426 000012D3 7D21                        jge .change_direction_left    ; Si está en el límite derecho, cambiar dirección a "izquierda"
  1427                                  
  1428                                      ; Verificar si el bot está en el límite izquierdo del tablero
  1429 000012D5 483D[34000000]              cmp rax, board
  1430 000012DB 7E25                        jle .change_direction_right   ; Si está en el límite izquierdo, cambiar dirección a "derecha"
  1431                                  
  1432 000012DD C3                          ret                           ; Si no hay cambios, salir de la función
  1433                                  
  1434                                  	.change_direction_up:
  1435 000012DE 48C705(39000000)02-     		mov qword [bot_direction], up_direction
  1435 000012E6 000000             
  1436 000012E9 C3                      		ret
  1437                                  
  1438                                  	.change_direction_down:
  1439 000012EA 48C705(39000000)03-     		mov qword [bot_direction], down_direction
  1439 000012F2 000000             
  1440 000012F5 C3                      		ret
  1441                                  
  1442                                  	.change_direction_left:
  1443 000012F6 48C705(39000000)FF-     		mov qword [bot_direction], left_direction
  1443 000012FE FFFFFF             
  1444 00001301 C3                      		ret
  1445                                  
  1446                                  	.change_direction_right:
  1447 00001302 48C705(39000000)01-     		mov qword [bot_direction], right_direction
  1447 0000130A 000000             
  1448 0000130D C3                      		ret
  1449                                  
  1450                                  
  1451                                  ; Funcion: change_bot_direction
  1452                                  ; Genera una dirección aleatoria para el bot
  1453                                  ; Return:
  1454                                  ;   void
  1455                                  change_bot_direction:
  1456                                      ; Incrementar el estado de la ruta
  1457 0000130E 8A05(42000000)              mov al, [bot_path_state]
  1458 00001314 FEC0                        inc al
  1459 00001316 3C08                        cmp al, 8        ; Si llegamos al final del recorrido (8 estados)
  1460 00001318 7C02                        jl .no_reset
  1461 0000131A 30C0                        xor al, al       ; Reiniciar el estado a 0
  1462                                  	.no_reset:
  1463 0000131C 8805(42000000)          		mov [bot_path_state], al
  1464                                  		
  1465                                  		; Seleccionar dirección según el estado de la ruta
  1466 00001322 3C00                    		cmp al, 0
  1467 00001324 741C                    		je .set_right    ; Estado 0: Derecha
  1468                                  		
  1469 00001326 3C01                    		cmp al, 1
  1470 00001328 743C                    		je .set_up       ; Estado 1: Arriba
  1471                                  		
  1472 0000132A 3C02                    		cmp al, 2
  1473 0000132C 742C                    		je .set_left     ; Estado 2: Izquierda
  1474                                  		
  1475 0000132E 3C03                    		cmp al, 3
  1476 00001330 741C                    		je .set_down     ; Estado 3: Abajo
  1477                                  		
  1478 00001332 3C04                    		cmp al, 4
  1479 00001334 740C                    		je .set_right    ; Estado 4: Derecha
  1480                                  		
  1481 00001336 3C05                    		cmp al, 5
  1482 00001338 742C                    		je .set_up       ; Estado 5: Arriba
  1483                                  		
  1484 0000133A 3C06                    		cmp al, 6
  1485 0000133C 741C                    		je .set_left     ; Estado 6: Izquierda
  1486                                  		
  1487 0000133E 3C07                    		cmp al, 7
  1488 00001340 7400                    		je .set_right    ; Estado 7: Derecha (hacia el punto inicial)
  1489                                  		
  1490                                      ; Si ninguna de las anteriores coincide, establecer dirección a la derecha
  1491                                      .set_right:
  1492 00001342 48C705(39000000)01-             mov qword [bot_direction], right_direction
  1492 0000134A 000000             
  1493 0000134D C3                              ret
  1494                                          
  1495                                      .set_down:
  1496 0000134E 48C705(39000000)03-             mov qword [bot_direction], down_direction
  1496 00001356 000000             
  1497 00001359 C3                              ret
  1498                                          
  1499                                      .set_left:
  1500 0000135A 48C705(39000000)FF-             mov qword [bot_direction], left_direction
  1500 00001362 FFFFFF             
  1501 00001365 C3                              ret
  1502                                          
  1503                                      .set_up:
  1504 00001366 48C705(39000000)02-             mov qword [bot_direction], up_direction
  1504 0000136E 000000             
  1505 00001371 C3                              ret
  1506                                  
  1507                                  ; Funcion: print_player2
  1508                                  ; Imprime al Jugador 2 en su posición actual
  1509                                  print_player2:
  1510 00001372 4C8B1D(180A0000)        	mov r11, [player2_position] 
  1511                                  	.write_pallet:
  1512 00001379 41C60352                		mov byte [r11], char_player2	 
  1513 0000137D C3                      	ret
  1514                                  
  1515                                  ; Funcion: move_player2
  1516                                  ; Mueve al Jugador 2 en la dirección especificada
  1517                                  ; Argumentos:
  1518                                  ;   rdi: dirección (up_direction, down_direction, left_direction, right_direction)
  1519                                  move_player2:
  1520 0000137E 50                          push rax
  1521 0000137F 51                          push rcx
  1522                                  
  1523 00001380 4C8B25(480A0000)        	mov r12, [colj]
  1524 00001387 4983FC01                	cmp r12, 1
  1525 0000138B 0F845B070000            	je .endp
  1526                                  	  
  1527 00001391 4883FF02                	cmp rdi, up_direction					; Comparar el valor de rdi (dirección) con left_direction
  1528 00001395 741E                    	je .move_up						; Si no es igual a left_direction, saltar a .move_right
  1529                                  
  1530 00001397 4883FF03                	cmp rdi, down_direction
  1531 0000139B 0F8471020000            	je .move_down
  1532                                  
  1533 000013A1 4883FF01                	cmp rdi, right_direction
  1534 000013A5 0F8472060000            	je .move_right
  1535                                  
  1536 000013AB 4883FFFF                	cmp rdi, left_direction
  1537 000013AF 0F84BD040000            	je .move_left
  1538                                  
  1539                                  	.move_up:
  1540 000013B5 4C8B15(180A0000)        		mov r10, [player2_position]
  1541                                  
  1542                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1543 000013BC 4981FA[61020000]        		cmp r10, board + 109 + ((column_cells + 2) * 4)
  1544 000013C3 0F8C23070000            		jl .endp
  1545                                  
  1546 000013C9 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1547 000013D0 0F8416070000            		je .endp 
  1548 000013D6 4981FA[77040000]        		cmp r10, board + 83 + ((column_cells + 2) * 9)
  1549 000013DD 0F8409070000            		je .endp
  1550 000013E3 4981FA[78040000]        		cmp r10, board + 84 + ((column_cells + 2) * 9)
  1551 000013EA 0F84FC060000            		je .endp
  1552 000013F0 4981FA[79040000]        		cmp r10, board + 85 + ((column_cells + 2) * 9)
  1553 000013F7 0F84EF060000            		je .endp
  1554 000013FD 4981FA[7A040000]        		cmp r10, board + 86 + ((column_cells + 2) * 9)
  1555 00001404 0F84E2060000            		je .endp
  1556 0000140A 4981FA[7B040000]        		cmp r10, board + 87 + ((column_cells + 2) * 9)
  1557 00001411 0F84D5060000            		je .endp
  1558 00001417 4981FA[7C040000]        		cmp r10, board + 88 + ((column_cells + 2) * 9)
  1559 0000141E 0F84C8060000            		je .endp
  1560 00001424 4981FA[7D040000]        		cmp r10, board + 89 + ((column_cells + 2) * 9)
  1561 0000142B 0F84BB060000            		je .endp
  1562 00001431 4981FA[7E040000]        		cmp r10, board + 90 + ((column_cells + 2) * 9)
  1563 00001438 0F84AE060000            		je .endp
  1564 0000143E 4981FA[7F040000]        		cmp r10, board + 91 + ((column_cells + 2) * 9)
  1565 00001445 0F84A1060000            		je .endp
  1566 0000144B 4981FA[80040000]        		cmp r10, board + 92 + ((column_cells + 2) * 9)
  1567 00001452 0F8494060000            		je .endp
  1568 00001458 4981FA[81040000]        		cmp r10, board + 93 + ((column_cells + 2) * 9)
  1569 0000145F 0F8487060000            		je .endp
  1570 00001465 4981FA[82040000]        		cmp r10, board + 94 + ((column_cells + 2) * 9)
  1571 0000146C 0F847A060000            		je .endp
  1572 00001472 4981FA[83040000]        		cmp r10, board + 95 + ((column_cells + 2) * 9)
  1573 00001479 0F846D060000            		je .endp
  1574 0000147F 4981FA[84040000]        		cmp r10, board + 96 + ((column_cells + 2) * 9)
  1575 00001486 0F8460060000            		je .endp
  1576 0000148C 4981FA[85040000]        		cmp r10, board + 97 + ((column_cells + 2) * 9)
  1577 00001493 0F8453060000            		je .endp
  1578 00001499 4981FA[86040000]        		cmp r10, board + 98 + ((column_cells + 2) * 9)
  1579 000014A0 0F8446060000            		je .endp
  1580 000014A6 4981FA[87040000]        		cmp r10, board + 99 + ((column_cells + 2) * 9)
  1581 000014AD 0F8439060000            		je .endp
  1582                                  
  1583 000014B3 4981FA[AA060000]        		cmp r10, board + 86 + ((column_cells + 2) * 14)
  1584 000014BA 0F842C060000            		je .endp
  1585 000014C0 4981FA[AB060000]        		cmp r10, board + 87 + ((column_cells + 2) * 14)
  1586 000014C7 0F841F060000            		je .endp
  1587 000014CD 4981FA[AC060000]        		cmp r10, board + 88 + ((column_cells + 2) * 14)
  1588 000014D4 0F8412060000            		je .endp
  1589 000014DA 4981FA[AD060000]        		cmp r10, board + 89 + ((column_cells + 2) * 14)
  1590 000014E1 0F8405060000            		je .endp
  1591 000014E7 4981FA[AE060000]        		cmp r10, board + 90 + ((column_cells + 2) * 14)
  1592 000014EE 0F84F8050000            		je .endp
  1593 000014F4 4981FA[AF060000]        		cmp r10, board + 91 + ((column_cells + 2) * 14)
  1594 000014FB 0F84EB050000            		je .endp
  1595 00001501 4981FA[B0060000]        		cmp r10, board + 92 + ((column_cells + 2) * 14)
  1596 00001508 0F84DE050000            		je .endp
  1597 0000150E 4981FA[B1060000]        		cmp r10, board + 93 + ((column_cells + 2) * 14)
  1598 00001515 0F84D1050000            		je .endp
  1599 0000151B 4981FA[B2060000]        		cmp r10, board + 94 + ((column_cells + 2) * 14)
  1600 00001522 0F84C4050000            		je .endp
  1601 00001528 4981FA[B3060000]        		cmp r10, board + 95 + ((column_cells + 2) * 14)
  1602 0000152F 0F84B7050000            		je .endp
  1603 00001535 4981FA[B4060000]        		cmp r10, board + 96 + ((column_cells + 2) * 14)
  1604 0000153C 0F84AA050000            		je .endp
  1605 00001542 4981FA[B5060000]        		cmp r10, board + 97 + ((column_cells + 2) * 14)
  1606 00001549 0F849D050000            		je .endp
  1607 0000154F 4981FA[B6060000]        		cmp r10, board + 98 + ((column_cells + 2) * 14)
  1608 00001556 0F8490050000            		je .endp
  1609 0000155C 4981FA[B7060000]        		cmp r10, board + 99 + ((column_cells + 2) * 14)
  1610 00001563 0F8483050000            		je .endp
  1611 00001569 4981FA[B8060000]        		cmp r10, board + 100 + ((column_cells + 2) * 14)
  1612 00001570 0F8476050000            		je .endp
  1613 00001576 4981FA[B9060000]        		cmp r10, board + 101 + ((column_cells + 2) * 14)
  1614 0000157D 0F8469050000            		je .endp
  1615 00001583 4981FA[BA060000]        		cmp r10, board + 102 + ((column_cells + 2) * 14)
  1616 0000158A 0F845C050000            		je .endp
  1617 00001590 4981FA[BB060000]        		cmp r10, board + 103 + ((column_cells + 2) * 14)
  1618 00001597 0F844F050000            		je .endp
  1619 0000159D 4981FA[BC060000]        		cmp r10, board + 104 + ((column_cells + 2) * 14)
  1620 000015A4 0F8442050000            		je .endp
  1621 000015AA 4981FA[BD060000]        		cmp r10, board + 105 + ((column_cells + 2) * 14)
  1622 000015B1 0F8435050000            		je .endp
  1623 000015B7 4981FA[BE060000]        		cmp r10, board + 106 + ((column_cells + 2) * 14)
  1624 000015BE 0F8428050000            		je .endp
  1625 000015C4 4981FA[BF060000]        		cmp r10, board + 107 + ((column_cells + 2) * 14)
  1626 000015CB 0F841B050000            		je .endp
  1627 000015D1 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1628 000015D8 0F840E050000            		je .endp
  1629                                  
  1630 000015DE 4981FA[1D080000]        		cmp r10, board + 9 + ((column_cells + 2) * 18)  ; Comparar con 81
  1631 000015E5 7E0B                    		jle .fuera_rango  ; Si rax <= 81, salir
  1632                                  
  1633 000015E7 4981FA[78080000]        		cmp r10, board + 100 + ((column_cells + 2) * 18) ; Comparar con 100
  1634 000015EE 7D02                    		jge .fuera_rango  ; Si rax >= 100, salir
  1635                                  
  1636                                  		; Aquí entra si 81 < r10 < 100
  1637 000015F0 EB1B                    		jmp .continuar    
  1638                                  
  1639                                  		.fuera_rango:
  1640 000015F2 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1641 000015F9 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1642 000015FD 4983EA70                			sub r10, 112						; Mover una fila arriba (restar 320)
  1643 00001601 4C8915(180A0000)        			mov [player2_position], r10			; Actualizar posición
  1644                                  
  1645 00001608 E9DF040000              		jmp .endp
  1646                                  
  1647                                  		.continuar:
  1648 0000160D E9DA040000              			jmp .endp
  1649                                  
  1650                                  	.move_down:
  1651                                  
  1652 00001612 4C8B15(180A0000)        		mov r10, [player2_position]
  1653                                  
  1654 00001619 4981FA[EA040000]        		cmp r10, board + 86 + ((column_cells + 2) * 10)  
  1655 00001620 0F84C6040000            		je .endp
  1656 00001626 4981FA[EB040000]        		cmp r10, board + 87 + ((column_cells + 2) * 10)  
  1657 0000162D 0F84B9040000            		je .endp
  1658 00001633 4981FA[EC040000]        		cmp r10, board + 88 + ((column_cells + 2) * 10)  
  1659 0000163A 0F84AC040000            		je .endp
  1660 00001640 4981FA[ED040000]        		cmp r10, board + 89 + ((column_cells + 2) * 10)  
  1661 00001647 0F849F040000            		je .endp
  1662 0000164D 4981FA[EE040000]        		cmp r10, board + 90 + ((column_cells + 2) * 10)  
  1663 00001654 0F8492040000            		je .endp
  1664 0000165A 4981FA[EF040000]        		cmp r10, board + 91 + ((column_cells + 2) * 10)  
  1665 00001661 0F8485040000            		je .endp
  1666 00001667 4981FA[F0040000]        		cmp r10, board + 92 + ((column_cells + 2) * 10)  
  1667 0000166E 0F8478040000            		je .endp
  1668 00001674 4981FA[F1040000]        		cmp r10, board + 93 + ((column_cells + 2) * 10)  
  1669 0000167B 0F846B040000            		je .endp
  1670 00001681 4981FA[F2040000]        		cmp r10, board + 94 + ((column_cells + 2) * 10)  
  1671 00001688 0F845E040000            		je .endp
  1672 0000168E 4981FA[F3040000]        		cmp r10, board + 95 + ((column_cells + 2) * 10)  
  1673 00001695 0F8451040000            		je .endp
  1674 0000169B 4981FA[F4040000]        		cmp r10, board + 96 + ((column_cells + 2) * 10)  
  1675 000016A2 0F8444040000            		je .endp
  1676 000016A8 4981FA[F5040000]        		cmp r10, board + 97 + ((column_cells + 2) * 10)  
  1677 000016AF 0F8437040000            		je .endp
  1678 000016B5 4981FA[F6040000]        		cmp r10, board + 98 + ((column_cells + 2) * 10)  
  1679 000016BC 0F842A040000            		je .endp
  1680 000016C2 4981FA[F7040000]        		cmp r10, board + 99 + ((column_cells + 2) * 10)  
  1681 000016C9 0F841D040000            		je .endp
  1682 000016CF 4981FA[F8040000]        		cmp r10, board + 100 + ((column_cells + 2) * 10)  
  1683 000016D6 0F8410040000            		je .endp
  1684 000016DC 4981FA[F9040000]        		cmp r10, board + 101 + ((column_cells + 2) * 10)  
  1685 000016E3 0F8403040000            		je .endp
  1686 000016E9 4981FA[FA040000]        		cmp r10, board + 102 + ((column_cells + 2) * 10)  
  1687 000016F0 0F84F6030000            		je .endp
  1688 000016F6 4981FA[FB040000]        		cmp r10, board + 103 + ((column_cells + 2) * 10)  
  1689 000016FD 0F84E9030000            		je .endp
  1690 00001703 4981FA[FC040000]        		cmp r10, board + 104 + ((column_cells + 2) * 10)  
  1691 0000170A 0F84DC030000            		je .endp
  1692 00001710 4981FA[FD040000]        		cmp r10, board + 105 + ((column_cells + 2) * 10)  
  1693 00001717 0F84CF030000            		je .endp
  1694 0000171D 4981FA[FE040000]        		cmp r10, board + 106 + ((column_cells + 2) * 10)  
  1695 00001724 0F84C2030000            		je .endp
  1696 0000172A 4981FA[FF040000]        		cmp r10, board + 107 + ((column_cells + 2) * 10)  
  1697 00001731 0F84B5030000            		je .endp
  1698 00001737 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)  
  1699 0000173E 0F84A8030000            		je .endp
  1700                                  
  1701 00001744 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1702 0000174B 0F849B030000            		je .endp
  1703 00001751 4981FA[17070000]        		cmp r10, board + 83 + ((column_cells + 2) * 15)
  1704 00001758 0F848E030000            		je .endp
  1705 0000175E 4981FA[18070000]        		cmp r10, board + 84 + ((column_cells + 2) * 15)
  1706 00001765 0F8481030000            		je .endp
  1707 0000176B 4981FA[19070000]        		cmp r10, board + 85 + ((column_cells + 2) * 15)
  1708 00001772 0F8474030000            		je .endp
  1709 00001778 4981FA[1A070000]        		cmp r10, board + 86 + ((column_cells + 2) * 15)
  1710 0000177F 0F8467030000            		je .endp
  1711 00001785 4981FA[1B070000]        		cmp r10, board + 87 + ((column_cells + 2) * 15)
  1712 0000178C 0F845A030000            		je .endp
  1713 00001792 4981FA[1C070000]        		cmp r10, board + 88 + ((column_cells + 2) * 15)
  1714 00001799 0F844D030000            		je .endp
  1715 0000179F 4981FA[1D070000]        		cmp r10, board + 89 + ((column_cells + 2) * 15)
  1716 000017A6 0F8440030000            		je .endp
  1717 000017AC 4981FA[1E070000]        		cmp r10, board + 90 + ((column_cells + 2) * 15)
  1718 000017B3 0F8433030000            		je .endp
  1719 000017B9 4981FA[1F070000]        		cmp r10, board + 91 + ((column_cells + 2) * 15)
  1720 000017C0 0F8426030000            		je .endp
  1721 000017C6 4981FA[20070000]        		cmp r10, board + 92 + ((column_cells + 2) * 15)
  1722 000017CD 0F8419030000            		je .endp
  1723 000017D3 4981FA[21070000]        		cmp r10, board + 93 + ((column_cells + 2) * 15)
  1724 000017DA 0F840C030000            		je .endp
  1725 000017E0 4981FA[22070000]        		cmp r10, board + 94 + ((column_cells + 2) * 15)
  1726 000017E7 0F84FF020000            		je .endp
  1727 000017ED 4981FA[23070000]        		cmp r10, board + 95 + ((column_cells + 2) * 15)
  1728 000017F4 0F84F2020000            		je .endp
  1729 000017FA 4981FA[24070000]        		cmp r10, board + 96 + ((column_cells + 2) * 15)
  1730 00001801 0F84E5020000            		je .endp
  1731 00001807 4981FA[25070000]        		cmp r10, board + 97 + ((column_cells + 2) * 15)
  1732 0000180E 0F84D8020000            		je .endp
  1733 00001814 4981FA[26070000]        		cmp r10, board + 98 + ((column_cells + 2) * 15)
  1734 0000181B 0F84CB020000            		je .endp
  1735 00001821 4981FA[27070000]        		cmp r10, board + 99 + ((column_cells + 2) * 15)
  1736 00001828 0F84BE020000            		je .endp
  1737                                  		
  1738 0000182E 4981FA[F4080000]        		cmp r10, board + ((column_cells + 2) * 20)
  1739 00001835 0F8FB1020000            		jg .endp
  1740                                  
  1741                                  
  1742 0000183B 4981FA[DD020000]        		cmp r10, board + 9 + ((column_cells + 2) * 6)  
  1743 00001842 7E0E                    		jle .fuera_rango_down  ; Si rax <= 81, salir
  1744                                  
  1745 00001844 4981FA[38030000]        		cmp r10, board + 100 + ((column_cells + 2) * 6) 
  1746 0000184B 7D05                    		jge .fuera_rango_down  ; Si rax >= 100, salir
  1747                                  
  1748                                  		
  1749                                  
  1750                                  		; Aquí entra si 81 < r10 < 100
  1751 0000184D E9BBFDFFFF              		jmp .continuar    
  1752                                  
  1753                                  		.fuera_rango_down:
  1754 00001852 4C8B0D(000A0000)        			mov r9, [pallet_size]
  1755 00001859 41C60220                			mov byte [r10], char_space	; Limpiar último carácter del palet
  1756 0000185D 4983C270                			add r10, 112							; Mover una fila abajo (sumar 320)
  1757 00001861 4C8915(180A0000)        			mov [player2_position], r10			; Actualizar posición
  1758                                  
  1759                                  
  1760 00001868 E97F020000              		jmp .endp	
  1761                                  
  1762                                  		.continuar_down:
  1763 0000186D E97A020000              			jmp .endp
  1764                                  
  1765                                  
  1766                                  
  1767                                  		
  1768                                  		
  1769                                  
  1770                                  	.move_left:
  1771                                  
  1772 00001872 4C8B2D(480A0000)        		mov r13, [colj]
  1773 00001879 4983FD01                		cmp r13, 1
  1774 0000187D 0F8469020000            		je .endp
  1775                                  
  1776 00001883 4C8B15(180A0000)        		mov r10, [player2_position]
  1777                                  
  1778                                  		; INICIO DE COMPARACIONES PARA LAS COLISIONES
  1779 0000188A 4981FA[F5010000]        		cmp r10, board + 1 + ((column_cells + 2) * 4)
  1780 00001891 0F8455020000            		je .endp 
  1781                                  
  1782 00001897 4981FA[65020000]        		cmp r10, board + 1 + ((column_cells + 2) * 5)
  1783 0000189E 0F8448020000            		je .endp 
  1784                                  
  1785 000018A4 4981FA[D5020000]        		cmp r10, board + 1 + ((column_cells + 2) * 6)
  1786 000018AB 0F843B020000            		je .endp 
  1787                                  
  1788 000018B1 4981FA[45030000]        		cmp r10, board + 1 + ((column_cells + 2) * 7)
  1789 000018B8 0F842E020000            		je .endp 
  1790                                  
  1791 000018BE 4981FA[B5030000]        		cmp r10, board + 1 + ((column_cells + 2) * 8)
  1792 000018C5 0F8421020000            		je .endp 
  1793                                  
  1794 000018CB 4981FA[25040000]        		cmp r10, board + 1 + ((column_cells + 2) * 9)
  1795 000018D2 0F8414020000            		je .endp 
  1796                                  	
  1797 000018D8 4981FA[95040000]        		cmp r10, board + 1 + ((column_cells + 2) * 10)
  1798 000018DF 0F8407020000            		je .endp 
  1799                                  
  1800 000018E5 4981FA[05050000]        		cmp r10, board + 1 + ((column_cells + 2) * 11)
  1801 000018EC 0F84FA010000            		je .endp 
  1802                                  
  1803 000018F2 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1804 000018F9 0F84ED010000            		je .endp 
  1805                                  
  1806 000018FF 4981FA[75050000]        		cmp r10, board + 1 + ((column_cells + 2) * 12)
  1807 00001906 0F84E0010000            		je .endp 
  1808                                  
  1809 0000190C 4981FA[E5050000]        		cmp r10, board + 1 + ((column_cells + 2) * 13)
  1810 00001913 0F84D3010000            		je .endp 
  1811                                  
  1812 00001919 4981FA[55060000]        		cmp r10, board + 1 + ((column_cells + 2) * 14)
  1813 00001920 0F84C6010000            		je .endp 
  1814                                  
  1815 00001926 4981FA[C5060000]        		cmp r10, board + 1 + ((column_cells + 2) * 15)
  1816 0000192D 0F84B9010000            		je .endp 
  1817                                  
  1818 00001933 4981FA[35070000]        		cmp r10, board + 1 + ((column_cells + 2) * 16)
  1819 0000193A 0F84AC010000            		je .endp 
  1820                                  
  1821 00001940 4981FA[A5070000]        		cmp r10, board + 1 + ((column_cells + 2) * 17)
  1822 00001947 0F849F010000            		je .endp 
  1823                                  
  1824 0000194D 4981FA[15080000]        		cmp r10, board + 1 + ((column_cells + 2) * 18)
  1825 00001954 0F8492010000            		je .endp 
  1826                                  
  1827 0000195A 4981FA[85080000]        		cmp r10, board + 1 + ((column_cells + 2) * 19)
  1828 00001961 0F8485010000            		je .endp
  1829                                  
  1830 00001967 4981FA[F5080000]        		cmp r10, board + 1 + ((column_cells + 2) * 20)
  1831 0000196E 0F8478010000            		je .endp
  1832                                  
  1833 00001974 4981FA[A8030000]        		cmp r10, board + 100 + ((column_cells + 2) * 7)
  1834 0000197B 0F846B010000            		je .endp
  1835                                  
  1836 00001981 4981FA[18040000]        		cmp r10, board + 100 + ((column_cells + 2) * 8)
  1837 00001988 0F845E010000            		je .endp
  1838                                  
  1839 0000198E 4981FA[76040000]        		cmp r10, board + 82 + ((column_cells + 2) * 9)
  1840 00001995 0F8451010000            		je .endp
  1841                                  
  1842                                  		;-----COLISION PARTE INTERNA DE LA CURVA-----
  1843 0000199B 4981FA[E6040000]        		cmp r10, board + 82 + ((column_cells + 2) * 10)
  1844 000019A2 0F8444010000            		je .endp
  1845                                  
  1846 000019A8 4981FA[56050000]        		cmp r10, board + 82 + ((column_cells + 2) * 11)
  1847 000019AF 0F8437010000            		je .endp
  1848                                  
  1849 000019B5 4981FA[C6050000]        		cmp r10, board + 82 + ((column_cells + 2) * 12)
  1850 000019BC 0F842A010000            		je .endp
  1851                                  
  1852 000019C2 4981FA[36060000]        		cmp r10, board + 82 + ((column_cells + 2) * 13)
  1853 000019C9 0F841D010000            		je .endp
  1854                                  
  1855 000019CF 4981FA[A6060000]        		cmp r10, board + 82 + ((column_cells + 2) * 14)
  1856 000019D6 0F8410010000            		je .endp
  1857                                  
  1858 000019DC 4981FA[16070000]        		cmp r10, board + 82 + ((column_cells + 2) * 15)
  1859 000019E3 0F8403010000            		je .endp
  1860                                  		;---FIN COLISION PARTE INTERNA DE LA CURVA----
  1861                                  
  1862 000019E9 4981FA[98070000]        		cmp r10, board + 100 + ((column_cells + 2) * 16)
  1863 000019F0 0F84F6000000            		je .endp
  1864                                  
  1865 000019F6 4981FA[08080000]        		cmp r10, board + 100 + ((column_cells + 2) * 17)
  1866 000019FD 0F84E9000000            		je .endp
  1867                                  
  1868 00001A03 4C8B0D(000A0000)        		mov r9, [pallet_size]
  1869 00001A0A 41C60220                		mov byte [r10], char_space	; Limpiar el último carácter del palet
  1870 00001A0E 49FFCA                  		dec r10								; Mover la posición del palet una unidad a la izquierda
  1871 00001A11 4C8915(180A0000)        		mov [player2_position], r10			; Actualizar la posición del palet en la memoria
  1872                                  
  1873 00001A18 E9CF000000              		jmp .endp	
  1874                                  							 
  1875                                  	.move_right:
  1876                                  
  1877 00001A1D 4C8B2D(480A0000)        		mov r13, [colj]
  1878 00001A24 4983FD02                		cmp r13, 2
  1879 00001A28 0F84BE000000            		je .endp
  1880                                  
  1881 00001A2E 4C8B15(180A0000)        		mov r10, [player2_position]
  1882                                  
  1883                                  		
  1884 00001A35 4981FA[60020000]        		cmp r10, board + 108 + ((column_cells + 2) * 4)
  1885 00001A3C 0F84AA000000            		je .endp
  1886                                  
  1887 00001A42 4981FA[D0020000]        		cmp r10, board + 108 + ((column_cells + 2) * 5)
  1888 00001A49 0F849D000000            		je .endp
  1889                                  
  1890 00001A4F 4981FA[40030000]        		cmp r10, board + 108 + ((column_cells + 2) * 6)
  1891 00001A56 0F8490000000            		je .endp
  1892                                  
  1893 00001A5C 4981FA[B0030000]        		cmp r10, board + 108 + ((column_cells + 2) * 7)
  1894 00001A63 0F8483000000            		je .endp
  1895                                  
  1896 00001A69 4981FA[20040000]        		cmp r10, board + 108 + ((column_cells + 2) * 8)
  1897 00001A70 747A                    		je .endp
  1898                                  
  1899 00001A72 4981FA[90040000]        		cmp r10, board + 108 + ((column_cells + 2) * 9)
  1900 00001A79 7471                    		je .endp
  1901                                  
  1902 00001A7B 4981FA[00050000]        		cmp r10, board + 108 + ((column_cells + 2) * 10)
  1903 00001A82 7468                    		je .endp
  1904                                  
  1905 00001A84 4981FA[59050000]        		cmp r10, board + 85 + ((column_cells + 2) * 11)
  1906 00001A8B 745F                    		je .endp
  1907                                  
  1908 00001A8D 4981FA[C9050000]        		cmp r10, board + 85 + ((column_cells + 2) * 12)
  1909 00001A94 7456                    		je .endp
  1910                                  
  1911 00001A96 4981FA[39060000]        		cmp r10, board + 85 + ((column_cells + 2) * 13)
  1912 00001A9D 744D                    		je .endp
  1913                                  
  1914 00001A9F 4981FA[C0060000]        		cmp r10, board + 108 + ((column_cells + 2) * 14)
  1915 00001AA6 7444                    		je .endp
  1916                                  
  1917 00001AA8 4981FA[30070000]        		cmp r10, board + 108 + ((column_cells + 2) * 15)
  1918 00001AAF 743B                    		je .endp
  1919                                  
  1920 00001AB1 4981FA[A0070000]        		cmp r10, board + 108 + ((column_cells + 2) * 16)
  1921 00001AB8 7432                    		je .endp
  1922                                  
  1923 00001ABA 4981FA[10080000]        		cmp r10, board + 108 + ((column_cells + 2) * 17)
  1924 00001AC1 7429                    		je .endp
  1925                                  
  1926 00001AC3 4981FA[80080000]        		cmp r10, board + 108 + ((column_cells + 2) * 18)
  1927 00001ACA 7420                    		je .endp
  1928                                  
  1929 00001ACC 4981FA[F0080000]        		cmp r10, board + 108 + ((column_cells + 2) * 19)
  1930 00001AD3 7417                    		je .endp
  1931                                  
  1932 00001AD5 4981FA[60090000]        		cmp r10, board + 108 + ((column_cells + 2) * 20)
  1933 00001ADC 740E                    		je .endp
  1934                                  
  1935 00001ADE 41C60220                		mov byte [r10], char_space
  1936 00001AE2 49FFC2                  		inc r10
  1937 00001AE5 4C8915(180A0000)        		mov [player2_position], r10
  1938                                   
  1939                                  
  1940                                  
  1941                                  	.endp:
  1942 00001AEC 48C705(480A0000)00-     		mov qword [colj], 0
  1942 00001AF4 000000             
  1943                                  
  1944 00001AF7 58                      	pop rax
  1945 00001AF8 59                      	pop rcx
  1946                                  	 
  1947 00001AF9 C3                      	ret
  1948                                  
  1949                                  _start: 
  1950                                      ; Obtener el tiempo inicial
  1951 00001AFA B8C9000000                  mov rax, sys_time
  1952 00001AFF 4831FF                      xor rdi, rdi  ; Argumento nulo para sys_time
  1953 00001B02 0F05                        syscall
  1954 00001B04 488905(10000000)            mov [start_time], rax  ; Guardar el tiempo inicial
  1955 00001B0B 48C705(39000000)03-         mov qword [bot_direction], down_direction  ; Direccion inicial del bot a la derecha
  1955 00001B13 000000             
  1956 00001B16 C605(41000000)00        	mov byte [bot_first_move], 0  ; Inicializar a 0 (el bot no ha realizado su primer movimiento)
  1957 00001B1D 48C705(31000000)00-     	mov qword [bot_counter], 0   ; Inicializar el contador del bot a 0
  1957 00001B25 000000             
  1958 00001B28 C605(42000000)00        	mov byte [bot_path_state], 0  ; Inicializar el estado de la ruta
  1959                                  
  1960                                  	print clear, clear_length
   208 00001B2F B801000000          <1>  mov eax, sys_write
   209 00001B34 BF01000000          <1>  mov edi, 1
   210 00001B39 48BE-               <1>  mov rsi, %1
   210 00001B3B [2000000000000000]  <1>
   211 00001B43 BA07000000          <1>  mov edx, %2
   212 00001B48 0F05                <1>  syscall
  1961 00001B4A E8C6020000              	call start_screen
  1962                                  	level_up:
  1963 00001B4F E8EAE6FFFF              	call canonical_off
  1964 00001B54 E80DE7FFFF              	call echo_off
  1965 00001B59 E8BCEFFFFF              	call set_bot_speed
  1966                                  
  1967                                   
  1968                                  	.main_loop:
  1969                                  
  1970                                      ; Verificar el tiempo transcurrido 
  1971 00001B5E B8C9000000                  mov rax, sys_time
  1972 00001B63 4831FF                      xor rdi, rdi
  1973 00001B66 0F05                        syscall
  1974 00001B68 488905(18000000)            mov [current_time], rax  ; Guardar el tiempo actual
  1975                                  
  1976                                      ; Calcular el tiempo restante
  1977 00001B6F 488B05(10000000)            mov rax, [start_time]
  1978 00001B76 4883C03C                    add rax, 60  ; Tiempo límite (60 segundos)
  1979 00001B7A 482B05(18000000)            sub rax, [current_time]
  1980 00001B81 4883F800                    cmp rax, 0
  1981 00001B85 0F8E35020000                jle .time_up  ; Si el tiempo restante es <= 0, salir del juego
  1982                                  
  1983                                      ; Convertir el tiempo restante a texto
  1984 00001B8B 4889C3                      mov rbx, rax
  1985 00001B8E B90A000000                  mov rcx, 10
  1986 00001B93 4831D2                      xor rdx, rdx
  1987 00001B96 48F7F1                      div rcx
  1988 00001B99 80C230                      add dl, '0'  ; Convertir a carácter ASCII
  1989 00001B9C 8815(32000000)              mov [time_buffer+1], dl
  1990 00001BA2 0430                        add al, '0'  ; Convertir a carácter ASCII  
  1991 00001BA4 8805(31000000)              mov [time_buffer], al
  1992                                  
  1993                                      ; Mostrar el tiempo restante en pantalla
  1994                                      print clear, clear_length
   208 00001BAA B801000000          <1>  mov eax, sys_write
   209 00001BAF BF01000000          <1>  mov edi, 1
   210 00001BB4 48BE-               <1>  mov rsi, %1
   210 00001BB6 [2000000000000000]  <1>
   211 00001BBE BA07000000          <1>  mov edx, %2
   212 00001BC3 0F05                <1>  syscall
  1995                                      print time_msg, time_msg_length
   208 00001BC5 B801000000          <1>  mov eax, sys_write
   209 00001BCA BF01000000          <1>  mov edi, 1
   210 00001BCF 48BE-               <1>  mov rsi, %1
   210 00001BD1 [1F00000000000000]  <1>
   211 00001BD9 BA12000000          <1>  mov edx, %2
   212 00001BDE 0F05                <1>  syscall
  1996                                      print time_buffer, time_buffer_length
   208 00001BE0 B801000000          <1>  mov eax, sys_write
   209 00001BE5 BF01000000          <1>  mov edi, 1
   210 00001BEA 48BE-               <1>  mov rsi, %1
   210 00001BEC [3100000000000000]  <1>
   211 00001BF4 BA03000000          <1>  mov edx, %2
   212 00001BF9 0F05                <1>  syscall
  1997                                  
  1998                                  	; Verificar si el bot ya realizó su primer movimiento
  1999 00001BFB 8A05(41000000)              mov al, [bot_first_move]
  2000 00001C01 3C00                        cmp al, 0
  2001 00001C03 7513                        jne .use_pattern_direction  ; Si ya se movió, usar el patrón de direcciones
  2002                                      
  2003                                      ; Primer movimiento: usar dirección a la derecha
  2004 00001C05 BF01000000                  mov rdi, right_direction
  2005 00001C0A E826EFFFFF                  call move_bot
  2006 00001C0F C605(41000000)01            mov byte [bot_first_move], 1  ; Marcar que el bot ya se movió
  2007 00001C16 EB2D                        jmp .after_bot_move
  2008                                      
  2009                                      .use_pattern_direction:
  2010                                          ; Guardar la posición actual del bot
  2011 00001C18 4C8B3D(100A0000)        		mov r15, [bot_position]
  2012                                  		
  2013                                  		; Intentar mover el bot
  2014 00001C1F 488B3D(39000000)        		mov rdi, [bot_direction]
  2015 00001C26 E80AEFFFFF              		call move_bot
  2016                                  		
  2017                                  		; Verificar si el bot se movió (comparando posición antes y después)
  2018 00001C2B 4C3B3D(100A0000)        		cmp r15, [bot_position]
  2019 00001C32 7511                    		jne .after_bot_move
  2020                                  		
  2021                                  		; Si no se movió, hay una colisión, cambiar dirección
  2022 00001C34 E8D5F6FFFF              		call change_bot_direction
  2023 00001C39 488B3D(39000000)        		mov rdi, [bot_direction]
  2024 00001C40 E8F0EEFFFF              		call move_bot
  2025                                  
  2026                                  	.after_bot_move:
  2027                                  		; Continuar con el resto del bucle principal
  2028 00001C45 E8A6E6FFFF              		call print_pallet
  2029 00001C4A E829EEFFFF              		call print_bot1
  2030 00001C4F E81EF7FFFF              		call print_player2
  2031                                  		print board, board_size
   208 00001C54 B801000000          <1>  mov eax, sys_write
   209 00001C59 BF01000000          <1>  mov edi, 1
   210 00001C5E 48BE-               <1>  mov rsi, %1
   210 00001C60 [3400000000000000]  <1>
   211 00001C68 BAA0090000          <1>  mov edx, %2
   212 00001C6D 0F05                <1>  syscall
  2032                                  
  2033                                  		; Leer entrada del usuario
  2034 00001C6F E818000000              		call .read_more
  2035                                  
  2036                                  		; Pausar el programa por un tiempo
  2037                                  		sleeptime
   225 00001C74 B823000000          <1>  mov eax, sys_nanosleep
   226 00001C79 48BF-               <1>  mov rdi, timespec
   226 00001C7B [0000000000000000]  <1>
   227 00001C83 31F6                <1>  xor esi, esi
   228 00001C85 0F05                <1>  syscall
  2038                                  
  2039                                  		; Volver al inicio del bucle
  2040 00001C87 E9D2FEFFFF              		jmp .main_loop
  2041                                  	
  2042                                  	.read_more:
  2043                                  		getchar  ; Leer un carácter de la entrada de teclado
   217 00001C8C B800000000          <1>  mov rax, sys_read
   218 00001C91 BF00000000          <1>  mov rdi, STDIN_FILENO
   219 00001C96 48BE-               <1>  mov rsi, input_char
   219 00001C98 [0500000000000000]  <1>
   220 00001CA0 BA01000000          <1>  mov rdx, 1
   221 00001CA5 0F05                <1>  syscall
  2044                                  
  2045 00001CA7 4883F801                		cmp rax, 1
  2046 00001CAB 0F85F7000000            		jne .done
  2047                                  
  2048 00001CB1 8A05(05000000)          		mov al, [input_char]
  2049                                  
  2050                                  		; Movimiento del Jugador 1
  2051 00001CB7 3C77                    		cmp al, 'w'
  2052 00001CB9 747C                    		je .move_player1_up
  2053 00001CBB 3C73                    		cmp al, 's'
  2054 00001CBD 0F8480000000            		je .move_player1_down
  2055 00001CC3 3C61                    		cmp al, 'a'
  2056 00001CC5 0F8484000000            		je .move_player1_left
  2057 00001CCB 3C64                    		cmp al, 'd'
  2058 00001CCD 0F848A000000            		je .move_player1_right
  2059                                  
  2060                                  		; Movimiento del Jugador 2 (Flechas)
  2061 00001CD3 3C1B                    		cmp al, 0x1B          ; Verificar si es la tecla Escape
  2062 00001CD5 0F85C0000000            		jne .go_out
  2063                                  		getchar               ; Leer el siguiente carácter
   217 00001CDB B800000000          <1>  mov rax, sys_read
   218 00001CE0 BF00000000          <1>  mov rdi, STDIN_FILENO
   219 00001CE5 48BE-               <1>  mov rsi, input_char
   219 00001CE7 [0500000000000000]  <1>
   220 00001CEF BA01000000          <1>  mov rdx, 1
   221 00001CF4 0F05                <1>  syscall
  2064 00001CF6 8A05(05000000)          		mov al, [input_char]  ; Almacenar el carácter leído en al
  2065 00001CFC 3C5B                    		cmp al, '['           ; Verificar si es '['
  2066 00001CFE 0F8597000000            		jne .go_out
  2067                                  		getchar               ; Leer el siguiente carácter
   217 00001D04 B800000000          <1>  mov rax, sys_read
   218 00001D09 BF00000000          <1>  mov rdi, STDIN_FILENO
   219 00001D0E 48BE-               <1>  mov rsi, input_char
   219 00001D10 [0500000000000000]  <1>
   220 00001D18 BA01000000          <1>  mov rdx, 1
   221 00001D1D 0F05                <1>  syscall
  2068 00001D1F 8A05(05000000)          		mov al, [input_char]  ; Almacenar el carácter leído en al
  2069 00001D25 3C41                    		cmp al, 'A'           ; Flecha hacia arriba
  2070 00001D27 7440                    		je .move_player2_up
  2071 00001D29 3C42                    		cmp al, 'B'           ; Flecha hacia abajo
  2072 00001D2B 7448                    		je .move_player2_down
  2073 00001D2D 3C43                    		cmp al, 'C'           ; Flecha hacia la derecha
  2074 00001D2F 745E                    		je .move_player2_right
  2075 00001D31 3C44                    		cmp al, 'D'           ; Flecha hacia la izquierda
  2076 00001D33 744C                    		je .move_player2_left
  2077                                  
  2078 00001D35 EB64                    		jmp .go_out
  2079                                  
  2080                                      .move_player1_up:
  2081 00001D37 BF02000000                      mov rdi, up_direction
  2082 00001D3C E8BBE5FFFF                      call move_pallet
  2083 00001D41 EB65                            jmp .done
  2084                                  
  2085                                      .move_player1_down:
  2086 00001D43 BF03000000                      mov rdi, down_direction
  2087 00001D48 E8AFE5FFFF                      call move_pallet
  2088 00001D4D EB59                            jmp .done
  2089                                  
  2090                                      .move_player1_left:
  2091 00001D4F 48C7C7FFFFFFFF                  mov rdi, left_direction
  2092 00001D56 E8A1E5FFFF                      call move_pallet
  2093 00001D5B EB4B                            jmp .done
  2094                                  
  2095                                      .move_player1_right:
  2096 00001D5D BF01000000                      mov rdi, right_direction
  2097 00001D62 E895E5FFFF                      call move_pallet
  2098 00001D67 EB3F                            jmp .done
  2099                                  
  2100                                      .move_player2_up:
  2101 00001D69 BF02000000                      mov rdi, up_direction
  2102 00001D6E E80BF6FFFF                      call move_player2
  2103 00001D73 EB33                            jmp .done
  2104                                  
  2105                                      .move_player2_down:
  2106 00001D75 BF03000000                      mov rdi, down_direction
  2107 00001D7A E8FFF5FFFF                      call move_player2
  2108 00001D7F EB27                            jmp .done
  2109                                  
  2110                                      .move_player2_left:
  2111 00001D81 48C7C7FFFFFFFF                  mov rdi, left_direction
  2112 00001D88 E8F1F5FFFF                      call move_player2
  2113 00001D8D EB19                            jmp .done
  2114                                  
  2115                                      .move_player2_right:
  2116 00001D8F BF01000000                      mov rdi, right_direction
  2117 00001D94 E8E5F5FFFF                      call move_player2
  2118 00001D99 EB0D                            jmp .done
  2119                                  
  2120                                      .go_out:
  2121 00001D9B 3C71                            cmp al, 'q'
  2122 00001D9D 0F84CE000000                    je exit
  2123                                  
  2124 00001DA3 E9E4FEFFFF                      jmp .read_more
  2125                                  
  2126                                      .done:
  2127                                          sleeptime
   225 00001DA8 B823000000          <1>  mov eax, sys_nanosleep
   226 00001DAD 48BF-               <1>  mov rdi, timespec
   226 00001DAF [0000000000000000]  <1>
   227 00001DB7 31F6                <1>  xor esi, esi
   228 00001DB9 0F05                <1>  syscall
  2128 00001DBB E99EFDFFFF                      jmp .main_loop
  2129                                  
  2130                                  	.time_up:
  2131                                  		; Mostrar mensaje de fin de juego
  2132                                  		print clear, clear_length
   208 00001DC0 B801000000          <1>  mov eax, sys_write
   209 00001DC5 BF01000000          <1>  mov edi, 1
   210 00001DCA 48BE-               <1>  mov rsi, %1
   210 00001DCC [2000000000000000]  <1>
   211 00001DD4 BA07000000          <1>  mov edx, %2
   212 00001DD9 0F05                <1>  syscall
  2133                                  		print game_over_msg, game_over_msg_length
   208 00001DDB B801000000          <1>  mov eax, sys_write
   209 00001DE0 BF01000000          <1>  mov edi, 1
   210 00001DE5 48BE-               <1>  mov rsi, %1
   210 00001DE7 [2602000000000000]  <1>
   211 00001DEF BA18000000          <1>  mov edx, %2
   212 00001DF4 0F05                <1>  syscall
  2134 00001DF6 EB79                    		jmp exit
  2135                                  
  2136                                  		print clear, clear_length
   208 00001DF8 B801000000          <1>  mov eax, sys_write
   209 00001DFD BF01000000          <1>  mov edi, 1
   210 00001E02 48BE-               <1>  mov rsi, %1
   210 00001E04 [2000000000000000]  <1>
   211 00001E0C BA07000000          <1>  mov edx, %2
   212 00001E11 0F05                <1>  syscall
  2137                                  		
  2138 00001E13 EB5C                    		jmp exit
  2139                                  
  2140                                  
  2141                                  start_screen: 
  2142                                  
  2143 00001E15 50                      	push rax
  2144 00001E16 51                      	push rcx
  2145 00001E17 52                      	push rdx
  2146 00001E18 57                      	push rdi
  2147 00001E19 56                      	push rsi
  2148                                  	
  2149                                  	print msg1, msg1_length	
   208 00001E1A B801000000          <1>  mov eax, sys_write
   209 00001E1F BF01000000          <1>  mov edi, 1
   210 00001E24 48BE-               <1>  mov rsi, %1
   210 00001E26 [3800000000000000]  <1>
   211 00001E2E BAEE010000          <1>  mov edx, %2
   212 00001E33 0F05                <1>  syscall
  2150                                  	getchar
   217 00001E35 B800000000          <1>  mov rax, sys_read
   218 00001E3A BF00000000          <1>  mov rdi, STDIN_FILENO
   219 00001E3F 48BE-               <1>  mov rsi, input_char
   219 00001E41 [0500000000000000]  <1>
   220 00001E49 BA01000000          <1>  mov rdx, 1
   221 00001E4E 0F05                <1>  syscall
  2151                                  	print clear, clear_length
   208 00001E50 B801000000          <1>  mov eax, sys_write
   209 00001E55 BF01000000          <1>  mov edi, 1
   210 00001E5A 48BE-               <1>  mov rsi, %1
   210 00001E5C [2000000000000000]  <1>
   211 00001E64 BA07000000          <1>  mov edx, %2
   212 00001E69 0F05                <1>  syscall
  2152                                  
  2153 00001E6B 58                      	pop rax
  2154 00001E6C 59                      	pop rcx
  2155 00001E6D 5A                      	pop rdx
  2156 00001E6E 5F                      	pop rdi
  2157 00001E6F 5E                      	pop rsi
  2158 00001E70 C3                      	ret
  2159                                  
  2160                                  
  2161                                  
  2162                                  exit: 
  2163 00001E71 E80AE4FFFF              	call canonical_on
  2164 00001E76 B83C000000              	mov    rax, 60
  2165 00001E7B BF00000000                  mov    rdi, 0
  2166 00001E80 0F05                        syscall
